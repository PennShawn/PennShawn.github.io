{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/saiki.jpeg","path":"images/saiki.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatPay.png","path":"images/wechatPay.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/aliPay.png","path":"images/aliPay.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1557574388198},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1557574388197},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1557574388197},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1557574388195},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1557574388195},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1557574388194},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1557574388194},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1557574388193},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1557574388193},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1557574388192},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1557574388192},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1557574388193},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1557574388191},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1557574388190},{"_id":"themes/next/_config.yml","hash":"fa7e5b1fbcfd080ad3e6c7669ec4a6192db09a0d","modified":1557574388191},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1557574388148},{"_id":"source/_posts/CountDowbLatch 和 CyclicBarrier.md","hash":"c428a2337ef500f2fc3ca4721c19ad24109cc13f","modified":1558408413619},{"_id":"source/_posts/@JsonField标签.md","hash":"b20fe35275991a1f36c5f2f229e469fa504794ad","modified":1558408204397},{"_id":"source/_posts/Item 10.Obey the general contract when overriding equals.md","hash":"a931b2172ae503ec39ec42b60e38e20437570a3e","modified":1558408710901},{"_id":"source/_posts/Item 9. Perfer try-with-resources to try-finally.md","hash":"f9c4ef555e102567dbeaa1a1ee3c83dca56cb792","modified":1557574388219},{"_id":"source/_posts/Item.18 Favor composition voer inheritance.md","hash":"c64327411127ebaea7c0a7249ba7b8fb5862592d","modified":1557574388219},{"_id":"source/_posts/Item13. Override clone judiciously.md","hash":"75d0b6f55e0e3e5053fe2f10c9d87c9e791c9391","modified":1557574388217},{"_id":"source/_posts/Item12. Always override toString.md","hash":"44d6129e11d9bcfb79d9c65deb73b705e44c5c31","modified":1557574388217},{"_id":"source/_posts/Item1. Consider static factory methods instead of constructors.md","hash":"768514fc764305f1831c034426d938266f2bb8f5","modified":1557574388218},{"_id":"source/_posts/Item11.Always override hashCode when you override equals.md","hash":"210b40f1b2d8b2338ffe9d86a7f206e91b5df0b2","modified":1557574388218},{"_id":"source/_posts/Item14. Consider implementing Comparable.md","hash":"ef1633a0af53424ba2240dc564485d0ddb996991","modified":1557574388217},{"_id":"source/_posts/Item17. Minimize mutablity.md","hash":"2135e068965faf7e9e77fdbe4b28616ab125c0aa","modified":1557574388215},{"_id":"source/_posts/Item15. Minisize the accessibility of classes and members.md","hash":"2262c20aaff24cba81208de2424b65e63f95dd6c","modified":1557574388216},{"_id":"source/_posts/Item16. In public classes,use accessor methods, not public fields.md","hash":"3757b8de56448fe4a038fe89276d957e527d5665","modified":1557574388215},{"_id":"source/_posts/Item20. Prefer interfaces to abstract classes.md","hash":"0fe1015ffe1ba5ede162bf5ba522d2613e72a6e2","modified":1558406203907},{"_id":"source/_posts/Item21. Design interface for posterity.md","hash":"44618ae0b67260faa3bb6cc1892381608a513a23","modified":1558406203908},{"_id":"source/_posts/Item19. Design and document for inheritance or else prohibit it.md","hash":"1b6d4b59bca28462f158d73afebb4d548431c0f8","modified":1558406203906},{"_id":"source/_posts/Item7. Elimate obsolete objects refrences.md","hash":"e48731a7a4e2bcde448ad4cd24be5495d9f8a12a","modified":1557574388213},{"_id":"source/_posts/Item4. Enforce noninstantiability with a private constructor.md","hash":"60cc9449fbc11237cf5d4373a7d07e72e21e8525","modified":1557574388214},{"_id":"source/_posts/Item5. Perfer dependency injection to hardwiring resources.md","hash":"1ca5c63c3feab10a1af905f7a6d408e48323b638","modified":1557574388213},{"_id":"source/_posts/Item8. Avoid finalizers and cleaners.md","hash":"3119cbb1d32908721f61672533081d944e6fde40","modified":1557574388212},{"_id":"source/_posts/List.contains()方法性能.md","hash":"c2121f53623f8080e55cc67ca26192fd303eadb0","modified":1558406203911},{"_id":"source/_posts/JVM.md","hash":"ef6ef59170ab4a7b435d6f6d4cfe99cc2e78c05a","modified":1558406203909},{"_id":"source/_posts/Java Python 速度对比.md","hash":"198395ed310e11e55d5e55fbd50f1595ee83b3de","modified":1558406203909},{"_id":"source/_posts/KCP协议.md","hash":"b2c8950111a9257fd713f4f5c05160a0a4889310","modified":1558406203910},{"_id":"source/_posts/Mina nextFilter.md","hash":"9769c10c424e020f6e810b4f0e3428363f223f0c","modified":1558406203911},{"_id":"source/_posts/Mina中的观察者模式.md","hash":"aa56de538e024b5d56b6629963fa9ac2274fec21","modified":1557574388210},{"_id":"source/_posts/Mockito的另一种应用.md","hash":"88bba870fcd2a0197cbabb4ec4e6850715656351","modified":1557574388210},{"_id":"source/_posts/Mina 为每个session构建filterChain.md","hash":"8abee2f44310004ce58b931c385c7078ad8ae0ed","modified":1558409004227},{"_id":"source/_posts/MongoDB 索引.md","hash":"3b0a8301b5582a51d9b9f9ff3fbe0feea5382c96","modified":1558406203914},{"_id":"source/_posts/MongoDB $type操作符.md","hash":"02aafce2b01b2d7c1a1a6586b0c2aa56439e15ba","modified":1558406203913},{"_id":"source/_posts/MongoDB 查询文档.md","hash":"adc7a685873dfb8cc73ccc289dd3df39006a7298","modified":1558406203913},{"_id":"source/_posts/MongoDB 聚合(三) aggregate().md","hash":"ea934473843a3628b6f740c02cf08993c6491e04","modified":1558406203915},{"_id":"source/_posts/MongoDB 聚合(一) group.md","hash":"5cf0002e29f2230d55b5624ba5be12a9ca47aee9","modified":1558406203914},{"_id":"source/_posts/Mongo的一些操作.md","hash":"b63151f6fc9a309ce9c2d84eb35640b35f95c2eb","modified":1558406203916},{"_id":"source/_posts/MongoDB 聚合(二) MapReduce.md","hash":"cd91c8a46ab04367dbc28ecffb7f1d7588a2dc04","modified":1558406203916},{"_id":"source/_posts/PHP数据类型.md","hash":"6bfa6c12419880572b02c41f53bb1895cb654655","modified":1558406203917},{"_id":"source/_posts/Redis.md","hash":"88a814162e1f77b239a9b957d8938700ddf1f555","modified":1558406203918},{"_id":"source/_posts/Queue remove-poll , add-offer , element-pekk 区别.md","hash":"46a25a21c817ff4f1f6a69e0bb3d450758db93a9","modified":1558406203918},{"_id":"source/_posts/PowerMock.md","hash":"16a64af58601905930c5d2a5fe11b744a21331f2","modified":1557574388209},{"_id":"source/_posts/ThreadPool2.md","hash":"c7478f4b42820775273cbedbf6de5fd70fec0656","modified":1557574388209},{"_id":"source/_posts/awk常用的几种命令.md","hash":"d2b814a4a11d87ae81151a9f69ae2ad2f072bdc1","modified":1558406203919},{"_id":"source/_posts/SVN常用命令.md","hash":"d90a9a55c55d50b668ed7724c90da63825b2196c","modified":1558406203919},{"_id":"source/_posts/find.md","hash":"8a040d79e3bd16f757f02c2672a0e22fc3b41842","modified":1558406203920},{"_id":"source/_posts/git的一些操作.md","hash":"65c18d56788668458273ff2b9ce95dacbdd75694","modified":1558406203920},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1557574387755},{"_id":"source/_posts/jinja配置文件渲染模板.md","hash":"3dd49466172f3213d166f5f0ae36f43d00940cbb","modified":1558406203921},{"_id":"source/_posts/idea方法模板,显示参数和返回值类型.md","hash":"6544b8eb0f391f40894ed465f3f37e040c9402b6","modified":1557574388208},{"_id":"source/_posts/mdPage.md","hash":"a9dac264737fd0eada327680bf2015d28a8cb27a","modified":1557574388207},{"_id":"source/_posts/mina 中的IoEvent.md","hash":"0f31ba858b4a4c324952c307749670b3b09ffbd8","modified":1558406203921},{"_id":"source/_posts/php连mysql.md","hash":"f7d047d1f9862cbae61f8352f9f73cbba278ce2a","modified":1558406203924},{"_id":"source/_posts/php执行shell命令.md","hash":"9b54ed4ca4b247b360ef0b3c430eedf8b3494b0b","modified":1558406203923},{"_id":"source/_posts/newPage.md","hash":"21182ffec0e3b5c948d37f2cb6013d682f467a27","modified":1557574388207},{"_id":"source/_posts/wget apt-get等的关系.md","hash":"ebce8f39c6790ec25edd1f758dc48f5b23d6cbda","modified":1558406203925},{"_id":"source/_posts/函数式接口.md","hash":"0cd7033c7b5d220ce0d557a4e03982a2bd08ad91","modified":1557574388206},{"_id":"source/_posts/文章标题.md","hash":"ddb3134df071d299f7d12c48d54d5b986db71470","modified":1557574388205},{"_id":"source/_posts/最简单的搭梯子方法.md","hash":"ccada9e126cbd123c63567d83c0abffd454aa7eb","modified":1558406203927},{"_id":"source/_posts/启动apache时报错.md","hash":"55f39ccf3950e6c830d121711927414973f518d2","modified":1558406203926},{"_id":"source/_posts/梯子KCP加速.md","hash":"898a69380565b04798ffa181778e26625da2f065","modified":1558406203927},{"_id":"source/_posts/百度云不限速.md","hash":"87fae448bf1d04178156d7e1e815659dcf043320","modified":1558406203930},{"_id":"source/_posts/梯子多用户配置.md","hash":"49f77894994f90a61a3dfe7b6ecdb1d7d33d902e","modified":1558406203928},{"_id":"source/_posts/梯子开启bbr.md","hash":"0e1afe0f32620b0ff64bfbe21e6a133961539d3e","modified":1558406203929},{"_id":"source/_posts/看梯子的日志.md","hash":"72de36e55a5743bf69388e2d7cc677c4708976b3","modified":1558406203932},{"_id":"source/_posts/线程池.md","hash":"fa774998ae0c706dcc3629d2d4d8e94bcc12d01d","modified":1557574388205},{"_id":"source/_posts/翻墙过程中遇到的问题.md","hash":"ed6c664911e609a4b95ed622baa1fc408db1b598","modified":1558406203933},{"_id":"source/_posts/线程池2.md","hash":"38bf0f1a02a6a1189405fad99ef2565f600d15f9","modified":1558406203932},{"_id":"source/categories/index.md","hash":"9418ebe1f0f3806f67143d91175b528c468104b3","modified":1557574388204},{"_id":"source/tags/index.md","hash":"586795420e8070de4d0e73462e47f34ee4327ca8","modified":1557574388204},{"_id":"source/about/index.md","hash":"c6055f2ef4909ac5dec5109cb0b41ca36ec14d93","modified":1557574388204},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1557574388196},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1557574388196},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1557574388196},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1557574388195},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1557574388189},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1557574388189},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1557574388188},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1557574388188},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1557574388187},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1557574388187},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1557574388187},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1557574388185},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1557574388186},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1557574388185},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1557574388186},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1557574388185},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1557574388184},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1557574388184},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1557574388183},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1557574388182},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1557574388183},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1557574388149},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1557574388150},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1557574388149},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1557574388150},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1557574388146},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1557574388145},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1557574388149},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1557574388148},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1557574388148},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1557574388084},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1557574388085},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1557574388084},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557574387895},{"_id":"source/_posts/JVM/JVM.png","hash":"06a192a9b45409b63b64b2af56ead1c6850a75c3","modified":1557574388212},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1557574388183},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1557574387824},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1557574388182},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1557574388181},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1557574388181},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1557574388181},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1557574388180},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1557574388180},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1557574388171},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1557574388170},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1557574388168},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1557574388179},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1557574388178},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1557574388177},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1557574388178},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1557574388176},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1557574388176},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1557574388176},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1557574388155},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1557574388156},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1557574388156},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1557574388155},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1557574388154},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1557574388153},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1557574388153},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1557574388145},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1557574388144},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1557574388144},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1557574388143},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1557574388143},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1557574388142},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1557574388141},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1557574388143},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1557574388142},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1557574388093},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1557574387895},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1557574387896},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1557574387896},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1557574387896},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1557574387897},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1557574387897},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1557574387897},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1557574387898},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1557574387898},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1557574387898},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1557574387898},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1557574387899},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557574387899},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1557574387899},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557574387899},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1557574387899},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1557574387900},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1557574387900},{"_id":"themes/next/source/images/saiki.jpeg","hash":"be8fe22012cc1dc0324fdce7cf391da28b1cdb1b","modified":1557574387900},{"_id":"themes/next/source/images/wechatPay.png","hash":"78b15ca731b243b1c86d4cbcdf73417c3784c099","modified":1557574387901},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557574387836},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557574387836},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557574387883},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557574387883},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557574387884},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557574387894},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557574387894},{"_id":"themes/next/source/images/aliPay.png","hash":"ff4e79a062204f48477a43036c5d4c09600d90d6","modified":1557574387896},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1557574388170},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1557574388169},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1557574388170},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1557574388175},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1557574388175},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1557574388174},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1557574388178},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1557574388177},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1557574388168},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1557574388167},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1557574388166},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1557574388166},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1557574388165},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1557574388165},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1557574388164},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1557574388163},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1557574388164},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1557574388162},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1557574388163},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1557574388162},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1557574388161},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1557574388161},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1557574388160},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1557574388160},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1557574388159},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1557574388159},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1557574388159},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1557574388158},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1557574388158},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1557574388157},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1557574388174},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1557574388173},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1557574388173},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1557574388172},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1557574388152},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1557574388151},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1557574388151},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1557574388151},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1557574388104},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1557574388104},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1557574388104},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1557574388103},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1557574388094},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1557574388095},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1557574388094},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1557574388093},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1557574387901},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1557574387901},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1557574387902},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1557574387902},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1557574387902},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1557574387902},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1557574387903},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1557574387903},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1557574387904},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1557574387904},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1557574387904},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1557574387916},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1557574387916},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1557574387910},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1557574387924},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1557574388092},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1557574388092},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1557574388091},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1557574388090},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1557574387928},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1557574388090},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1557574388089},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1557574388089},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1557574387953},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1557574388088},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1557574387953},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1557574387953},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1557574387954},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1557574387954},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1557574387954},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1557574387955},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1557574387955},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1557574387956},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1557574387955},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1557574387956},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1557574387956},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1557574387957},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1557574387957},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1557574387957},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1557574387958},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1557574387958},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1557574387959},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1557574387959},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1557574388086},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1557574388085},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1557574387970},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1557574387972},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1557574387971},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1557574388088},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1557574388088},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1557574388087},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1557574388087},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1557574387951},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1557574387951},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1557574387952},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1557574387945},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1557574388152},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1557574388152},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1557574388140},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1557574388141},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1557574388140},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1557574388140},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1557574388139},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1557574388131},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1557574388117},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1557574388107},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1557574388107},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1557574388109},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1557574388108},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1557574388106},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1557574388106},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1557574388105},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1557574388103},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1557574388102},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1557574388102},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1557574388102},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1557574388101},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1557574388101},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1557574388101},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1557574388100},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1557574388099},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1557574388098},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1557574388099},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1557574388098},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1557574388098},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1557574388097},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1557574388097},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1557574388096},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1557574388095},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1557574388096},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1557574388095},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1557574387903},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1557574387907},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1557574387909},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1557574387910},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1557574387926},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1557574387926},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1557574387929},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1557574387929},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1557574387931},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1557574387965},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1557574387966},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1557574387917},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1557574387917},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1557574387918},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1557574387918},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1557574387919},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1557574387919},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1557574387922},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1557574387923},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1557574387908},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1557574387944},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1557574387944},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1557574387969},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1557574387923},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1557574388139},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1557574388138},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1557574388137},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1557574388138},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1557574388137},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1557574388136},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1557574388135},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1557574388135},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1557574388135},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1557574388134},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1557574388134},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1557574388133},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1557574388133},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1557574388132},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1557574388131},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1557574388130},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1557574388130},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1557574388130},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1557574388129},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1557574388128},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1557574388128},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1557574388127},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1557574388129},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1557574388127},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1557574388127},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1557574388126},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1557574388125},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1557574388126},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1557574388124},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1557574388123},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1557574388124},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1557574388123},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1557574388122},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1557574388121},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1557574388120},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1557574388119},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1557574388120},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1557574388119},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1557574388118},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1557574388117},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1557574388116},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1557574388116},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1557574388116},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1557574388115},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1557574388115},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1557574388114},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1557574388114},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1557574388113},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1557574388112},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1557574388113},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1557574388112},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1557574388112},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1557574388111},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1557574388111},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1557574388110},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1557574388110},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1557574388110},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1557574388109},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1557574388100},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1557574388099},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1557574388097},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1557574387905},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1557574387905},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1557574387906},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1557574387906},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1557574387933},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1557574387905},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1557574387920},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1557574387920},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1557574387920},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1557574387921},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1557574387921},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1557574387922},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1557574387943},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1557574387935},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1557574387914},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1557574387964},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1557574387940},{"_id":"public/categories/index.html","hash":"0fbfb1493a72fa03af3c40128289e8f41e318046","modified":1558407981544},{"_id":"public/about/index.html","hash":"1b4495ddb6a928d36d98334ab87276618daba0f4","modified":1558407981544},{"_id":"public/archives/2019/01/index.html","hash":"00b8315b572b63659ef2e2d593b4703064a14ba8","modified":1558407981555},{"_id":"public/archives/2019/04/index.html","hash":"a0f3c7e6e397f36f433f87e1815f47792c70bc93","modified":1558407981555},{"_id":"public/categories/技术/page/7/index.html","hash":"c0863bb4db6ddb2516d1fdd90973ceec30eeb11e","modified":1558407981555},{"_id":"public/tags/kcp/index.html","hash":"048422e91b741285192ecca4d52f0eaa41450b48","modified":1558407981555},{"_id":"public/tags/网络/index.html","hash":"97d88618292813fbeab42a9fdd92da994c8d2a19","modified":1558407981555},{"_id":"public/tags/Mock/index.html","hash":"b46cfcb0c87f00144cee1fd44391b4371290dab5","modified":1558407981556},{"_id":"public/tags/Mongo/index.html","hash":"79c94350d4f6da526c4e39c1d7f4781a5e5dbf8f","modified":1558407981556},{"_id":"public/tags/linux/page/2/index.html","hash":"2382b5f5bc07f7400625bffa42e4067f0e997cad","modified":1558407981556},{"_id":"public/tags/redis/index.html","hash":"9814ce339d4368e0629b072cdf0a3a6b0e7c7d8f","modified":1558407981556},{"_id":"public/tags/awk/index.html","hash":"06cef9658e38f0ee33519c18df7875c46207652b","modified":1558407981556},{"_id":"public/tags/svn/index.html","hash":"66006f257d4a29cf52b680b494ed7dadb46ad6ec","modified":1558407981556},{"_id":"public/tags/git/index.html","hash":"2a86a0479041f913ecb8cef19e22c96489230fca","modified":1558407981556},{"_id":"public/tags/python/index.html","hash":"bf048871f273792319224213896380a842502f47","modified":1558407981556},{"_id":"public/tags/jinja/index.html","hash":"c2a53d99886964fa357f0a7d15b30aa545a241e8","modified":1558407981556},{"_id":"public/tags/idea/index.html","hash":"26caab4ddd620fe5018ae7b68796eb32ff466dcf","modified":1558407981556},{"_id":"public/tags/Mysql/index.html","hash":"fbbe16bb502ba2537c8a098f018fb02ad507d5d2","modified":1558407981556},{"_id":"public/tags/hexo-hello/index.html","hash":"87c7a1ae2c2f9fba713105fb2efc477c146394e8","modified":1558407981556},{"_id":"public/tags/tricks/index.html","hash":"da09bbd6f2cf7e368c44c9e01e39cfc76fe4dada","modified":1558407981556},{"_id":"public/tags/ThreadPool/index.html","hash":"6e211a5ddb9f2063c3d8561889e332e3732aa4ef","modified":1558407981556},{"_id":"public/tags/index.html","hash":"671cb1003cc649425d82916ad3174b6844a8066f","modified":1558407981556},{"_id":"public/2019/05/21/翻墙过程中遇到的问题/index.html","hash":"246cb0dbd2b34a872a07aa19419c769d85540ff6","modified":1558408433144},{"_id":"public/2019/05/21/看梯子的日志/index.html","hash":"68d98964de18a015611c2782a56b44486f948081","modified":1558407981557},{"_id":"public/2019/05/21/梯子开启bbr/index.html","hash":"27a6c4c0dc0b73bab582a080ebafec881cf2f805","modified":1558407981557},{"_id":"public/2019/05/21/梯子多用户配置/index.html","hash":"2e6e676431c75dc1bf1629b03bf4a0243140ffe7","modified":1558407981557},{"_id":"public/2019/05/21/梯子KCP加速/index.html","hash":"0860b0356f2378ce11e46a902885ee735eb2254d","modified":1558407981557},{"_id":"public/2019/05/21/最简单的搭梯子方法/index.html","hash":"7f2f5da34698dd59257057b1c0f1011ea3455498","modified":1558407981557},{"_id":"public/2019/05/21/@JsonField标签/index.html","hash":"57f26aee59d9ef700c55a00b6c4820c29db7a9a1","modified":1558408433144},{"_id":"public/2019/05/11/Item 9. Perfer try-with-resources to try-finally/index.html","hash":"46287566291860ce7f2bc769254771f1bd2dbd75","modified":1558408224798},{"_id":"public/2019/05/11/Item.18 Favor composition voer inheritance/index.html","hash":"0fd33be272219447c141d3927b49503978d90fbf","modified":1558408730860},{"_id":"public/2019/05/11/Item 10.Obey the general contract when overriding equals/index.html","hash":"683f893ba6d73e7794fcab6d77a24f4f8cfe22e4","modified":1558407981557},{"_id":"public/2019/05/11/Item11.Always override hashCode when you override equals/index.html","hash":"480559509b40d684061002bb6f434609ff0b0a53","modified":1558408730861},{"_id":"public/2019/05/11/Item1. Consider static factory methods instead of constructors/index.html","hash":"3fbd99032fe380716f997d669c2ef8459a525076","modified":1558407981557},{"_id":"public/2019/05/11/Item13. Override clone judiciously/index.html","hash":"3e8bc4f4770cd5c73a1e33bb6fc228f908bf2706","modified":1558407981557},{"_id":"public/2019/05/11/Item12. Always override toString/index.html","hash":"a0d693d8eb9ff19aa9d976e237a63dfe181eea6f","modified":1558407981557},{"_id":"public/2019/05/11/Item14. Consider implementing Comparable/index.html","hash":"0a209285f53f4bb73c360a1555d42d78fce8117d","modified":1558407981558},{"_id":"public/2019/05/11/Item15. Minisize the accessibility of classes and members/index.html","hash":"8db7b157362a3ca0df44ef0a5c170f2c1f605db9","modified":1558407981558},{"_id":"public/2019/05/11/Item17. Minimize mutablity/index.html","hash":"6eab9db15e68b8b0aea5c8430088493ed3a684e8","modified":1558407981558},{"_id":"public/2019/05/11/Item16. In public classes,use accessor methods, not public fields/index.html","hash":"8aab14c41e82ccc7069e5a98c1c94d6527aee2e4","modified":1558407981558},{"_id":"public/2019/05/11/Item4. Enforce noninstantiability with a private constructor/index.html","hash":"1c045d1691bbfd8687ee360af3ad8ce400593534","modified":1558407981558},{"_id":"public/2019/05/11/Item7. Elimate obsolete objects refrences/index.html","hash":"5d03f70988014bcfea6aff856413f3f0142e4468","modified":1558407981558},{"_id":"public/2019/05/11/Item5. Perfer dependency injection to hardwiring resources/index.html","hash":"6e8aa60802d8ceed232f4c1c38bfb8eaed9367e2","modified":1558407981558},{"_id":"public/2019/05/11/Item8. Avoid finalizers and cleaners/index.html","hash":"6c96fb370e3c4c1a29ec7ce06bef5ced1f688a9a","modified":1558407981558},{"_id":"public/2019/05/11/Mockito的另一种应用/index.html","hash":"fedad11d3d1b0a113fc6b58ac38c66e6de6c6e89","modified":1558407981558},{"_id":"public/2019/05/11/Mina中的观察者模式/index.html","hash":"8e1277f190fab174b576e0038753c5d2a715689f","modified":1558407981558},{"_id":"public/2019/05/11/ThreadPool2/index.html","hash":"931dca68f0e81191f07715352f84bd699da0e8d4","modified":1558407981558},{"_id":"public/2019/05/11/PowerMock/index.html","hash":"35211a86da11c4065c00c800dc228253bc88dba1","modified":1558407981558},{"_id":"public/2019/05/11/idea方法模板,显示参数和返回值类型/index.html","hash":"322ae38b947b04c2f42e14644ed5801d9adb70f1","modified":1558407981558},{"_id":"public/2019/05/11/newPage/index.html","hash":"d1706cef7b0b565481120575064d4ce1887bea99","modified":1558407981558},{"_id":"public/2019/05/11/函数式接口/index.html","hash":"828122db7fafc0b9240f40ff03762fe7f60c6e5a","modified":1558407981558},{"_id":"public/2019/05/11/线程池/index.html","hash":"3dbced89e8a1b5ab1620c63bf8f1a7c9a3a88d41","modified":1558407981559},{"_id":"public/2019/05/11/hello-world/index.html","hash":"b9020851d263ce1955c39a2f2baa61665792e225","modified":1558407981559},{"_id":"public/2019/04/13/文章标题/index.html","hash":"e71744f73a1dc4deea1d816866ee416d77b17dc2","modified":1558407981559},{"_id":"public/2019/01/08/mdPage/index.html","hash":"dbdfa72a7e7f63d46b13d2cfbbc4452f22edcfbe","modified":1558407981559},{"_id":"public/archives/index.html","hash":"8c65ce23aceb1c16307e00e6f6ed12a4de286ea5","modified":1558409020498},{"_id":"public/archives/page/2/index.html","hash":"3db5dfd187387e1ddbffca46a073143e02236b5d","modified":1558409020498},{"_id":"public/archives/page/3/index.html","hash":"4d100105aa7e64419f1ef12b5cca46ee88d2ac8f","modified":1558409020498},{"_id":"public/archives/page/4/index.html","hash":"ba43f619f5e9cf13deaca083e5d2fcb23569055d","modified":1558409020498},{"_id":"public/archives/page/5/index.html","hash":"c876714e09817d204be8cced30316a808dc6cd6e","modified":1558408730862},{"_id":"public/archives/page/6/index.html","hash":"b092e00bc336f2535aedf92157259b2e536a990c","modified":1558407981559},{"_id":"public/archives/page/7/index.html","hash":"259be85ea4f65b9263cf46608569ebeca8c5bfcd","modified":1558407981559},{"_id":"public/archives/2019/index.html","hash":"a107be3ceec045f7f5d00875d2e17c1aa21ad400","modified":1558409020498},{"_id":"public/archives/2019/page/2/index.html","hash":"90e16719e5137c2a4500fa84dd26e2c55d075a20","modified":1558409020499},{"_id":"public/archives/2019/page/3/index.html","hash":"32aa73e1a1002028ca335a7b708ab9158e4ecddf","modified":1558409020499},{"_id":"public/archives/2019/page/4/index.html","hash":"f139b1b67eb47f775ece2ac56bc0022b6928888a","modified":1558409020499},{"_id":"public/archives/2019/page/5/index.html","hash":"da3099778ff310c49231b12dbaa8ae63eb343c1e","modified":1558408730863},{"_id":"public/archives/2019/page/6/index.html","hash":"77091295b833454f68c9bf5986b988a55c0d7661","modified":1558407981559},{"_id":"public/archives/2019/page/7/index.html","hash":"7352fef7076a47bfffa398f77d4f27f2aa130345","modified":1558407981559},{"_id":"public/archives/2019/05/index.html","hash":"6e77f2d6cbdc1e04be9f15a17160075155381fe3","modified":1558409020499},{"_id":"public/archives/2019/05/page/2/index.html","hash":"141a6c4c068892b3451d6d35133997bb0cabf572","modified":1558409020499},{"_id":"public/archives/2019/05/page/3/index.html","hash":"0b49e2965ade9594a963cf81ad9f297f54f9479a","modified":1558409020499},{"_id":"public/archives/2019/05/page/4/index.html","hash":"4f894c45cd09a5464970352f61ac3accf9094de3","modified":1558409020499},{"_id":"public/archives/2019/05/page/5/index.html","hash":"60cc8e21298183dd7e2aab62826bc668dc47b178","modified":1558408730864},{"_id":"public/archives/2019/05/page/6/index.html","hash":"e99d196883bfb7bfdf12d12a2ec1efb4d6845aac","modified":1558407981560},{"_id":"public/archives/2019/05/page/7/index.html","hash":"2a1206a6a7c0856a78bfcf2e9f06d0731a30513b","modified":1558407981560},{"_id":"public/categories/技术/index.html","hash":"23da48778c6558e5b0243b914595a66825c65dc6","modified":1558409020499},{"_id":"public/categories/技术/page/2/index.html","hash":"4164b057cd700088e513e3380331f0a0cffc8c74","modified":1558409020499},{"_id":"public/categories/技术/page/3/index.html","hash":"ca0b3fa868c1b78b07e53fe0b53b2205fae57b09","modified":1558409020499},{"_id":"public/categories/技术/page/4/index.html","hash":"b0d84a72f58ec23c385634e3a82d0b17e8edd969","modified":1558409020500},{"_id":"public/categories/技术/page/5/index.html","hash":"f2fbc97ff471731750fbba1fb5dca77febfd36ec","modified":1558408730866},{"_id":"public/categories/技术/page/6/index.html","hash":"e058d8b593e0739970e9f4443e955ffab33cb079","modified":1558407981560},{"_id":"public/index.html","hash":"d5a4c7724465aea1739763d7710c30651d467c65","modified":1558409020500},{"_id":"public/page/2/index.html","hash":"154a576ecd5fba2db0bcc695072bfd52e0bbe6bd","modified":1558409020500},{"_id":"public/page/3/index.html","hash":"57b956b284f844bc240e8ffedc6804ae630ddc5c","modified":1558409020500},{"_id":"public/page/4/index.html","hash":"7bc8921562bcd9b7772e7b57b142a5fba1f6871b","modified":1558409020500},{"_id":"public/page/5/index.html","hash":"ab0a39c23cb54bb497aa9ca1dfd8b22089c22426","modified":1558408730870},{"_id":"public/page/6/index.html","hash":"8dad192c0f72f053eec32a97510a8e602fe282e4","modified":1558407981561},{"_id":"public/page/7/index.html","hash":"4b304cab6d6ad407e2f6f4ab69f61cd54bcfdb21","modified":1558407981561},{"_id":"public/tags/Java/index.html","hash":"9e82c820b92d16d715df08bae9e025ef5c4d8912","modified":1558409020500},{"_id":"public/tags/Java/page/2/index.html","hash":"b845f8b6a1f6fb27be4e71fdbcce91c24e60be78","modified":1558408730865},{"_id":"public/tags/Java/page/3/index.html","hash":"c0a37c602d4eb7309c30a6879c0341e98d1af8e6","modified":1558407981561},{"_id":"public/tags/Java/page/4/index.html","hash":"db196422be534344ba9d3e7322c67902362af72c","modified":1558407981561},{"_id":"public/tags/Effective-Java/index.html","hash":"6fcf12c060f5ae8e3298bc91806ce6824bb3930f","modified":1558408730865},{"_id":"public/tags/Effective-Java/page/2/index.html","hash":"4e2b8e5466cb509bc95e751c6c50e405e3040ec3","modified":1558407981561},{"_id":"public/tags/mina/index.html","hash":"7f7f4c11c9c54ad6ab9db3550e83928e6ab4be68","modified":1558409020500},{"_id":"public/tags/MongoDB/index.html","hash":"2385472273179c61cd5e6dbdf654818501687930","modified":1558407981562},{"_id":"public/tags/PHP/index.html","hash":"781f02b877e040c08bb3793c13f03b63afaa7acd","modified":1558407981562},{"_id":"public/tags/linux/index.html","hash":"0caa4344c37098b8d9adb7f329c6baf44fc07d79","modified":1558407981562},{"_id":"public/tags/梯子/index.html","hash":"2c5f30a9e6bf480626b57f2f01a4463fec1a3e27","modified":1558407981562},{"_id":"public/2019/05/21/CountDowbLatch 和 CyclicBarrier/index.html","hash":"354620808a2098fa1e75e9c97a751b4480d2101d","modified":1558408730859},{"_id":"public/2019/05/21/线程池2/index.html","hash":"cea8c2edc6421087e4219f7a8cd1061f5101a1a3","modified":1558407981584},{"_id":"public/2019/05/21/百度云不限速/index.html","hash":"dbe7ed89898d746d049a732cefcb4b945dee49f9","modified":1558407981584},{"_id":"public/2019/05/21/wget apt-get等的关系/index.html","hash":"60d1567b17ac14d02f277f86b53500800960fcd5","modified":1558407981584},{"_id":"public/2019/05/21/启动apache时报错/index.html","hash":"cd1ab4cad67e616f95d9cca57e430674a714a49d","modified":1558407981584},{"_id":"public/2019/05/21/php连mysql/index.html","hash":"e66edd0110dcce3fc51d9b529072e8ba8aa51b84","modified":1558407981584},{"_id":"public/2019/05/21/php执行shell命令/index.html","hash":"1a1e9c02fa32775d6da769f041ad4c68217ded61","modified":1558407981585},{"_id":"public/2019/05/21/jinja配置文件渲染模板/index.html","hash":"6303b09290d0513077e58af46c75f2e74e0f969c","modified":1558407981585},{"_id":"public/2019/05/21/mina 中的IoEvent/index.html","hash":"8b4af21ffa18f23a2dff8bb6f873720a4fd054d1","modified":1558407981585},{"_id":"public/2019/05/21/find/index.html","hash":"589d3bd043162291df1056b24757997068a8f963","modified":1558407981585},{"_id":"public/2019/05/21/git的一些操作/index.html","hash":"84d1d2576d27dfedc9901c24278391db65a5b771","modified":1558407981585},{"_id":"public/2019/05/21/awk常用的几种命令/index.html","hash":"e818256231e65223dbc08733b2c66315bead7494","modified":1558407981586},{"_id":"public/2019/05/21/SVN常用命令/index.html","hash":"b9f3f8e60da6efdb86dce07c6d943c24c249e512","modified":1558407981586},{"_id":"public/2019/05/21/Redis/index.html","hash":"7a42bd8ccdbfe092735fbe8397479516f46cfceb","modified":1558407981586},{"_id":"public/2019/05/21/PHP数据类型/index.html","hash":"8a8b55f42da69d01ba8af958726a6ff598f49b17","modified":1558407981586},{"_id":"public/2019/05/21/Queue remove-poll , add-offer , element-pekk 区别/index.html","hash":"33c0b87065a617234cad522423924ccfece5003c","modified":1558407981586},{"_id":"public/2019/05/21/Mongo的一些操作/index.html","hash":"64007daab9a1d7b02c8d129855d7808a435d220e","modified":1558407981586},{"_id":"public/2019/05/21/MongoDB 聚合(三) aggregate()/index.html","hash":"ddeed3318b37728da435bdc9eb3d71a24d152e3e","modified":1558407981586},{"_id":"public/2019/05/21/MongoDB 聚合(二) MapReduce/index.html","hash":"77051512905e007cb14fc57f822e1f2cf62d29b9","modified":1558407981586},{"_id":"public/2019/05/21/MongoDB 聚合(一) group/index.html","hash":"a603234c1f6381fb9350cb80f919dc78e5660606","modified":1558407981586},{"_id":"public/2019/05/21/MongoDB 索引/index.html","hash":"3a32b56b6472a7b62c4940b21a8189be4ec60d02","modified":1558407981587},{"_id":"public/2019/05/21/MongoDB 查询文档/index.html","hash":"2737d788a06e78a241fac97204a8322df20b4232","modified":1558407981587},{"_id":"public/2019/05/21/MongoDB $type操作符/index.html","hash":"a5e375d68ccb278f750fe46e55e514ff6d6a100c","modified":1558407981587},{"_id":"public/2019/05/21/Mina nextFilter/index.html","hash":"aa358a097592826f4bb8a5745fa2dbb80768c134","modified":1558409020498},{"_id":"public/2019/05/21/Mina 为每个session构建filterChain/index.html","hash":"32ce250980c30261f270aebc35c9f124668f4000","modified":1558409020497},{"_id":"public/2019/05/21/List.contains()方法性能/index.html","hash":"800386c9185031544d78f680b798cfa7d4d7af48","modified":1558409020498},{"_id":"public/2019/05/21/KCP协议/index.html","hash":"5fb5817e1b32ec8bcfbac59256623db7a0c2611a","modified":1558407981587},{"_id":"public/2019/05/21/Java Python 速度对比/index.html","hash":"c015b9295d6ddccb90ba91d18a6af4bf75fd3a16","modified":1558407981587},{"_id":"public/2019/05/21/JVM/index.html","hash":"808f5026ced511cb320cdaa79dd01e90d49ecc01","modified":1558407981588},{"_id":"public/2019/05/21/Item20. Prefer interfaces to abstract classes/index.html","hash":"09adce46d04290a8b58280ceb7793285fe56f199","modified":1558407981588},{"_id":"public/2019/05/21/Item21. Design interface for posterity/index.html","hash":"4de1c1966f6f208f13bb26f73bf005ebeb2c1d21","modified":1558407981588},{"_id":"public/2019/05/21/Item19. Design and document for inheritance or else prohibit it/index.html","hash":"4907da4cb53e32003563a86af8910631d30e40c3","modified":1558408224798},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1558407981599},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1558407981599},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1558407981600},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1558407981600},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1558407981600},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1558407981600},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1558407981600},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1558407981600},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1558407981600},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558407981600},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1558407981600},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558407981600},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1558407981600},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1558407981600},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1558407981600},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1558407981601},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1558407981601},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1558407981601},{"_id":"public/images/saiki.jpeg","hash":"be8fe22012cc1dc0324fdce7cf391da28b1cdb1b","modified":1558407981601},{"_id":"public/images/wechatPay.png","hash":"78b15ca731b243b1c86d4cbcdf73417c3784c099","modified":1558407981601},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1558407981601},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1558407981601},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1558407981601},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1558407981601},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1558407981601},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1558407981601},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1558407981601},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1558407981602},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1558407981602},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1558407981602},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1558407981602},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1558407981602},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1558407981602},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1558407981602},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1558407981602},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"fb0ff0949c9179447690e049aaced1ee0615941b","modified":1558407981602},{"_id":"public/images/aliPay.png","hash":"ff4e79a062204f48477a43036c5d4c09600d90d6","modified":1558407982407},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1558407982411},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1558407982412},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"5244731131a647d230c1d80731171191adc7e2a8","modified":1558407982412},{"_id":"public/2019/05/21/JVM/JVM.png","hash":"06a192a9b45409b63b64b2af56ead1c6850a75c3","modified":1558407982412},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1558407982434},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1558407982435},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1558407982436},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1558407982436},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1558407982436},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1558407982436},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1558407982436},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1558407982436},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1558407982436},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1558407982436},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1558407982437},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1558407982437},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1558407982437},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1558407982437},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1558407982437},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1558407982437},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1558407982438},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1558407982438},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1558407982438},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1558407982438},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1558407982438},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1558407982438},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1558407982438},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1558407982438},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1558407982438},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1558407982439},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1558407982441},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1558407982441},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1558407982441},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1558407982441},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1558407982441},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1558407982443},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1558407982443},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1558407982443},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1558407982444},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1558407982444},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1558407982444},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1558407982444},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1558407982444},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1558407982444},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1558407982446},{"_id":"public/css/main.css","hash":"eb83267174faca8d951418c7c2ade3cbc5cc760a","modified":1558407982446},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1558407982446},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1558407982447},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"001e6cc7c8f14dd9c544942410cea2dda5fe5387","modified":1558407982447},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1558407982524},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1558407982524},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1558407982525},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1558407982525},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558407982525},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1558407982526},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1558407982526},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1558407982526},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1558407982534},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1558407982534},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1558407982534},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1558407982587},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1558407982587},{"_id":"public/assets/algolia/algoliasearch.js","hash":"f0e3215b0553fcc11715d655e35cbc8dea9bae85","modified":1558407982592},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1558407982608},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558407982608},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1558407982610},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1558407982610},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558407982610},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1558407982610},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1558407982610},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1558407982621},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1558407982622},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1558407982622},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1558407982625},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1558407982636},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558407982639},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1558407982639},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558407982651},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1558407982673},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1558407982677},{"_id":"public/2019/05/21/Item 10.Obey the general contract when overriding equals/index.html","hash":"7c427fef776c561b61857840e22be42e66891233","modified":1558409020497}],"Category":[{"name":"技术","_id":"cjvx7vbis0002m74z900a6e3h"}],"Data":[],"Page":[{"title":"categories","date":"2019-04-13T10:15:31.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-04-13 18:15:31\ntype: \"categories\"\n---\n","updated":"2019-05-11T11:33:08.204Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjvx7vbq6000bm74zl00gow6x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-04-13T09:36:41.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-13 17:36:41\ntype: \"tags\"\n---\n","updated":"2019-05-11T11:33:08.204Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjvx7vbqa000dm74zpa205iiw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-04-13T09:36:30.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-13 17:36:30\n---\n","updated":"2019-05-11T11:33:08.204Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjvx7vbqe000gm74z0782n7ne","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CountDownLatch adn CyclicBarrier","_content":"\n### 1.CountDownLatch\n`CountDownLatch latch = new CountDownLatch(7);`\nCountDownLatch可以用来计数,之前多线程读取日志数据时,在每个线程里`  latch.countDown();`\n所有线程提交后`latch.await();`\n这里会等`CountDownLatch`里的计数变0才会往后执行.\n\n### 2.CyclicBarrier\nCyclicBarrier是一个同步的辅助类，允许一组线程相互之间等待，达到一个共同点，再继续执行。\n```\npublic class CyclicBarrierCom {\n\n    public static void main(String[] args) {\n        CyclicBarrier cyclicBarrier = new CyclicBarrier(5, new Runnable() {\n\n            @Override\n            public void run() {\n                System.out.println(\"all done\");\n            }\n        });\n\n        ExecutorService executorService = new ThreadPoolExecutor(3, 3, 0, TimeUnit.NANOSECONDS,\n                new LinkedBlockingQueue<>(), new NamedThreadFactory(\"pool\"),\n                new ThreadPoolExecutor.AbortPolicy());\n        for (int i = 0; i < 5; i++) {\n            executorService.submit(new task(cyclicBarrier));\n        }\n\n    }\n\n    static class task implements Runnable {\n\n        private final CyclicBarrier cyclicBarrier;\n\n        task(CyclicBarrier cyclicBarrier) {\n            this.cyclicBarrier = cyclicBarrier;\n        }\n\n        @Override\n        public void run() {\n            System.out.println(Thread.currentThread().getName());\n            try {\n                cyclicBarrier.await();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n\n`CyclicBarrier c=new CyclicBarrier( int parties,Runnable BarrierAction);`\n会在cyclicBarrier.await();执行 parties 次后运行 BarrierAction()方法.\n也就是一组线程(parties个线程)都达到某个状态后会执行.\n#####  ！！！---但是如果线程池大小不够，那么之前的线程都不会释放资源---！！！\n          \n         \n\n\n\n","source":"_posts/CountDowbLatch 和 CyclicBarrier.md","raw":"---\ntitle: CountDownLatch adn CyclicBarrier\ncategories :\n- 技术\ntags :\n- Java\n---\n\n### 1.CountDownLatch\n`CountDownLatch latch = new CountDownLatch(7);`\nCountDownLatch可以用来计数,之前多线程读取日志数据时,在每个线程里`  latch.countDown();`\n所有线程提交后`latch.await();`\n这里会等`CountDownLatch`里的计数变0才会往后执行.\n\n### 2.CyclicBarrier\nCyclicBarrier是一个同步的辅助类，允许一组线程相互之间等待，达到一个共同点，再继续执行。\n```\npublic class CyclicBarrierCom {\n\n    public static void main(String[] args) {\n        CyclicBarrier cyclicBarrier = new CyclicBarrier(5, new Runnable() {\n\n            @Override\n            public void run() {\n                System.out.println(\"all done\");\n            }\n        });\n\n        ExecutorService executorService = new ThreadPoolExecutor(3, 3, 0, TimeUnit.NANOSECONDS,\n                new LinkedBlockingQueue<>(), new NamedThreadFactory(\"pool\"),\n                new ThreadPoolExecutor.AbortPolicy());\n        for (int i = 0; i < 5; i++) {\n            executorService.submit(new task(cyclicBarrier));\n        }\n\n    }\n\n    static class task implements Runnable {\n\n        private final CyclicBarrier cyclicBarrier;\n\n        task(CyclicBarrier cyclicBarrier) {\n            this.cyclicBarrier = cyclicBarrier;\n        }\n\n        @Override\n        public void run() {\n            System.out.println(Thread.currentThread().getName());\n            try {\n                cyclicBarrier.await();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n\n`CyclicBarrier c=new CyclicBarrier( int parties,Runnable BarrierAction);`\n会在cyclicBarrier.await();执行 parties 次后运行 BarrierAction()方法.\n也就是一组线程(parties个线程)都达到某个状态后会执行.\n#####  ！！！---但是如果线程池大小不够，那么之前的线程都不会释放资源---！！！\n          \n         \n\n\n\n","slug":"CountDowbLatch 和 CyclicBarrier","published":1,"date":"2019-05-21T03:13:33.619Z","updated":"2019-05-21T03:13:33.619Z","_id":"cjvx7vbif0000m74zzrbc0stb","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-CountDownLatch\"><a href=\"#1-CountDownLatch\" class=\"headerlink\" title=\"1.CountDownLatch\"></a>1.CountDownLatch</h3><p><code>CountDownLatch latch = new CountDownLatch(7);</code><br>CountDownLatch可以用来计数,之前多线程读取日志数据时,在每个线程里<code>latch.countDown();</code><br>所有线程提交后<code>latch.await();</code><br>这里会等<code>CountDownLatch</code>里的计数变0才会往后执行.</p>\n<h3 id=\"2-CyclicBarrier\"><a href=\"#2-CyclicBarrier\" class=\"headerlink\" title=\"2.CyclicBarrier\"></a>2.CyclicBarrier</h3><p>CyclicBarrier是一个同步的辅助类，允许一组线程相互之间等待，达到一个共同点，再继续执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CyclicBarrierCom &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CyclicBarrier cyclicBarrier = new CyclicBarrier(5, new Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                System.out.println(&quot;all done&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        ExecutorService executorService = new ThreadPoolExecutor(3, 3, 0, TimeUnit.NANOSECONDS,</span><br><span class=\"line\">                new LinkedBlockingQueue&lt;&gt;(), new NamedThreadFactory(&quot;pool&quot;),</span><br><span class=\"line\">                new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">            executorService.submit(new task(cyclicBarrier));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class task implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private final CyclicBarrier cyclicBarrier;</span><br><span class=\"line\"></span><br><span class=\"line\">        task(CyclicBarrier cyclicBarrier) &#123;</span><br><span class=\"line\">            this.cyclicBarrier = cyclicBarrier;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                cyclicBarrier.await();</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; catch (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>CyclicBarrier c=new CyclicBarrier( int parties,Runnable BarrierAction);</code><br>会在cyclicBarrier.await();执行 parties 次后运行 BarrierAction()方法.<br>也就是一组线程(parties个线程)都达到某个状态后会执行.</p>\n<h5 id=\"！！！—但是如果线程池大小不够，那么之前的线程都不会释放资源—！！！\"><a href=\"#！！！—但是如果线程池大小不够，那么之前的线程都不会释放资源—！！！\" class=\"headerlink\" title=\"！！！—但是如果线程池大小不够，那么之前的线程都不会释放资源—！！！\"></a>！！！—但是如果线程池大小不够，那么之前的线程都不会释放资源—！！！</h5>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-CountDownLatch\"><a href=\"#1-CountDownLatch\" class=\"headerlink\" title=\"1.CountDownLatch\"></a>1.CountDownLatch</h3><p><code>CountDownLatch latch = new CountDownLatch(7);</code><br>CountDownLatch可以用来计数,之前多线程读取日志数据时,在每个线程里<code>latch.countDown();</code><br>所有线程提交后<code>latch.await();</code><br>这里会等<code>CountDownLatch</code>里的计数变0才会往后执行.</p>\n<h3 id=\"2-CyclicBarrier\"><a href=\"#2-CyclicBarrier\" class=\"headerlink\" title=\"2.CyclicBarrier\"></a>2.CyclicBarrier</h3><p>CyclicBarrier是一个同步的辅助类，允许一组线程相互之间等待，达到一个共同点，再继续执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CyclicBarrierCom &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CyclicBarrier cyclicBarrier = new CyclicBarrier(5, new Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                System.out.println(&quot;all done&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        ExecutorService executorService = new ThreadPoolExecutor(3, 3, 0, TimeUnit.NANOSECONDS,</span><br><span class=\"line\">                new LinkedBlockingQueue&lt;&gt;(), new NamedThreadFactory(&quot;pool&quot;),</span><br><span class=\"line\">                new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">            executorService.submit(new task(cyclicBarrier));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class task implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private final CyclicBarrier cyclicBarrier;</span><br><span class=\"line\"></span><br><span class=\"line\">        task(CyclicBarrier cyclicBarrier) &#123;</span><br><span class=\"line\">            this.cyclicBarrier = cyclicBarrier;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                cyclicBarrier.await();</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; catch (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>CyclicBarrier c=new CyclicBarrier( int parties,Runnable BarrierAction);</code><br>会在cyclicBarrier.await();执行 parties 次后运行 BarrierAction()方法.<br>也就是一组线程(parties个线程)都达到某个状态后会执行.</p>\n<h5 id=\"！！！—但是如果线程池大小不够，那么之前的线程都不会释放资源—！！！\"><a href=\"#！！！—但是如果线程池大小不够，那么之前的线程都不会释放资源—！！！\" class=\"headerlink\" title=\"！！！—但是如果线程池大小不够，那么之前的线程都不会释放资源—！！！\"></a>！！！—但是如果线程池大小不够，那么之前的线程都不会释放资源—！！！</h5>"},{"title":"JsonField标签","_content":"\nTest.java\n```\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.fastjson.annotation.JSONField;\npublic class Test {\n    @JSONField(name = \"mingzi\")\n    String name;\n    @JSONField(name = \"ling\")\n    int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return JSONObject.toJSONString(this);\n    }\n}\n```\n--------\nTest3.java\n```\nimport com.alibaba.fastjson.JSONObject;\n\npublic class Test3 {\n\n    public static void main(String[] args) {\n        Test test = new Test();\n        test.setAge(20);\n        test.setName(\"tom\");\n\n        JSONObject jsonObject = (JSONObject) JSONObject.toJSON(test);\n\n        System.out.println(jsonObject.get(\"mingzi\"));\n        System.out.println(jsonObject.get(\"name\"));\n    }\n}\n```\n--------\n输出：\ntom\nnull\n\n\n\n\n\n","source":"_posts/@JsonField标签.md","raw":"---\ntitle: JsonField标签\ncategories:\n- 技术\ntags:\n- Java\n---\n\nTest.java\n```\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.fastjson.annotation.JSONField;\npublic class Test {\n    @JSONField(name = \"mingzi\")\n    String name;\n    @JSONField(name = \"ling\")\n    int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return JSONObject.toJSONString(this);\n    }\n}\n```\n--------\nTest3.java\n```\nimport com.alibaba.fastjson.JSONObject;\n\npublic class Test3 {\n\n    public static void main(String[] args) {\n        Test test = new Test();\n        test.setAge(20);\n        test.setName(\"tom\");\n\n        JSONObject jsonObject = (JSONObject) JSONObject.toJSON(test);\n\n        System.out.println(jsonObject.get(\"mingzi\"));\n        System.out.println(jsonObject.get(\"name\"));\n    }\n}\n```\n--------\n输出：\ntom\nnull\n\n\n\n\n\n","slug":"@JsonField标签","published":1,"date":"2019-05-21T03:10:04.397Z","updated":"2019-05-21T03:10:04.397Z","_id":"cjvx7vbip0001m74zb2kebuzi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Test.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\">import com.alibaba.fastjson.annotation.JSONField;</span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    @JSONField(name = &quot;mingzi&quot;)</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    @JSONField(name = &quot;ling&quot;)</span><br><span class=\"line\">    int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return JSONObject.toJSONString(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>Test3.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Test3 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Test test = new Test();</span><br><span class=\"line\">        test.setAge(20);</span><br><span class=\"line\">        test.setName(&quot;tom&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        JSONObject jsonObject = (JSONObject) JSONObject.toJSON(test);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(jsonObject.get(&quot;mingzi&quot;));</span><br><span class=\"line\">        System.out.println(jsonObject.get(&quot;name&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>输出：<br>tom<br>null</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Test.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\">import com.alibaba.fastjson.annotation.JSONField;</span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    @JSONField(name = &quot;mingzi&quot;)</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    @JSONField(name = &quot;ling&quot;)</span><br><span class=\"line\">    int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return JSONObject.toJSONString(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>Test3.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Test3 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Test test = new Test();</span><br><span class=\"line\">        test.setAge(20);</span><br><span class=\"line\">        test.setName(&quot;tom&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        JSONObject jsonObject = (JSONObject) JSONObject.toJSON(test);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(jsonObject.get(&quot;mingzi&quot;));</span><br><span class=\"line\">        System.out.println(jsonObject.get(&quot;name&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>输出：<br>tom<br>null</p>\n"},{"title":"《Effective Java》Item 9. Perfer try-with-resources to try-finally","_content":"\nAlways use try-with-resources in preference to try-finally when working with resources that must be closed.\n\n```\ntry(InputStream in =new FileInputStream(src);\n    OutputStream out = new FileOutputStream(dst)){\n\n    byte[] buf = new byte[BUFFER_SIZE]\n    ...    \n\n}\n```\n\n\n\n\n","source":"_posts/Item 9. Perfer try-with-resources to try-finally.md","raw":"---\ntitle: 《Effective Java》Item 9. Perfer try-with-resources to try-finally\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\nAlways use try-with-resources in preference to try-finally when working with resources that must be closed.\n\n```\ntry(InputStream in =new FileInputStream(src);\n    OutputStream out = new FileOutputStream(dst)){\n\n    byte[] buf = new byte[BUFFER_SIZE]\n    ...    \n\n}\n```\n\n\n\n\n","slug":"Item 9. Perfer try-with-resources to try-finally","published":1,"date":"2019-05-11T11:33:08.219Z","updated":"2019-05-11T11:33:08.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbq4000am74z0p91rnlo","content":"<p>Always use try-with-resources in preference to try-finally when working with resources that must be closed.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try(InputStream in =new FileInputStream(src);</span><br><span class=\"line\">    OutputStream out = new FileOutputStream(dst))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    byte[] buf = new byte[BUFFER_SIZE]</span><br><span class=\"line\">    ...    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Always use try-with-resources in preference to try-finally when working with resources that must be closed.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try(InputStream in =new FileInputStream(src);</span><br><span class=\"line\">    OutputStream out = new FileOutputStream(dst))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    byte[] buf = new byte[BUFFER_SIZE]</span><br><span class=\"line\">    ...    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"《Effective Java》Item.18 Favor composition voer inheritance","_content":"Unlike method invocation,inheritance violates encapsulation. In other words, a subclass depend on the implementation details of its superclass for its proper funtion. The superclass's implementation may change from release to release, and if it does, the subclass may break, even though its code has not been touched.\n\n\n\n\n","source":"_posts/Item.18 Favor composition voer inheritance.md","raw":"---\ntitle: 《Effective Java》Item.18 Favor composition voer inheritance\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n\n---\nUnlike method invocation,inheritance violates encapsulation. In other words, a subclass depend on the implementation details of its superclass for its proper funtion. The superclass's implementation may change from release to release, and if it does, the subclass may break, even though its code has not been touched.\n\n\n\n\n","slug":"Item.18 Favor composition voer inheritance","published":1,"date":"2019-05-11T11:33:08.219Z","updated":"2019-05-11T11:33:08.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbq8000cm74zwrxrlrti","content":"<p>Unlike method invocation,inheritance violates encapsulation. In other words, a subclass depend on the implementation details of its superclass for its proper funtion. The superclass’s implementation may change from release to release, and if it does, the subclass may break, even though its code has not been touched.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Unlike method invocation,inheritance violates encapsulation. In other words, a subclass depend on the implementation details of its superclass for its proper funtion. The superclass’s implementation may change from release to release, and if it does, the subclass may break, even though its code has not been touched.</p>\n"},{"title":"《Effective Java》 Item 10.Obey the general contract when overriding equals","_content":"\nOverrinding the equals method seems simple,but there are many ways to get it wrong,and consequences can be dire. The easiest way to avoid problem is not to override the equals method, in which case each instance of the class is equal only to itself.\n\n\nwhen you override the equals method, you must adhere to its general contract. Here is contract, from the specification of Object:\n\n-Reflexive\n-Symmetric\n-Transitive\n-Consistent\n-For any non-null refrence value x, `x.equals(null)` must return false. \n\n```\npackage com.zejian.test;\nimport java.util.ArrayList;\nimport java.util.List;\n/** * 反面例子 * @author zejian */\npublic class AbnormalResult {\n\tpublic static void main(String[] args) {\n\t\tList<A> list = new ArrayList<A>();\n\t\tA a = new A();\n\t\tB b = new B();\n\t\tlist.add(a);\n\t\tSystem.out.println(\"list.contains(a)->\" + list.contains(a));\n\t\tSystem.out.println(\"list.contains(b)->\" + list.contains(b));\n\t\tlist.clear();\n\t\tlist.add(b);\n\t\tSystem.out.println(\"list.contains(a)->\" + list.contains(a));\n\t\tSystem.out.println(\"list.contains(b)->\" + list.contains(b));\n\t}\n\tstatic class A {\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\treturn obj instanceof A;\n\t\t}\n\t}\n\tstatic class B extends A {\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\treturn obj instanceof B;\n\t\t}\n\t}\n}\n```\n\n输出:\n```\nlist.contains(a)->true\n\nlist.contains(b)->false\n\nlist.contains(a)->true\n\nlist.contains(b)->true\n```\nlist.contains()最终调用的是equals方法,代码list.contains(a)，实际上调用了a.equal(a[i]),其中a[i]是集合中的元素而且为B类型(只添加了b对象)，由于B类型肯定是A类型（B继承了A），所以a[i] instanceof A,结果为true\n\n\n```\nimport java.util.HashMap;\nimport java.util.Map;\npublic class MapTest {\n\tpublic static void main(String[] args) {\n\t\tMap<String,Value> map1 = new HashMap<String,Value>();\n\t\tString s1 = new String(\"key\");\n\t\tString s2 = new String(\"key\");\t\n\t\tValue value = new Value(2);\n\t\tmap1.put(s1, value);\n\t\tSystem.out.println(\"s1.equals(s2):\"+s1.equals(s2));\n\t\tSystem.out.println(\"map1.get(s1):\"+map1.get(s1));\n\t\tSystem.out.println(\"map1.get(s2):\"+map1.get(s2));\n\t\t\n\t\t\n\t\tMap<Key,Value> map2 = new HashMap<Key,Value>();\n\t\tKey k1 = new Key(\"A\");\n\t\tKey k2 = new Key(\"A\");\n\t\tmap2.put(k1, value);\n\t\tSystem.out.println(\"k1.equals(k2):\"+s1.equals(s2));\n\t\tSystem.out.println(\"map2.get(k1):\"+map2.get(k1));\n\t\tSystem.out.println(\"map2.get(k2):\"+map2.get(k2));\n\t}\n\t\n\t/**\n\t * 键\n\t * @author zejian\n\t *\n\t */\n\tstatic class Key{\n\t\tprivate String k;\n\t\tpublic Key(String key){\n\t\t\tthis.k=key;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\tif(obj instanceof Key){\n\t\t\t\tKey key=(Key)obj;\n\t\t\t\treturn k.equals(key.k);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t/**\n\t * 值\n\t * @author zejian\n\t *\n\t */\n\tstatic class Value{\n\t\tprivate int v;\n\t\t\n\t\tpublic Value(int v){\n\t\t\tthis.v=v;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"类Value的值－－>\"+v;\n\t\t}\n\t}\n}\n```\n结果:\n```\n\ns1.equals(s2):true\nmap1.get(s1):类Value的值－－>2\nmap1.get(s2):类Value的值－－>2\nk1.equals(k2):true\nmap2.get(k1):类Value的值－－>2\nmap2.get(k2):null\n```\n\n\n在重写equals() 方法时，一般都是推荐使用getClass来进行类型判断（除非所有的子类有统一的语义才使用instanceof),防止出现对于不同的子类e1,e2, 父类p即等于e1又等于e2.\n\n参考:https://blog.csdn.net/javazejian/article/details/51348320#\n\n","source":"_posts/Item 10.Obey the general contract when overriding equals.md","raw":"---\ntitle: 《Effective Java》 Item 10.Obey the general contract when overriding equals\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\nOverrinding the equals method seems simple,but there are many ways to get it wrong,and consequences can be dire. The easiest way to avoid problem is not to override the equals method, in which case each instance of the class is equal only to itself.\n\n\nwhen you override the equals method, you must adhere to its general contract. Here is contract, from the specification of Object:\n\n-Reflexive\n-Symmetric\n-Transitive\n-Consistent\n-For any non-null refrence value x, `x.equals(null)` must return false. \n\n```\npackage com.zejian.test;\nimport java.util.ArrayList;\nimport java.util.List;\n/** * 反面例子 * @author zejian */\npublic class AbnormalResult {\n\tpublic static void main(String[] args) {\n\t\tList<A> list = new ArrayList<A>();\n\t\tA a = new A();\n\t\tB b = new B();\n\t\tlist.add(a);\n\t\tSystem.out.println(\"list.contains(a)->\" + list.contains(a));\n\t\tSystem.out.println(\"list.contains(b)->\" + list.contains(b));\n\t\tlist.clear();\n\t\tlist.add(b);\n\t\tSystem.out.println(\"list.contains(a)->\" + list.contains(a));\n\t\tSystem.out.println(\"list.contains(b)->\" + list.contains(b));\n\t}\n\tstatic class A {\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\treturn obj instanceof A;\n\t\t}\n\t}\n\tstatic class B extends A {\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\treturn obj instanceof B;\n\t\t}\n\t}\n}\n```\n\n输出:\n```\nlist.contains(a)->true\n\nlist.contains(b)->false\n\nlist.contains(a)->true\n\nlist.contains(b)->true\n```\nlist.contains()最终调用的是equals方法,代码list.contains(a)，实际上调用了a.equal(a[i]),其中a[i]是集合中的元素而且为B类型(只添加了b对象)，由于B类型肯定是A类型（B继承了A），所以a[i] instanceof A,结果为true\n\n\n```\nimport java.util.HashMap;\nimport java.util.Map;\npublic class MapTest {\n\tpublic static void main(String[] args) {\n\t\tMap<String,Value> map1 = new HashMap<String,Value>();\n\t\tString s1 = new String(\"key\");\n\t\tString s2 = new String(\"key\");\t\n\t\tValue value = new Value(2);\n\t\tmap1.put(s1, value);\n\t\tSystem.out.println(\"s1.equals(s2):\"+s1.equals(s2));\n\t\tSystem.out.println(\"map1.get(s1):\"+map1.get(s1));\n\t\tSystem.out.println(\"map1.get(s2):\"+map1.get(s2));\n\t\t\n\t\t\n\t\tMap<Key,Value> map2 = new HashMap<Key,Value>();\n\t\tKey k1 = new Key(\"A\");\n\t\tKey k2 = new Key(\"A\");\n\t\tmap2.put(k1, value);\n\t\tSystem.out.println(\"k1.equals(k2):\"+s1.equals(s2));\n\t\tSystem.out.println(\"map2.get(k1):\"+map2.get(k1));\n\t\tSystem.out.println(\"map2.get(k2):\"+map2.get(k2));\n\t}\n\t\n\t/**\n\t * 键\n\t * @author zejian\n\t *\n\t */\n\tstatic class Key{\n\t\tprivate String k;\n\t\tpublic Key(String key){\n\t\t\tthis.k=key;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\tif(obj instanceof Key){\n\t\t\t\tKey key=(Key)obj;\n\t\t\t\treturn k.equals(key.k);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t/**\n\t * 值\n\t * @author zejian\n\t *\n\t */\n\tstatic class Value{\n\t\tprivate int v;\n\t\t\n\t\tpublic Value(int v){\n\t\t\tthis.v=v;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"类Value的值－－>\"+v;\n\t\t}\n\t}\n}\n```\n结果:\n```\n\ns1.equals(s2):true\nmap1.get(s1):类Value的值－－>2\nmap1.get(s2):类Value的值－－>2\nk1.equals(k2):true\nmap2.get(k1):类Value的值－－>2\nmap2.get(k2):null\n```\n\n\n在重写equals() 方法时，一般都是推荐使用getClass来进行类型判断（除非所有的子类有统一的语义才使用instanceof),防止出现对于不同的子类e1,e2, 父类p即等于e1又等于e2.\n\n参考:https://blog.csdn.net/javazejian/article/details/51348320#\n\n","slug":"Item 10.Obey the general contract when overriding equals","published":1,"date":"2019-05-21T03:18:30.900Z","updated":"2019-05-21T03:18:30.901Z","_id":"cjvx7vbqd000fm74zehlap71m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Overrinding the equals method seems simple,but there are many ways to get it wrong,and consequences can be dire. The easiest way to avoid problem is not to override the equals method, in which case each instance of the class is equal only to itself.</p>\n<p>when you override the equals method, you must adhere to its general contract. Here is contract, from the specification of Object:</p>\n<p>-Reflexive<br>-Symmetric<br>-Transitive<br>-Consistent<br>-For any non-null refrence value x, <code>x.equals(null)</code> must return false. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zejian.test;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">/** * 反面例子 * @author zejian */</span><br><span class=\"line\">public class AbnormalResult &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tList&lt;A&gt; list = new ArrayList&lt;A&gt;();</span><br><span class=\"line\">\t\tA a = new A();</span><br><span class=\"line\">\t\tB b = new B();</span><br><span class=\"line\">\t\tlist.add(a);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;list.contains(a)-&gt;&quot; + list.contains(a));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;list.contains(b)-&gt;&quot; + list.contains(b));</span><br><span class=\"line\">\t\tlist.clear();</span><br><span class=\"line\">\t\tlist.add(b);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;list.contains(a)-&gt;&quot; + list.contains(a));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;list.contains(b)-&gt;&quot; + list.contains(b));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatic class A &#123;</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic boolean equals(Object obj) &#123;</span><br><span class=\"line\">\t\t\treturn obj instanceof A;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatic class B extends A &#123;</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic boolean equals(Object obj) &#123;</span><br><span class=\"line\">\t\t\treturn obj instanceof B;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.contains(a)-&gt;true</span><br><span class=\"line\"></span><br><span class=\"line\">list.contains(b)-&gt;false</span><br><span class=\"line\"></span><br><span class=\"line\">list.contains(a)-&gt;true</span><br><span class=\"line\"></span><br><span class=\"line\">list.contains(b)-&gt;true</span><br></pre></td></tr></table></figure></p>\n<p>list.contains()最终调用的是equals方法,代码list.contains(a)，实际上调用了a.equal(a[i]),其中a[i]是集合中的元素而且为B类型(只添加了b对象)，由于B类型肯定是A类型（B继承了A），所以a[i] instanceof A,结果为true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">public class MapTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tMap&lt;String,Value&gt; map1 = new HashMap&lt;String,Value&gt;();</span><br><span class=\"line\">\t\tString s1 = new String(&quot;key&quot;);</span><br><span class=\"line\">\t\tString s2 = new String(&quot;key&quot;);\t</span><br><span class=\"line\">\t\tValue value = new Value(2);</span><br><span class=\"line\">\t\tmap1.put(s1, value);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;s1.equals(s2):&quot;+s1.equals(s2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map1.get(s1):&quot;+map1.get(s1));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map1.get(s2):&quot;+map1.get(s2));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tMap&lt;Key,Value&gt; map2 = new HashMap&lt;Key,Value&gt;();</span><br><span class=\"line\">\t\tKey k1 = new Key(&quot;A&quot;);</span><br><span class=\"line\">\t\tKey k2 = new Key(&quot;A&quot;);</span><br><span class=\"line\">\t\tmap2.put(k1, value);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;k1.equals(k2):&quot;+s1.equals(s2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map2.get(k1):&quot;+map2.get(k1));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map2.get(k2):&quot;+map2.get(k2));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 键</span><br><span class=\"line\">\t * @author zejian</span><br><span class=\"line\">\t *</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tstatic class Key&#123;</span><br><span class=\"line\">\t\tprivate String k;</span><br><span class=\"line\">\t\tpublic Key(String key)&#123;</span><br><span class=\"line\">\t\t\tthis.k=key;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic boolean equals(Object obj) &#123;</span><br><span class=\"line\">\t\t\tif(obj instanceof Key)&#123;</span><br><span class=\"line\">\t\t\t\tKey key=(Key)obj;</span><br><span class=\"line\">\t\t\t\treturn k.equals(key.k);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 值</span><br><span class=\"line\">\t * @author zejian</span><br><span class=\"line\">\t *</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tstatic class Value&#123;</span><br><span class=\"line\">\t\tprivate int v;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpublic Value(int v)&#123;</span><br><span class=\"line\">\t\t\tthis.v=v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic String toString() &#123;</span><br><span class=\"line\">\t\t\treturn &quot;类Value的值－－&gt;&quot;+v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">s1.equals(s2):true</span><br><span class=\"line\">map1.get(s1):类Value的值－－&gt;2</span><br><span class=\"line\">map1.get(s2):类Value的值－－&gt;2</span><br><span class=\"line\">k1.equals(k2):true</span><br><span class=\"line\">map2.get(k1):类Value的值－－&gt;2</span><br><span class=\"line\">map2.get(k2):null</span><br></pre></td></tr></table></figure></p>\n<p>在重写equals() 方法时，一般都是推荐使用getClass来进行类型判断（除非所有的子类有统一的语义才使用instanceof),防止出现对于不同的子类e1,e2, 父类p即等于e1又等于e2.</p>\n<p>参考:<a href=\"https://blog.csdn.net/javazejian/article/details/51348320#\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/javazejian/article/details/51348320#</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Overrinding the equals method seems simple,but there are many ways to get it wrong,and consequences can be dire. The easiest way to avoid problem is not to override the equals method, in which case each instance of the class is equal only to itself.</p>\n<p>when you override the equals method, you must adhere to its general contract. Here is contract, from the specification of Object:</p>\n<p>-Reflexive<br>-Symmetric<br>-Transitive<br>-Consistent<br>-For any non-null refrence value x, <code>x.equals(null)</code> must return false. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zejian.test;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">/** * 反面例子 * @author zejian */</span><br><span class=\"line\">public class AbnormalResult &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tList&lt;A&gt; list = new ArrayList&lt;A&gt;();</span><br><span class=\"line\">\t\tA a = new A();</span><br><span class=\"line\">\t\tB b = new B();</span><br><span class=\"line\">\t\tlist.add(a);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;list.contains(a)-&gt;&quot; + list.contains(a));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;list.contains(b)-&gt;&quot; + list.contains(b));</span><br><span class=\"line\">\t\tlist.clear();</span><br><span class=\"line\">\t\tlist.add(b);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;list.contains(a)-&gt;&quot; + list.contains(a));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;list.contains(b)-&gt;&quot; + list.contains(b));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatic class A &#123;</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic boolean equals(Object obj) &#123;</span><br><span class=\"line\">\t\t\treturn obj instanceof A;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatic class B extends A &#123;</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic boolean equals(Object obj) &#123;</span><br><span class=\"line\">\t\t\treturn obj instanceof B;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.contains(a)-&gt;true</span><br><span class=\"line\"></span><br><span class=\"line\">list.contains(b)-&gt;false</span><br><span class=\"line\"></span><br><span class=\"line\">list.contains(a)-&gt;true</span><br><span class=\"line\"></span><br><span class=\"line\">list.contains(b)-&gt;true</span><br></pre></td></tr></table></figure></p>\n<p>list.contains()最终调用的是equals方法,代码list.contains(a)，实际上调用了a.equal(a[i]),其中a[i]是集合中的元素而且为B类型(只添加了b对象)，由于B类型肯定是A类型（B继承了A），所以a[i] instanceof A,结果为true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">public class MapTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tMap&lt;String,Value&gt; map1 = new HashMap&lt;String,Value&gt;();</span><br><span class=\"line\">\t\tString s1 = new String(&quot;key&quot;);</span><br><span class=\"line\">\t\tString s2 = new String(&quot;key&quot;);\t</span><br><span class=\"line\">\t\tValue value = new Value(2);</span><br><span class=\"line\">\t\tmap1.put(s1, value);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;s1.equals(s2):&quot;+s1.equals(s2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map1.get(s1):&quot;+map1.get(s1));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map1.get(s2):&quot;+map1.get(s2));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tMap&lt;Key,Value&gt; map2 = new HashMap&lt;Key,Value&gt;();</span><br><span class=\"line\">\t\tKey k1 = new Key(&quot;A&quot;);</span><br><span class=\"line\">\t\tKey k2 = new Key(&quot;A&quot;);</span><br><span class=\"line\">\t\tmap2.put(k1, value);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;k1.equals(k2):&quot;+s1.equals(s2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map2.get(k1):&quot;+map2.get(k1));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map2.get(k2):&quot;+map2.get(k2));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 键</span><br><span class=\"line\">\t * @author zejian</span><br><span class=\"line\">\t *</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tstatic class Key&#123;</span><br><span class=\"line\">\t\tprivate String k;</span><br><span class=\"line\">\t\tpublic Key(String key)&#123;</span><br><span class=\"line\">\t\t\tthis.k=key;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic boolean equals(Object obj) &#123;</span><br><span class=\"line\">\t\t\tif(obj instanceof Key)&#123;</span><br><span class=\"line\">\t\t\t\tKey key=(Key)obj;</span><br><span class=\"line\">\t\t\t\treturn k.equals(key.k);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 值</span><br><span class=\"line\">\t * @author zejian</span><br><span class=\"line\">\t *</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tstatic class Value&#123;</span><br><span class=\"line\">\t\tprivate int v;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpublic Value(int v)&#123;</span><br><span class=\"line\">\t\t\tthis.v=v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic String toString() &#123;</span><br><span class=\"line\">\t\t\treturn &quot;类Value的值－－&gt;&quot;+v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">s1.equals(s2):true</span><br><span class=\"line\">map1.get(s1):类Value的值－－&gt;2</span><br><span class=\"line\">map1.get(s2):类Value的值－－&gt;2</span><br><span class=\"line\">k1.equals(k2):true</span><br><span class=\"line\">map2.get(k1):类Value的值－－&gt;2</span><br><span class=\"line\">map2.get(k2):null</span><br></pre></td></tr></table></figure></p>\n<p>在重写equals() 方法时，一般都是推荐使用getClass来进行类型判断（除非所有的子类有统一的语义才使用instanceof),防止出现对于不同的子类e1,e2, 父类p即等于e1又等于e2.</p>\n<p>参考:<a href=\"https://blog.csdn.net/javazejian/article/details/51348320#\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/javazejian/article/details/51348320#</a></p>\n"},{"title":"《Effective Java》Item13. Override clone judiciously","_content":"\nIn practice, a class implementting Cloneable is expected to provide a properly functioning public clone method.\n\n\n\n\n","source":"_posts/Item13. Override clone judiciously.md","raw":"---\ntitle: 《Effective Java》Item13. Override clone judiciously\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n\n---\n\nIn practice, a class implementting Cloneable is expected to provide a properly functioning public clone method.\n\n\n\n\n","slug":"Item13. Override clone judiciously","published":1,"date":"2019-05-11T11:33:08.217Z","updated":"2019-05-11T11:33:08.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbqg000hm74zydbdhu12","content":"<p>In practice, a class implementting Cloneable is expected to provide a properly functioning public clone method.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In practice, a class implementting Cloneable is expected to provide a properly functioning public clone method.</p>\n"},{"title":"《Effective Java》Item12. Always override toString","_content":"\nThe general constract for toString says that the returned string should be \"a concise but informative representation that is easy for a person to read\".For example,\"PhoneNumber@163b91\" isn't very informative when compared to 707-867-5309. The toString constract gose on to say,\"It is recommended that all subclasses override this method.\"\n\n\n\n\n","source":"_posts/Item12. Always override toString.md","raw":"---\ntitle: 《Effective Java》Item12. Always override toString \ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\nThe general constract for toString says that the returned string should be \"a concise but informative representation that is easy for a person to read\".For example,\"PhoneNumber@163b91\" isn't very informative when compared to 707-867-5309. The toString constract gose on to say,\"It is recommended that all subclasses override this method.\"\n\n\n\n\n","slug":"Item12. Always override toString","published":1,"date":"2019-05-11T11:33:08.217Z","updated":"2019-05-11T11:33:08.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbqj000jm74zd3jixdka","content":"<p>The general constract for toString says that the returned string should be “a concise but informative representation that is easy for a person to read”.For example,”PhoneNumber@163b91” isn’t very informative when compared to 707-867-5309. The toString constract gose on to say,”It is recommended that all subclasses override this method.”</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The general constract for toString says that the returned string should be “a concise but informative representation that is easy for a person to read”.For example,”PhoneNumber@163b91” isn’t very informative when compared to 707-867-5309. The toString constract gose on to say,”It is recommended that all subclasses override this method.”</p>\n"},{"title":"《Effective Java》Item11.Always override hashCode when you override equals","_content":"\nYou must override hashcode in every class that overrides equals. If you fail to do so, your class will violate the general contract for hashcode, which will prevent it from functioning properly in collection such as HashMap and HashSet.\n\n\n\n\n\n","source":"_posts/Item11.Always override hashCode when you override equals.md","raw":"---\ntitle: 《Effective Java》Item11.Always override hashCode when you override equals\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\nYou must override hashcode in every class that overrides equals. If you fail to do so, your class will violate the general contract for hashcode, which will prevent it from functioning properly in collection such as HashMap and HashSet.\n\n\n\n\n\n","slug":"Item11.Always override hashCode when you override equals","published":1,"date":"2019-05-11T11:33:08.218Z","updated":"2019-05-11T11:33:08.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbqm000nm74zap0z7wm0","content":"<p>You must override hashcode in every class that overrides equals. If you fail to do so, your class will violate the general contract for hashcode, which will prevent it from functioning properly in collection such as HashMap and HashSet.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>You must override hashcode in every class that overrides equals. If you fail to do so, your class will violate the general contract for hashcode, which will prevent it from functioning properly in collection such as HashMap and HashSet.</p>\n"},{"title":"《Effective Java》Item1. Consider static factory methods instead of constructors","_content":"\n### Advantage 1. name\n　静态工厂方法可以通过方法的名字很直接的传递方法很多信息,而不像传统的构造方法一样名字只能和类名相同,用户只能通过传递的参数和注释文档来判断调用哪个方法.一个很好的例子:\n\n有一个RandomIntGenerator 类，产生随机的int类型的整数。如下所示： \n```\npublic class RandomIntGenerator {\nprivate final int min;\nprivate final int max;\n\npublic int next() {...}\n}\n```\n这个生成器接收最大值和最小值两个参数并且生成介于两者之间的随机数。注意到两个属性min和max被final修饰，所以必须初始化它们。可以在定义它们时就初始化或者通过构造器来初始化。通过构造器初始如下：\n```\npublic RandomIntGenerator(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n```\n现在，我们要提供给这样一个功能，客户端仅设置一个最小值然后产生一个介于此值和Integer.MAX_VALUE之间的整数。所以我们添加了第二个构造器：\n```\npublic RandomIntGenerator(int min) {\n    this.min = min;\n    this.max = Integer.MAX_VALUE;\n}\n```\n到目前为止，一切正常。但是，我们同样要提供一个构造器设置一个最大值，然后产生一个介于Integer.MIN_VALUE和最大值的整数。我们添加第三个构造器如下：\n```\npublic RandomIntGenerator(int max) {\n    this.min = Integer.MIN_VALUE;\n    this.max = max;\n}\n```\n如果你这样做了，将会出现编译错误：Duplicate method RandomIntGenerator(int) in type RandomIntGenerator。那里出错了？毫无疑问，问题在于构造器没有名字。因此，一个类仅有一个特定方法签名的构造器。同样的，你不能定义方法签名相同的（返回值、名称、参数类型及个数均相同）两个方法。这就是为什么当我们试着添加构造器RandomIntGenerator(int max) 时，会得到上述的编译错误，原因是我们已经有一个构造器 RandomIntGenerator(int min)。\n\n像这样的情况我们该如何处理呢？幸好有其他方式可以使用：静态工厂方法，通过使用简单的公共静态方法返回一个类的实例。你可能在无意识中已经使用过这种技术。你有没有写过Boolean.valueOf?，就像下面这样：\n```\npublic static Boolean valueOf(boolean b) {\n    return (b ? TRUE : FALSE);\n}\n```\n将静态工厂应用到RandomIntGenerator类，得到\n```\n public class RandomIntGenerator {\n\n    private final int min;\n    private final int max;\n\n    private RandomIntGenerator(int min, int max) {\n        this.min = min;\n        this.max = max;\n    }\n\n    public static RandomIntGenerator between(int max, int min) {\n        return new RandomIntGenerator(min, max);\n    }\n\n    public static RandomIntGenerator biggerThan(int min) {\n        return new RandomIntGenerator(min, Integer.MAX_VALUE);\n    }\n\n    public static RandomIntGenerator smallerThan(int max) {\n        return new RandomIntGenerator(Integer.MIN_VALUE, max);\n    }\n\n    public int next() {...}\n}\n```\n注意到构造器被private修饰确保类仅能通过静态工厂方法来初始化。并且当你使用RandomIntGenerator.between(10,20)而不是new RandomIntGenerator(10,20)来产生整数时你的意图被清晰的表达了。值得注意的是，这个技术和 Gang of Four的工厂设计模式不同。此外，任何类可以提供静态工厂方法替代构造器。那么此种技术的优点和缺点是什么呢？我们已经提到过静态工厂方法的第一个优点：静态工厂方法拥有名字。这有两个直接的好处:\n1.我们可以给静态方法提供一个有意义的名字\n2.我们可以给静态方法提供参数类型、参数个数相同的几个构造器，在传统构造器中是不能这样做的.\n\n \n\n### Advantage 2.new object\n　　静态工厂方法在调用的时候不需要每次都创建一个新的对象.一个很好的例子是 java.lang.Boolean中的valueOf方法\n```\npublic static Boolean valueOf(boolean b) {\n    return (b ? TRUE : FALSE);\n}\n```\n多次调用也不会重复创建对象\n### Advantage 3.return any subtype of their return type(范型)\n　　当我们不仅需要返回随机的int值时,我们可以在之前提到的RandomGenerators中加上静态工厂方法\n```\npublic final class RandomGenerators {\n    // Suppresses default constructor, ensuring non-instantiability.\n    private RandomGenerators() {}\n\n    public static final RandomGenerator<Integer> getIntGenerator() {\n        return new RandomIntGenerator(Integer.MIN_VALUE, Integer.MAX_VALUE);\n    }\n\n    public static final RandomGenerator<String> getStringGenerator() {\n        return new RandomStringGenerator('');\n    }\n}\n```\n这样需要返回随机字符串时,直接调用RandomGenerator.getStringGenerator().get....\n另一个例子就是现在经常用到的com.google.common.collect中的Maps.newHaskMap()等.(guava)\nAdvantage 4.返回对象的类型可根据传入的参数变化?\n　　同样收集new一个HashMap.传统方式\n\nMap<String, Integer> map = new HashMap<String, Integer>();\n 而用了静态工厂方法\npublic static <K, V> HashMap<K, V> newHashMap() {\n  return new HashMap<K, V>();\n}\n则可以直接 \nMap<String, Integer> map =Maps.newHaskMap()\nAdvantage 5.延迟加载?\n如JDBC中的\n\nDriverManager.getConnection()\n调用的时候connection不需要已经建立.\n \n\n### Disadvantage\n1.如果我们在类中将构造函数设为private，只提供静态工厂方法来构建对象，那么我们将不能通过继承扩展该类。 \n但是这也会鼓励我们使用复合而不是继承来扩展类。\n2.构建对象的静态工厂方法并没有像构造器那样明确标识出来，不能和其他静态方法很方便地区分开来。 \n如果类中只提供静态工厂方法而不是构造器，要想查明如何实例化一个类将会变得困难。 \n我们可以通过遵循静态工厂方法的命名规范来弥补这一劣势：\n```\nvalueOf - 返回的实例与它的参数具有相同的值，一般作为类型转换使用，例如Boolean.valueOf(boolean)\nof - valueOf的更为简洁的替代。\ngetInstance - 返回的实例通过方法的参数来描述，但不能说与参数具有同样的值。对于Singleton来说，使用无参getInstance，返回唯一的实例。\nnewInstance - 像getInstance一样，但其能够确保每次都返回新的对象。\ngetType - 像getInstance一样，但此方法返回的对象是另一个不同的类。\nnewType - 像getType一样，但每次返回一个新对象。\n```\n引用链接:http://honoka.cnblogs.com。https://yq.aliyun.com/articles/17013.\n\n\n\n\n","source":"_posts/Item1. Consider static factory methods instead of constructors.md","raw":"---\ntitle: 《Effective Java》Item1. Consider static factory methods instead of constructors\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\n### Advantage 1. name\n　静态工厂方法可以通过方法的名字很直接的传递方法很多信息,而不像传统的构造方法一样名字只能和类名相同,用户只能通过传递的参数和注释文档来判断调用哪个方法.一个很好的例子:\n\n有一个RandomIntGenerator 类，产生随机的int类型的整数。如下所示： \n```\npublic class RandomIntGenerator {\nprivate final int min;\nprivate final int max;\n\npublic int next() {...}\n}\n```\n这个生成器接收最大值和最小值两个参数并且生成介于两者之间的随机数。注意到两个属性min和max被final修饰，所以必须初始化它们。可以在定义它们时就初始化或者通过构造器来初始化。通过构造器初始如下：\n```\npublic RandomIntGenerator(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n```\n现在，我们要提供给这样一个功能，客户端仅设置一个最小值然后产生一个介于此值和Integer.MAX_VALUE之间的整数。所以我们添加了第二个构造器：\n```\npublic RandomIntGenerator(int min) {\n    this.min = min;\n    this.max = Integer.MAX_VALUE;\n}\n```\n到目前为止，一切正常。但是，我们同样要提供一个构造器设置一个最大值，然后产生一个介于Integer.MIN_VALUE和最大值的整数。我们添加第三个构造器如下：\n```\npublic RandomIntGenerator(int max) {\n    this.min = Integer.MIN_VALUE;\n    this.max = max;\n}\n```\n如果你这样做了，将会出现编译错误：Duplicate method RandomIntGenerator(int) in type RandomIntGenerator。那里出错了？毫无疑问，问题在于构造器没有名字。因此，一个类仅有一个特定方法签名的构造器。同样的，你不能定义方法签名相同的（返回值、名称、参数类型及个数均相同）两个方法。这就是为什么当我们试着添加构造器RandomIntGenerator(int max) 时，会得到上述的编译错误，原因是我们已经有一个构造器 RandomIntGenerator(int min)。\n\n像这样的情况我们该如何处理呢？幸好有其他方式可以使用：静态工厂方法，通过使用简单的公共静态方法返回一个类的实例。你可能在无意识中已经使用过这种技术。你有没有写过Boolean.valueOf?，就像下面这样：\n```\npublic static Boolean valueOf(boolean b) {\n    return (b ? TRUE : FALSE);\n}\n```\n将静态工厂应用到RandomIntGenerator类，得到\n```\n public class RandomIntGenerator {\n\n    private final int min;\n    private final int max;\n\n    private RandomIntGenerator(int min, int max) {\n        this.min = min;\n        this.max = max;\n    }\n\n    public static RandomIntGenerator between(int max, int min) {\n        return new RandomIntGenerator(min, max);\n    }\n\n    public static RandomIntGenerator biggerThan(int min) {\n        return new RandomIntGenerator(min, Integer.MAX_VALUE);\n    }\n\n    public static RandomIntGenerator smallerThan(int max) {\n        return new RandomIntGenerator(Integer.MIN_VALUE, max);\n    }\n\n    public int next() {...}\n}\n```\n注意到构造器被private修饰确保类仅能通过静态工厂方法来初始化。并且当你使用RandomIntGenerator.between(10,20)而不是new RandomIntGenerator(10,20)来产生整数时你的意图被清晰的表达了。值得注意的是，这个技术和 Gang of Four的工厂设计模式不同。此外，任何类可以提供静态工厂方法替代构造器。那么此种技术的优点和缺点是什么呢？我们已经提到过静态工厂方法的第一个优点：静态工厂方法拥有名字。这有两个直接的好处:\n1.我们可以给静态方法提供一个有意义的名字\n2.我们可以给静态方法提供参数类型、参数个数相同的几个构造器，在传统构造器中是不能这样做的.\n\n \n\n### Advantage 2.new object\n　　静态工厂方法在调用的时候不需要每次都创建一个新的对象.一个很好的例子是 java.lang.Boolean中的valueOf方法\n```\npublic static Boolean valueOf(boolean b) {\n    return (b ? TRUE : FALSE);\n}\n```\n多次调用也不会重复创建对象\n### Advantage 3.return any subtype of their return type(范型)\n　　当我们不仅需要返回随机的int值时,我们可以在之前提到的RandomGenerators中加上静态工厂方法\n```\npublic final class RandomGenerators {\n    // Suppresses default constructor, ensuring non-instantiability.\n    private RandomGenerators() {}\n\n    public static final RandomGenerator<Integer> getIntGenerator() {\n        return new RandomIntGenerator(Integer.MIN_VALUE, Integer.MAX_VALUE);\n    }\n\n    public static final RandomGenerator<String> getStringGenerator() {\n        return new RandomStringGenerator('');\n    }\n}\n```\n这样需要返回随机字符串时,直接调用RandomGenerator.getStringGenerator().get....\n另一个例子就是现在经常用到的com.google.common.collect中的Maps.newHaskMap()等.(guava)\nAdvantage 4.返回对象的类型可根据传入的参数变化?\n　　同样收集new一个HashMap.传统方式\n\nMap<String, Integer> map = new HashMap<String, Integer>();\n 而用了静态工厂方法\npublic static <K, V> HashMap<K, V> newHashMap() {\n  return new HashMap<K, V>();\n}\n则可以直接 \nMap<String, Integer> map =Maps.newHaskMap()\nAdvantage 5.延迟加载?\n如JDBC中的\n\nDriverManager.getConnection()\n调用的时候connection不需要已经建立.\n \n\n### Disadvantage\n1.如果我们在类中将构造函数设为private，只提供静态工厂方法来构建对象，那么我们将不能通过继承扩展该类。 \n但是这也会鼓励我们使用复合而不是继承来扩展类。\n2.构建对象的静态工厂方法并没有像构造器那样明确标识出来，不能和其他静态方法很方便地区分开来。 \n如果类中只提供静态工厂方法而不是构造器，要想查明如何实例化一个类将会变得困难。 \n我们可以通过遵循静态工厂方法的命名规范来弥补这一劣势：\n```\nvalueOf - 返回的实例与它的参数具有相同的值，一般作为类型转换使用，例如Boolean.valueOf(boolean)\nof - valueOf的更为简洁的替代。\ngetInstance - 返回的实例通过方法的参数来描述，但不能说与参数具有同样的值。对于Singleton来说，使用无参getInstance，返回唯一的实例。\nnewInstance - 像getInstance一样，但其能够确保每次都返回新的对象。\ngetType - 像getInstance一样，但此方法返回的对象是另一个不同的类。\nnewType - 像getType一样，但每次返回一个新对象。\n```\n引用链接:http://honoka.cnblogs.com。https://yq.aliyun.com/articles/17013.\n\n\n\n\n","slug":"Item1. Consider static factory methods instead of constructors","published":1,"date":"2019-05-11T11:33:08.218Z","updated":"2019-05-11T11:33:08.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbqo000qm74zwo86vb0f","content":"<h3 id=\"Advantage-1-name\"><a href=\"#Advantage-1-name\" class=\"headerlink\" title=\"Advantage 1. name\"></a>Advantage 1. name</h3><p>　静态工厂方法可以通过方法的名字很直接的传递方法很多信息,而不像传统的构造方法一样名字只能和类名相同,用户只能通过传递的参数和注释文档来判断调用哪个方法.一个很好的例子:</p>\n<p>有一个RandomIntGenerator 类，产生随机的int类型的整数。如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RandomIntGenerator &#123;</span><br><span class=\"line\">private final int min;</span><br><span class=\"line\">private final int max;</span><br><span class=\"line\"></span><br><span class=\"line\">public int next() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个生成器接收最大值和最小值两个参数并且生成介于两者之间的随机数。注意到两个属性min和max被final修饰，所以必须初始化它们。可以在定义它们时就初始化或者通过构造器来初始化。通过构造器初始如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public RandomIntGenerator(int min, int max) &#123;</span><br><span class=\"line\">    this.min = min;</span><br><span class=\"line\">    this.max = max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在，我们要提供给这样一个功能，客户端仅设置一个最小值然后产生一个介于此值和Integer.MAX_VALUE之间的整数。所以我们添加了第二个构造器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public RandomIntGenerator(int min) &#123;</span><br><span class=\"line\">    this.min = min;</span><br><span class=\"line\">    this.max = Integer.MAX_VALUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>到目前为止，一切正常。但是，我们同样要提供一个构造器设置一个最大值，然后产生一个介于Integer.MIN_VALUE和最大值的整数。我们添加第三个构造器如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public RandomIntGenerator(int max) &#123;</span><br><span class=\"line\">    this.min = Integer.MIN_VALUE;</span><br><span class=\"line\">    this.max = max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你这样做了，将会出现编译错误：Duplicate method RandomIntGenerator(int) in type RandomIntGenerator。那里出错了？毫无疑问，问题在于构造器没有名字。因此，一个类仅有一个特定方法签名的构造器。同样的，你不能定义方法签名相同的（返回值、名称、参数类型及个数均相同）两个方法。这就是为什么当我们试着添加构造器RandomIntGenerator(int max) 时，会得到上述的编译错误，原因是我们已经有一个构造器 RandomIntGenerator(int min)。</p>\n<p>像这样的情况我们该如何处理呢？幸好有其他方式可以使用：静态工厂方法，通过使用简单的公共静态方法返回一个类的实例。你可能在无意识中已经使用过这种技术。你有没有写过Boolean.valueOf?，就像下面这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Boolean valueOf(boolean b) &#123;</span><br><span class=\"line\">    return (b ? TRUE : FALSE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将静态工厂应用到RandomIntGenerator类，得到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public class RandomIntGenerator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int min;</span><br><span class=\"line\">    private final int max;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RandomIntGenerator(int min, int max) &#123;</span><br><span class=\"line\">        this.min = min;</span><br><span class=\"line\">        this.max = max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static RandomIntGenerator between(int max, int min) &#123;</span><br><span class=\"line\">        return new RandomIntGenerator(min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static RandomIntGenerator biggerThan(int min) &#123;</span><br><span class=\"line\">        return new RandomIntGenerator(min, Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static RandomIntGenerator smallerThan(int max) &#123;</span><br><span class=\"line\">        return new RandomIntGenerator(Integer.MIN_VALUE, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int next() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意到构造器被private修饰确保类仅能通过静态工厂方法来初始化。并且当你使用RandomIntGenerator.between(10,20)而不是new RandomIntGenerator(10,20)来产生整数时你的意图被清晰的表达了。值得注意的是，这个技术和 Gang of Four的工厂设计模式不同。此外，任何类可以提供静态工厂方法替代构造器。那么此种技术的优点和缺点是什么呢？我们已经提到过静态工厂方法的第一个优点：静态工厂方法拥有名字。这有两个直接的好处:<br>1.我们可以给静态方法提供一个有意义的名字<br>2.我们可以给静态方法提供参数类型、参数个数相同的几个构造器，在传统构造器中是不能这样做的.</p>\n<h3 id=\"Advantage-2-new-object\"><a href=\"#Advantage-2-new-object\" class=\"headerlink\" title=\"Advantage 2.new object\"></a>Advantage 2.new object</h3><p>　　静态工厂方法在调用的时候不需要每次都创建一个新的对象.一个很好的例子是 java.lang.Boolean中的valueOf方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Boolean valueOf(boolean b) &#123;</span><br><span class=\"line\">    return (b ? TRUE : FALSE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>多次调用也不会重复创建对象</p>\n<h3 id=\"Advantage-3-return-any-subtype-of-their-return-type-范型\"><a href=\"#Advantage-3-return-any-subtype-of-their-return-type-范型\" class=\"headerlink\" title=\"Advantage 3.return any subtype of their return type(范型)\"></a>Advantage 3.return any subtype of their return type(范型)</h3><p>　　当我们不仅需要返回随机的int值时,我们可以在之前提到的RandomGenerators中加上静态工厂方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class RandomGenerators &#123;</span><br><span class=\"line\">    // Suppresses default constructor, ensuring non-instantiability.</span><br><span class=\"line\">    private RandomGenerators() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final RandomGenerator&lt;Integer&gt; getIntGenerator() &#123;</span><br><span class=\"line\">        return new RandomIntGenerator(Integer.MIN_VALUE, Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final RandomGenerator&lt;String&gt; getStringGenerator() &#123;</span><br><span class=\"line\">        return new RandomStringGenerator(&apos;&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样需要返回随机字符串时,直接调用RandomGenerator.getStringGenerator().get….<br>另一个例子就是现在经常用到的com.google.common.collect中的Maps.newHaskMap()等.(guava)<br>Advantage 4.返回对象的类型可根据传入的参数变化?<br>　　同样收集new一个HashMap.传统方式</p>\n<p>Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();<br> 而用了静态工厂方法<br>public static &lt;K, V&gt; HashMap&lt;K, V&gt; newHashMap() {<br>  return new HashMap&lt;K, V&gt;();<br>}<br>则可以直接<br>Map&lt;String, Integer&gt; map =Maps.newHaskMap()<br>Advantage 5.延迟加载?<br>如JDBC中的</p>\n<p>DriverManager.getConnection()<br>调用的时候connection不需要已经建立.</p>\n<h3 id=\"Disadvantage\"><a href=\"#Disadvantage\" class=\"headerlink\" title=\"Disadvantage\"></a>Disadvantage</h3><p>1.如果我们在类中将构造函数设为private，只提供静态工厂方法来构建对象，那么我们将不能通过继承扩展该类。<br>但是这也会鼓励我们使用复合而不是继承来扩展类。<br>2.构建对象的静态工厂方法并没有像构造器那样明确标识出来，不能和其他静态方法很方便地区分开来。<br>如果类中只提供静态工厂方法而不是构造器，要想查明如何实例化一个类将会变得困难。<br>我们可以通过遵循静态工厂方法的命名规范来弥补这一劣势：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valueOf - 返回的实例与它的参数具有相同的值，一般作为类型转换使用，例如Boolean.valueOf(boolean)</span><br><span class=\"line\">of - valueOf的更为简洁的替代。</span><br><span class=\"line\">getInstance - 返回的实例通过方法的参数来描述，但不能说与参数具有同样的值。对于Singleton来说，使用无参getInstance，返回唯一的实例。</span><br><span class=\"line\">newInstance - 像getInstance一样，但其能够确保每次都返回新的对象。</span><br><span class=\"line\">getType - 像getInstance一样，但此方法返回的对象是另一个不同的类。</span><br><span class=\"line\">newType - 像getType一样，但每次返回一个新对象。</span><br></pre></td></tr></table></figure></p>\n<p>引用链接:<a href=\"http://honoka.cnblogs.com。https://yq.aliyun.com/articles/17013\" target=\"_blank\" rel=\"noopener\">http://honoka.cnblogs.com。https://yq.aliyun.com/articles/17013</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Advantage-1-name\"><a href=\"#Advantage-1-name\" class=\"headerlink\" title=\"Advantage 1. name\"></a>Advantage 1. name</h3><p>　静态工厂方法可以通过方法的名字很直接的传递方法很多信息,而不像传统的构造方法一样名字只能和类名相同,用户只能通过传递的参数和注释文档来判断调用哪个方法.一个很好的例子:</p>\n<p>有一个RandomIntGenerator 类，产生随机的int类型的整数。如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RandomIntGenerator &#123;</span><br><span class=\"line\">private final int min;</span><br><span class=\"line\">private final int max;</span><br><span class=\"line\"></span><br><span class=\"line\">public int next() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个生成器接收最大值和最小值两个参数并且生成介于两者之间的随机数。注意到两个属性min和max被final修饰，所以必须初始化它们。可以在定义它们时就初始化或者通过构造器来初始化。通过构造器初始如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public RandomIntGenerator(int min, int max) &#123;</span><br><span class=\"line\">    this.min = min;</span><br><span class=\"line\">    this.max = max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在，我们要提供给这样一个功能，客户端仅设置一个最小值然后产生一个介于此值和Integer.MAX_VALUE之间的整数。所以我们添加了第二个构造器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public RandomIntGenerator(int min) &#123;</span><br><span class=\"line\">    this.min = min;</span><br><span class=\"line\">    this.max = Integer.MAX_VALUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>到目前为止，一切正常。但是，我们同样要提供一个构造器设置一个最大值，然后产生一个介于Integer.MIN_VALUE和最大值的整数。我们添加第三个构造器如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public RandomIntGenerator(int max) &#123;</span><br><span class=\"line\">    this.min = Integer.MIN_VALUE;</span><br><span class=\"line\">    this.max = max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你这样做了，将会出现编译错误：Duplicate method RandomIntGenerator(int) in type RandomIntGenerator。那里出错了？毫无疑问，问题在于构造器没有名字。因此，一个类仅有一个特定方法签名的构造器。同样的，你不能定义方法签名相同的（返回值、名称、参数类型及个数均相同）两个方法。这就是为什么当我们试着添加构造器RandomIntGenerator(int max) 时，会得到上述的编译错误，原因是我们已经有一个构造器 RandomIntGenerator(int min)。</p>\n<p>像这样的情况我们该如何处理呢？幸好有其他方式可以使用：静态工厂方法，通过使用简单的公共静态方法返回一个类的实例。你可能在无意识中已经使用过这种技术。你有没有写过Boolean.valueOf?，就像下面这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Boolean valueOf(boolean b) &#123;</span><br><span class=\"line\">    return (b ? TRUE : FALSE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将静态工厂应用到RandomIntGenerator类，得到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public class RandomIntGenerator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int min;</span><br><span class=\"line\">    private final int max;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RandomIntGenerator(int min, int max) &#123;</span><br><span class=\"line\">        this.min = min;</span><br><span class=\"line\">        this.max = max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static RandomIntGenerator between(int max, int min) &#123;</span><br><span class=\"line\">        return new RandomIntGenerator(min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static RandomIntGenerator biggerThan(int min) &#123;</span><br><span class=\"line\">        return new RandomIntGenerator(min, Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static RandomIntGenerator smallerThan(int max) &#123;</span><br><span class=\"line\">        return new RandomIntGenerator(Integer.MIN_VALUE, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int next() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意到构造器被private修饰确保类仅能通过静态工厂方法来初始化。并且当你使用RandomIntGenerator.between(10,20)而不是new RandomIntGenerator(10,20)来产生整数时你的意图被清晰的表达了。值得注意的是，这个技术和 Gang of Four的工厂设计模式不同。此外，任何类可以提供静态工厂方法替代构造器。那么此种技术的优点和缺点是什么呢？我们已经提到过静态工厂方法的第一个优点：静态工厂方法拥有名字。这有两个直接的好处:<br>1.我们可以给静态方法提供一个有意义的名字<br>2.我们可以给静态方法提供参数类型、参数个数相同的几个构造器，在传统构造器中是不能这样做的.</p>\n<h3 id=\"Advantage-2-new-object\"><a href=\"#Advantage-2-new-object\" class=\"headerlink\" title=\"Advantage 2.new object\"></a>Advantage 2.new object</h3><p>　　静态工厂方法在调用的时候不需要每次都创建一个新的对象.一个很好的例子是 java.lang.Boolean中的valueOf方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Boolean valueOf(boolean b) &#123;</span><br><span class=\"line\">    return (b ? TRUE : FALSE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>多次调用也不会重复创建对象</p>\n<h3 id=\"Advantage-3-return-any-subtype-of-their-return-type-范型\"><a href=\"#Advantage-3-return-any-subtype-of-their-return-type-范型\" class=\"headerlink\" title=\"Advantage 3.return any subtype of their return type(范型)\"></a>Advantage 3.return any subtype of their return type(范型)</h3><p>　　当我们不仅需要返回随机的int值时,我们可以在之前提到的RandomGenerators中加上静态工厂方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class RandomGenerators &#123;</span><br><span class=\"line\">    // Suppresses default constructor, ensuring non-instantiability.</span><br><span class=\"line\">    private RandomGenerators() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final RandomGenerator&lt;Integer&gt; getIntGenerator() &#123;</span><br><span class=\"line\">        return new RandomIntGenerator(Integer.MIN_VALUE, Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final RandomGenerator&lt;String&gt; getStringGenerator() &#123;</span><br><span class=\"line\">        return new RandomStringGenerator(&apos;&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样需要返回随机字符串时,直接调用RandomGenerator.getStringGenerator().get….<br>另一个例子就是现在经常用到的com.google.common.collect中的Maps.newHaskMap()等.(guava)<br>Advantage 4.返回对象的类型可根据传入的参数变化?<br>　　同样收集new一个HashMap.传统方式</p>\n<p>Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();<br> 而用了静态工厂方法<br>public static &lt;K, V&gt; HashMap&lt;K, V&gt; newHashMap() {<br>  return new HashMap&lt;K, V&gt;();<br>}<br>则可以直接<br>Map&lt;String, Integer&gt; map =Maps.newHaskMap()<br>Advantage 5.延迟加载?<br>如JDBC中的</p>\n<p>DriverManager.getConnection()<br>调用的时候connection不需要已经建立.</p>\n<h3 id=\"Disadvantage\"><a href=\"#Disadvantage\" class=\"headerlink\" title=\"Disadvantage\"></a>Disadvantage</h3><p>1.如果我们在类中将构造函数设为private，只提供静态工厂方法来构建对象，那么我们将不能通过继承扩展该类。<br>但是这也会鼓励我们使用复合而不是继承来扩展类。<br>2.构建对象的静态工厂方法并没有像构造器那样明确标识出来，不能和其他静态方法很方便地区分开来。<br>如果类中只提供静态工厂方法而不是构造器，要想查明如何实例化一个类将会变得困难。<br>我们可以通过遵循静态工厂方法的命名规范来弥补这一劣势：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valueOf - 返回的实例与它的参数具有相同的值，一般作为类型转换使用，例如Boolean.valueOf(boolean)</span><br><span class=\"line\">of - valueOf的更为简洁的替代。</span><br><span class=\"line\">getInstance - 返回的实例通过方法的参数来描述，但不能说与参数具有同样的值。对于Singleton来说，使用无参getInstance，返回唯一的实例。</span><br><span class=\"line\">newInstance - 像getInstance一样，但其能够确保每次都返回新的对象。</span><br><span class=\"line\">getType - 像getInstance一样，但此方法返回的对象是另一个不同的类。</span><br><span class=\"line\">newType - 像getType一样，但每次返回一个新对象。</span><br></pre></td></tr></table></figure></p>\n<p>引用链接:<a href=\"http://honoka.cnblogs.com。https://yq.aliyun.com/articles/17013\" target=\"_blank\" rel=\"noopener\">http://honoka.cnblogs.com。https://yq.aliyun.com/articles/17013</a>.</p>\n"},{"title":"《Effective Java》Item14. Consider implementing Comparable","_content":"\nwhenever you implement a value class that has a sensible ording, you should hava the class implements Comparable interface so its instance can be easily sorted, searched and used in comparison-based collections.\n\n\n\n\n","source":"_posts/Item14. Consider implementing Comparable.md","raw":"---\ntitle: 《Effective Java》Item14. Consider implementing Comparable\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\nwhenever you implement a value class that has a sensible ording, you should hava the class implements Comparable interface so its instance can be easily sorted, searched and used in comparison-based collections.\n\n\n\n\n","slug":"Item14. Consider implementing Comparable","published":1,"date":"2019-05-11T11:33:08.217Z","updated":"2019-05-11T11:33:08.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbqq000um74zceh7nwyy","content":"<p>whenever you implement a value class that has a sensible ording, you should hava the class implements Comparable interface so its instance can be easily sorted, searched and used in comparison-based collections.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>whenever you implement a value class that has a sensible ording, you should hava the class implements Comparable interface so its instance can be easily sorted, searched and used in comparison-based collections.</p>\n"},{"title":"《Effective Java》Item17. Minimize mutablity","_content":"####To Make a class immutable, follow this five rules:\n - 1. Don't provide methods that modify the object's state(known as mutators)\n - 2. Ensure that the class can't be extended.\n - 3. Make all fields final.\n - 4. Make all fields private.\n - 5. Ensure exclusive access to any mutable components.\n","source":"_posts/Item17. Minimize mutablity.md","raw":"---\ntitle: 《Effective Java》Item17. Minimize mutablity\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n####To Make a class immutable, follow this five rules:\n - 1. Don't provide methods that modify the object's state(known as mutators)\n - 2. Ensure that the class can't be extended.\n - 3. Make all fields final.\n - 4. Make all fields private.\n - 5. Ensure exclusive access to any mutable components.\n","slug":"Item17. Minimize mutablity","published":1,"date":"2019-05-11T11:33:08.215Z","updated":"2019-05-11T11:33:08.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbqs000xm74z1njzrjzq","content":"<p>####To Make a class immutable, follow this five rules:</p>\n<ul>\n<li><ol>\n<li>Don’t provide methods that modify the object’s state(known as mutators)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Ensure that the class can’t be extended.</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>Make all fields final.</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>Make all fields private.</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>Ensure exclusive access to any mutable components.</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>####To Make a class immutable, follow this five rules:</p>\n<ul>\n<li><ol>\n<li>Don’t provide methods that modify the object’s state(known as mutators)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Ensure that the class can’t be extended.</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>Make all fields final.</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>Make all fields private.</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>Ensure exclusive access to any mutable components.</li>\n</ol>\n</li>\n</ul>\n"},{"title":"《Effective Java》 Item15. Minisize the accessibility of classes and members","_content":"\nThe single most important factor that distinguishes a well-designed component from a poorly designed to which the component hides its internal date and other implementation details from other components.\n\n\n\n\n","source":"_posts/Item15. Minisize the accessibility of classes and members.md","raw":"---\ntitle: 《Effective Java》 Item15. Minisize the accessibility of classes and members\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\nThe single most important factor that distinguishes a well-designed component from a poorly designed to which the component hides its internal date and other implementation details from other components.\n\n\n\n\n","slug":"Item15. Minisize the accessibility of classes and members","published":1,"date":"2019-05-11T11:33:08.216Z","updated":"2019-05-11T11:33:08.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbqt0010m74zbb988bop","content":"<p>The single most important factor that distinguishes a well-designed component from a poorly designed to which the component hides its internal date and other implementation details from other components.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The single most important factor that distinguishes a well-designed component from a poorly designed to which the component hides its internal date and other implementation details from other components.</p>\n"},{"title":"《Effective Java》Item16. In public classes,use accessor methods, not public fields","_content":"\nIn public classes,use accessor methods, not public fields.\n\n\n\n\n","source":"_posts/Item16. In public classes,use accessor methods, not public fields.md","raw":"---\ntitle: 《Effective Java》Item16. In public classes,use accessor methods, not public fields\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\nIn public classes,use accessor methods, not public fields.\n\n\n\n\n","slug":"Item16. In public classes,use accessor methods, not public fields","published":1,"date":"2019-05-11T11:33:08.215Z","updated":"2019-05-11T11:33:08.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbqv0013m74zeovkr448","content":"<p>In public classes,use accessor methods, not public fields.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In public classes,use accessor methods, not public fields.</p>\n"},{"title":"《Effective Java》Item20. Prefer interfaces to abstract classes","_content":"\n- Existing classes can easily be retrofitted to implement a new interface.\n- Interface are ideal for defining mixins\n- Interface allow for the construction of nonhierarchical type frameworks.\n- Interface enable safe, powerful functionality enhancements.\n- Good documentation is absolutely essential in a skeletal implementation.\n\n\n\n\n\n\n","source":"_posts/Item20. Prefer interfaces to abstract classes.md","raw":"---\ntitle: 《Effective Java》Item20. Prefer interfaces to abstract classes\ncategories:\n- 技术\ntags:\n- Java\n- Effective Java\n\n---\n\n- Existing classes can easily be retrofitted to implement a new interface.\n- Interface are ideal for defining mixins\n- Interface allow for the construction of nonhierarchical type frameworks.\n- Interface enable safe, powerful functionality enhancements.\n- Good documentation is absolutely essential in a skeletal implementation.\n\n\n\n\n\n\n","slug":"Item20. Prefer interfaces to abstract classes","published":1,"date":"2019-05-21T02:36:43.907Z","updated":"2019-05-21T02:36:43.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbqx0016m74zugkzjonx","content":"<ul>\n<li>Existing classes can easily be retrofitted to implement a new interface.</li>\n<li>Interface are ideal for defining mixins</li>\n<li>Interface allow for the construction of nonhierarchical type frameworks.</li>\n<li>Interface enable safe, powerful functionality enhancements.</li>\n<li>Good documentation is absolutely essential in a skeletal implementation.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Existing classes can easily be retrofitted to implement a new interface.</li>\n<li>Interface are ideal for defining mixins</li>\n<li>Interface allow for the construction of nonhierarchical type frameworks.</li>\n<li>Interface enable safe, powerful functionality enhancements.</li>\n<li>Good documentation is absolutely essential in a skeletal implementation.</li>\n</ul>\n"},{"title":"《Effective Java》Item21. Design interface for posterity","_content":"\nDesign interface for posterity.\n\n\n\n\n","source":"_posts/Item21. Design interface for posterity.md","raw":"\n---\ntitle: 《Effective Java》Item21. Design interface for posterity\ncategories: \n- 技术\ntags:\n- Java\n- Effective Java\n\n---\n\nDesign interface for posterity.\n\n\n\n\n","slug":"Item21. Design interface for posterity","published":1,"date":"2019-05-21T02:36:43.907Z","updated":"2019-05-21T02:36:43.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbqz0019m74zaohs8js5","content":"<p>Design interface for posterity.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Design interface for posterity.</p>\n"},{"title":"《Effective Java》Item19. Design and document for inheritance or else prohibit it","_content":"\nThe class must document its `self-use` of overrideable methods.\n\n\n\n\n","source":"_posts/Item19. Design and document for inheritance or else prohibit it.md","raw":"---\ntitle: 《Effective Java》Item19. Design and document for inheritance or else prohibit it\ncategories:\n- 技术\ntags:\n- Java\n- Effective Java\n---\n\nThe class must document its `self-use` of overrideable methods.\n\n\n\n\n","slug":"Item19. Design and document for inheritance or else prohibit it","published":1,"date":"2019-05-21T02:36:43.906Z","updated":"2019-05-21T02:36:43.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbr1001cm74zir5v1r4b","content":"<p>The class must document its <code>self-use</code> of overrideable methods.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The class must document its <code>self-use</code> of overrideable methods.</p>\n"},{"title":"《Effective Java》Item7. Elimate obsolete objects refrences","_content":"\nNulling out object references should be the exception rather than the norm.\nIt is very desirable to learn to anticipate problems like this before they occur and prevent them from happening.\n\n\n\n\n\n","source":"_posts/Item7. Elimate obsolete objects refrences.md","raw":"---\ntitle: 《Effective Java》Item7. Elimate obsolete objects refrences\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\nNulling out object references should be the exception rather than the norm.\nIt is very desirable to learn to anticipate problems like this before they occur and prevent them from happening.\n\n\n\n\n\n","slug":"Item7. Elimate obsolete objects refrences","published":1,"date":"2019-05-11T11:33:08.213Z","updated":"2019-05-11T11:33:08.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbr3001fm74z2w6gribt","content":"<p>Nulling out object references should be the exception rather than the norm.<br>It is very desirable to learn to anticipate problems like this before they occur and prevent them from happening.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Nulling out object references should be the exception rather than the norm.<br>It is very desirable to learn to anticipate problems like this before they occur and prevent them from happening.</p>\n"},{"title":"《Effective Java》Item4. Enforce noninstantiability with a private constructor","_content":"\n(jav.util.Collections , Arrays ....)Such utility classes were not designed to be instantiated:an instance would be nonsencial.\n\n\n\n\n","source":"_posts/Item4. Enforce noninstantiability with a private constructor.md","raw":"---\ntitle: 《Effective Java》Item4. Enforce noninstantiability with a private constructor\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\n(jav.util.Collections , Arrays ....)Such utility classes were not designed to be instantiated:an instance would be nonsencial.\n\n\n\n\n","slug":"Item4. Enforce noninstantiability with a private constructor","published":1,"date":"2019-05-11T11:33:08.214Z","updated":"2019-05-11T11:33:08.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbr5001im74z23pd7b82","content":"<p>(jav.util.Collections , Arrays ….)Such utility classes were not designed to be instantiated:an instance would be nonsencial.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>(jav.util.Collections , Arrays ….)Such utility classes were not designed to be instantiated:an instance would be nonsencial.</p>\n"},{"title":"《Effective Java》Item5. Perfer dependency injection to hardwiring resources","_content":"\nMany classes depend on one or more underlying resources. For example, a spell checker depends on a dictionary. It is not uncommon to see such classes implemented as static utility classes.\n\n```\n//inflexible & untestable \npublic clsss SpellChecker {\n    private static final Lexicon dictionart = ,,,;\n    \n    private SpellChecker(){}//nonistantiable\n    public static INSTANCE = new SpelChecke(....);\n    \n    public boolean  isValid(String words){...}\n    ...\n}\n```\nIt's not satisfactory,because is assume that there is only one dictionary worth using.In practive, each language has its own dictionary, and special dictionaries are use for special vocavularies. Also, it may be desirable to use a special dictionary for testing.  \n\nA simple pattern that saitisfies this requirement is to pass the resources into the constructor when creating a new instance.\n```\n//Dependency injection provides flexibility and testablity\npublic class SpellChecker {\n    private final Lexicon dictionary;\n    \n    public SpellChecker(Lexicon dictionary){\n        this.dictionary = Objects.requireNonNull(dictionary);\n    }\n    \n    public boolean isValid(String words){...}\n    ...\n}\n```\n&nbsp;A useful variant is to pass aresource factory to the constructor.A factory is an object that can be called repeadly to create instance of a type.Such factories embody the *Factory Method* pattern.The Supplier<T> interface is perfect for representing factories.\n&nbsp; Although dependency injection greatly improve flexibility and testablity, it can clutter up large projects, which typically contain thounsands of dependencies. This iclutter can be all but eliminated by using a **dependency injection framwark**,such as Dagger, Guice, or Spring.\n\n\n\n\n\n","source":"_posts/Item5. Perfer dependency injection to hardwiring resources.md","raw":"---\ntitle: 《Effective Java》Item5. Perfer dependency injection to hardwiring resources\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\n\nMany classes depend on one or more underlying resources. For example, a spell checker depends on a dictionary. It is not uncommon to see such classes implemented as static utility classes.\n\n```\n//inflexible & untestable \npublic clsss SpellChecker {\n    private static final Lexicon dictionart = ,,,;\n    \n    private SpellChecker(){}//nonistantiable\n    public static INSTANCE = new SpelChecke(....);\n    \n    public boolean  isValid(String words){...}\n    ...\n}\n```\nIt's not satisfactory,because is assume that there is only one dictionary worth using.In practive, each language has its own dictionary, and special dictionaries are use for special vocavularies. Also, it may be desirable to use a special dictionary for testing.  \n\nA simple pattern that saitisfies this requirement is to pass the resources into the constructor when creating a new instance.\n```\n//Dependency injection provides flexibility and testablity\npublic class SpellChecker {\n    private final Lexicon dictionary;\n    \n    public SpellChecker(Lexicon dictionary){\n        this.dictionary = Objects.requireNonNull(dictionary);\n    }\n    \n    public boolean isValid(String words){...}\n    ...\n}\n```\n&nbsp;A useful variant is to pass aresource factory to the constructor.A factory is an object that can be called repeadly to create instance of a type.Such factories embody the *Factory Method* pattern.The Supplier<T> interface is perfect for representing factories.\n&nbsp; Although dependency injection greatly improve flexibility and testablity, it can clutter up large projects, which typically contain thounsands of dependencies. This iclutter can be all but eliminated by using a **dependency injection framwark**,such as Dagger, Guice, or Spring.\n\n\n\n\n\n","slug":"Item5. Perfer dependency injection to hardwiring resources","published":1,"date":"2019-05-11T11:33:08.213Z","updated":"2019-05-11T11:33:08.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbr6001lm74z01q4kd9p","content":"<p>Many classes depend on one or more underlying resources. For example, a spell checker depends on a dictionary. It is not uncommon to see such classes implemented as static utility classes.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//inflexible &amp; untestable </span><br><span class=\"line\">public clsss SpellChecker &#123;</span><br><span class=\"line\">    private static final Lexicon dictionart = ,,,;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private SpellChecker()&#123;&#125;//nonistantiable</span><br><span class=\"line\">    public static INSTANCE = new SpelChecke(....);</span><br><span class=\"line\">    </span><br><span class=\"line\">    public boolean  isValid(String words)&#123;...&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It’s not satisfactory,because is assume that there is only one dictionary worth using.In practive, each language has its own dictionary, and special dictionaries are use for special vocavularies. Also, it may be desirable to use a special dictionary for testing.  </p>\n<p>A simple pattern that saitisfies this requirement is to pass the resources into the constructor when creating a new instance.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Dependency injection provides flexibility and testablity</span><br><span class=\"line\">public class SpellChecker &#123;</span><br><span class=\"line\">    private final Lexicon dictionary;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public SpellChecker(Lexicon dictionary)&#123;</span><br><span class=\"line\">        this.dictionary = Objects.requireNonNull(dictionary);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public boolean isValid(String words)&#123;...&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;A useful variant is to pass aresource factory to the constructor.A factory is an object that can be called repeadly to create instance of a type.Such factories embody the <em>Factory Method</em> pattern.The Supplier<t> interface is perfect for representing factories.<br>&nbsp; Although dependency injection greatly improve flexibility and testablity, it can clutter up large projects, which typically contain thounsands of dependencies. This iclutter can be all but eliminated by using a <strong>dependency injection framwark</strong>,such as Dagger, Guice, or Spring.</t></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Many classes depend on one or more underlying resources. For example, a spell checker depends on a dictionary. It is not uncommon to see such classes implemented as static utility classes.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//inflexible &amp; untestable </span><br><span class=\"line\">public clsss SpellChecker &#123;</span><br><span class=\"line\">    private static final Lexicon dictionart = ,,,;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private SpellChecker()&#123;&#125;//nonistantiable</span><br><span class=\"line\">    public static INSTANCE = new SpelChecke(....);</span><br><span class=\"line\">    </span><br><span class=\"line\">    public boolean  isValid(String words)&#123;...&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It’s not satisfactory,because is assume that there is only one dictionary worth using.In practive, each language has its own dictionary, and special dictionaries are use for special vocavularies. Also, it may be desirable to use a special dictionary for testing.  </p>\n<p>A simple pattern that saitisfies this requirement is to pass the resources into the constructor when creating a new instance.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Dependency injection provides flexibility and testablity</span><br><span class=\"line\">public class SpellChecker &#123;</span><br><span class=\"line\">    private final Lexicon dictionary;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public SpellChecker(Lexicon dictionary)&#123;</span><br><span class=\"line\">        this.dictionary = Objects.requireNonNull(dictionary);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public boolean isValid(String words)&#123;...&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;A useful variant is to pass aresource factory to the constructor.A factory is an object that can be called repeadly to create instance of a type.Such factories embody the <em>Factory Method</em> pattern.The Supplier<t> interface is perfect for representing factories.<br>&nbsp; Although dependency injection greatly improve flexibility and testablity, it can clutter up large projects, which typically contain thounsands of dependencies. This iclutter can be all but eliminated by using a <strong>dependency injection framwark</strong>,such as Dagger, Guice, or Spring.</t></p>\n"},{"title":"《Effective Java》Item8. Avoid finalizers and cleaners","_content":"Finalizers are unpredictable, often dangerous, and generally unnecessary.\nCleaners are less dangerous than finalizers, but still unpredictable, slow, and generally unnecessary.\n\n\n\n","source":"_posts/Item8. Avoid finalizers and cleaners.md","raw":"---\ntitle: 《Effective Java》Item8. Avoid finalizers and cleaners\ncategories :\n- 技术\ntags :\n- Java\n- Effective Java\n---\nFinalizers are unpredictable, often dangerous, and generally unnecessary.\nCleaners are less dangerous than finalizers, but still unpredictable, slow, and generally unnecessary.\n\n\n\n","slug":"Item8. Avoid finalizers and cleaners","published":1,"date":"2019-05-11T11:33:08.212Z","updated":"2019-05-11T11:33:08.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbr8001om74z0of5r4yy","content":"<p>Finalizers are unpredictable, often dangerous, and generally unnecessary.<br>Cleaners are less dangerous than finalizers, but still unpredictable, slow, and generally unnecessary.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Finalizers are unpredictable, often dangerous, and generally unnecessary.<br>Cleaners are less dangerous than finalizers, but still unpredictable, slow, and generally unnecessary.</p>\n"},{"title":"List.contains()方法性能","_content":"\n\n无论是ArrayList 还是 LinkedList,contains()方法都是返回所查元素的索引,需要遍历List,时间复杂度O(n),比较耗时.\n源码:\n```\n    public boolean contains(Object o) {\n        return indexOf(o) >= 0;\n    }\n    public int indexOf(Object o) {\n        if (o == null) {\n            for (int i = 0; i < size; i++)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = 0; i < size; i++)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n    //LinkedList\n   public int indexOf(Object o) {\n        int index = 0;\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null)\n                    return index;\n                index++;\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item))\n                    return index;\n                index++;\n            }\n        }\n        return -1;\n    }\n```\n数据量大并且频繁调用时最好用Set\nhsahSet用`private transient HashMap<E,Object> map;`\n保存数据,\n它的add()方法:\n```\n    private static final Object PRESENT = new Object();\n    public boolean add(E e) {\n        return map.put(e, PRESENT)==null;\n    }\n```\n\ncontains()方法:\n```\n public boolean contains(Object o) {\n    return map.containsKey(o);\n }\n```\n\n\n\n","source":"_posts/List.contains()方法性能.md","raw":"---\ntitle:  List.contains()方法性能\ncategories :\n- 技术\ntags :\n- Java\n---\n\n\n无论是ArrayList 还是 LinkedList,contains()方法都是返回所查元素的索引,需要遍历List,时间复杂度O(n),比较耗时.\n源码:\n```\n    public boolean contains(Object o) {\n        return indexOf(o) >= 0;\n    }\n    public int indexOf(Object o) {\n        if (o == null) {\n            for (int i = 0; i < size; i++)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = 0; i < size; i++)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n    //LinkedList\n   public int indexOf(Object o) {\n        int index = 0;\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null)\n                    return index;\n                index++;\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item))\n                    return index;\n                index++;\n            }\n        }\n        return -1;\n    }\n```\n数据量大并且频繁调用时最好用Set\nhsahSet用`private transient HashMap<E,Object> map;`\n保存数据,\n它的add()方法:\n```\n    private static final Object PRESENT = new Object();\n    public boolean add(E e) {\n        return map.put(e, PRESENT)==null;\n    }\n```\n\ncontains()方法:\n```\n public boolean contains(Object o) {\n    return map.containsKey(o);\n }\n```\n\n\n\n","slug":"List.contains()方法性能","published":1,"date":"2019-05-21T02:36:43.910Z","updated":"2019-05-21T02:36:43.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbra001rm74za2gjxkjl","content":"<p>无论是ArrayList 还是 LinkedList,contains()方法都是返回所查元素的索引,需要遍历List,时间复杂度O(n),比较耗时.<br>源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public boolean contains(Object o) &#123;</span><br><span class=\"line\">     return indexOf(o) &gt;= 0;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> public int indexOf(Object o) &#123;</span><br><span class=\"line\">     if (o == null) &#123;</span><br><span class=\"line\">         for (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">             if (elementData[i]==null)</span><br><span class=\"line\">                 return i;</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">         for (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">             if (o.equals(elementData[i]))</span><br><span class=\"line\">                 return i;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return -1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> //LinkedList</span><br><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">     int index = 0;</span><br><span class=\"line\">     if (o == null) &#123;</span><br><span class=\"line\">         for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">             if (x.item == null)</span><br><span class=\"line\">                 return index;</span><br><span class=\"line\">             index++;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">         for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">             if (o.equals(x.item))</span><br><span class=\"line\">                 return index;</span><br><span class=\"line\">             index++;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return -1;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>数据量大并且频繁调用时最好用Set<br>hsahSet用<code>private transient HashMap&lt;E,Object&gt; map;</code><br>保存数据,<br>它的add()方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final Object PRESENT = new Object();</span><br><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    return map.put(e, PRESENT)==null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>contains()方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean contains(Object o) &#123;</span><br><span class=\"line\">   return map.containsKey(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>无论是ArrayList 还是 LinkedList,contains()方法都是返回所查元素的索引,需要遍历List,时间复杂度O(n),比较耗时.<br>源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public boolean contains(Object o) &#123;</span><br><span class=\"line\">     return indexOf(o) &gt;= 0;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> public int indexOf(Object o) &#123;</span><br><span class=\"line\">     if (o == null) &#123;</span><br><span class=\"line\">         for (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">             if (elementData[i]==null)</span><br><span class=\"line\">                 return i;</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">         for (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">             if (o.equals(elementData[i]))</span><br><span class=\"line\">                 return i;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return -1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> //LinkedList</span><br><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">     int index = 0;</span><br><span class=\"line\">     if (o == null) &#123;</span><br><span class=\"line\">         for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">             if (x.item == null)</span><br><span class=\"line\">                 return index;</span><br><span class=\"line\">             index++;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">         for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">             if (o.equals(x.item))</span><br><span class=\"line\">                 return index;</span><br><span class=\"line\">             index++;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return -1;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>数据量大并且频繁调用时最好用Set<br>hsahSet用<code>private transient HashMap&lt;E,Object&gt; map;</code><br>保存数据,<br>它的add()方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final Object PRESENT = new Object();</span><br><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    return map.put(e, PRESENT)==null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>contains()方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean contains(Object o) &#123;</span><br><span class=\"line\">   return map.containsKey(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"JVM","_content":"\n\n![](JVM/JVM.png)\n  \n 方法区和Java堆都是内存共享,方法区又被称为非堆(Non-Heap).又称为“永久带”.\n \n### 1.程序计数器：\n线程私有。是一块较小的内存，是当前线程所执行的字节码的行号指示器。是Java虚拟机规范中唯一没有规定OOM（OutOfMemoryError）的区域。\n\n### 2.Java栈：\n线程私有。生命周期和线程相同。是Java方法执行的内存模型。执行每个方法都会创建一个栈帧，用于存储局部变量和操作数（对象引用）。局部变量所需要的内存空间大小在编译期间完成分配。所以栈帧的大小不会改变。存在两种异常情况：若线程请求深度大于栈的深度，抛StackOverflowError。若栈在动态扩展时无法请求足够内存，抛OOM。\n\n### 3.Java堆：\n所有线程共享。虚拟机启动时创建。存放对象实力和数组。所占内存最大。分为新生代（Young区），老年代（Old区）。新生代分Eden区，Servior区。Servior区又分为From space区和To Space区。Eden区和Servior区的内存比为8:1。 当扩展内存大于可用内存，抛OOM。\n\n### 4.方法区：\n所有线程共享。用于存储已被虚拟机加载的类信息、常量、静态变量等数据。又称为非堆（Non—Heap）。方法区又称“永久代”。GC很少在这个区域进行，但不代表不会回收。这个区域回收目标主要是针对常量池的回收和对类型的卸载。当内存申请大于实际可用内存，抛OOM。\n\n### 5.本地方法栈：\n线程私有。与Java栈类似，但是不是为Java方法（字节码）服务，而是为本地非Java方法服务。也会抛StackOverflowError和OOM。\n\n---\n\nHotspot VM将内存划分为不同的物理区，就是“分代”思想的体现。如图所示，JVM内存主要由新生代、老年代、永久代构成。\n\nGC影响\n\n① 新生代（Young Generation）：大多数对象在新生代中被创建，其中很多对象的生命周期很短。每次新生代的垃圾回收（又称Minor GC）后只有少量对象存活，所以选用复制算法，只需要少量的复制成本就可以完成回收。\n\n新生代内又分三个区：一个Eden区，两个Survivor区（一般而言），大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到两个Survivor区（中的一个）。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被复制到另外一个Survivor区。对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被放到老年代，这个过程也称为“晋升”。显然，“晋升年龄阈值”的大小直接影响着对象在新生代中的停留时间，在Serial和ParNew GC两种回收器中，“晋升年龄阈值”通过参数MaxTenuringThreshold设定，默认值为15。\n\n② 老年代（Old Generation）：在新生代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称Major GC）通常使用“标记-清理”或“标记-整理”算法。整堆包括新生代和老年代的垃圾回收称为Full GC（HotSpot VM里，除了CMS之外，其它能收集老年代的GC都会同时收集整个GC堆，包括新生代）。\n\n③ 永久代（Perm Generation）：主要存放元数据，例如Class、Method的元信息，与垃圾回收要回收的Java对象关系不大。相对于新生代和年老代来说，该区域的划分对垃圾回收影响比较小。\n\n---\n默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。\n老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。\n默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。\nJVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。\n因此，新生代实际可用的内存空间为 9/10 ( 即90% )的新生代空间。\n\n参考:\nhttps://blog.csdn.net/YHYR_YCY/article/details/52566105\nhttps://tech.meituan.com/jvm_optimize.html\n\n---\n##GC\n垃圾回收统计信息\n```\n-XX:+PrintGC \n-XX:+PrintGCDetails \n-XX:+PrintGCTimeStamps \n-Xloggc:filename\n```\n参考:https://blog.csdn.net/renfufei/article/details/49230943\n##JVM参数\n```\n-Xmx   Java Heap最大值，默认值为物理内存的1/4，最佳设值应该视物理内存大小及计算机内其他内存开销而定；\n\n-Xms   Java Heap初始值，Server端JVM最好将-Xms和-Xmx设为相同值，开发测试机JVM可以保留默认值；\n\n-Xmn   Java Heap Young区大小，不熟悉最好保留默认值；\n\n-Xss   每个线程的Stack大小，不熟悉最好保留默认值；\n```\n参考:https://blog.csdn.net/sdujava2011/article/details/50086933\n","source":"_posts/JVM.md","raw":"---\ntitle: JVM\ncategories :\n- 技术\ntags :\n- Java\n---\n\n\n![](JVM/JVM.png)\n  \n 方法区和Java堆都是内存共享,方法区又被称为非堆(Non-Heap).又称为“永久带”.\n \n### 1.程序计数器：\n线程私有。是一块较小的内存，是当前线程所执行的字节码的行号指示器。是Java虚拟机规范中唯一没有规定OOM（OutOfMemoryError）的区域。\n\n### 2.Java栈：\n线程私有。生命周期和线程相同。是Java方法执行的内存模型。执行每个方法都会创建一个栈帧，用于存储局部变量和操作数（对象引用）。局部变量所需要的内存空间大小在编译期间完成分配。所以栈帧的大小不会改变。存在两种异常情况：若线程请求深度大于栈的深度，抛StackOverflowError。若栈在动态扩展时无法请求足够内存，抛OOM。\n\n### 3.Java堆：\n所有线程共享。虚拟机启动时创建。存放对象实力和数组。所占内存最大。分为新生代（Young区），老年代（Old区）。新生代分Eden区，Servior区。Servior区又分为From space区和To Space区。Eden区和Servior区的内存比为8:1。 当扩展内存大于可用内存，抛OOM。\n\n### 4.方法区：\n所有线程共享。用于存储已被虚拟机加载的类信息、常量、静态变量等数据。又称为非堆（Non—Heap）。方法区又称“永久代”。GC很少在这个区域进行，但不代表不会回收。这个区域回收目标主要是针对常量池的回收和对类型的卸载。当内存申请大于实际可用内存，抛OOM。\n\n### 5.本地方法栈：\n线程私有。与Java栈类似，但是不是为Java方法（字节码）服务，而是为本地非Java方法服务。也会抛StackOverflowError和OOM。\n\n---\n\nHotspot VM将内存划分为不同的物理区，就是“分代”思想的体现。如图所示，JVM内存主要由新生代、老年代、永久代构成。\n\nGC影响\n\n① 新生代（Young Generation）：大多数对象在新生代中被创建，其中很多对象的生命周期很短。每次新生代的垃圾回收（又称Minor GC）后只有少量对象存活，所以选用复制算法，只需要少量的复制成本就可以完成回收。\n\n新生代内又分三个区：一个Eden区，两个Survivor区（一般而言），大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到两个Survivor区（中的一个）。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被复制到另外一个Survivor区。对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被放到老年代，这个过程也称为“晋升”。显然，“晋升年龄阈值”的大小直接影响着对象在新生代中的停留时间，在Serial和ParNew GC两种回收器中，“晋升年龄阈值”通过参数MaxTenuringThreshold设定，默认值为15。\n\n② 老年代（Old Generation）：在新生代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称Major GC）通常使用“标记-清理”或“标记-整理”算法。整堆包括新生代和老年代的垃圾回收称为Full GC（HotSpot VM里，除了CMS之外，其它能收集老年代的GC都会同时收集整个GC堆，包括新生代）。\n\n③ 永久代（Perm Generation）：主要存放元数据，例如Class、Method的元信息，与垃圾回收要回收的Java对象关系不大。相对于新生代和年老代来说，该区域的划分对垃圾回收影响比较小。\n\n---\n默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。\n老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。\n默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。\nJVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。\n因此，新生代实际可用的内存空间为 9/10 ( 即90% )的新生代空间。\n\n参考:\nhttps://blog.csdn.net/YHYR_YCY/article/details/52566105\nhttps://tech.meituan.com/jvm_optimize.html\n\n---\n##GC\n垃圾回收统计信息\n```\n-XX:+PrintGC \n-XX:+PrintGCDetails \n-XX:+PrintGCTimeStamps \n-Xloggc:filename\n```\n参考:https://blog.csdn.net/renfufei/article/details/49230943\n##JVM参数\n```\n-Xmx   Java Heap最大值，默认值为物理内存的1/4，最佳设值应该视物理内存大小及计算机内其他内存开销而定；\n\n-Xms   Java Heap初始值，Server端JVM最好将-Xms和-Xmx设为相同值，开发测试机JVM可以保留默认值；\n\n-Xmn   Java Heap Young区大小，不熟悉最好保留默认值；\n\n-Xss   每个线程的Stack大小，不熟悉最好保留默认值；\n```\n参考:https://blog.csdn.net/sdujava2011/article/details/50086933\n","slug":"JVM","published":1,"date":"2019-05-21T02:36:43.908Z","updated":"2019-05-21T02:36:43.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbrb001um74z88at5o24","content":"<p><img src=\"/2019/05/21/JVM/JVM.png\" alt=\"\"></p>\n<p> 方法区和Java堆都是内存共享,方法区又被称为非堆(Non-Heap).又称为“永久带”.</p>\n<h3 id=\"1-程序计数器：\"><a href=\"#1-程序计数器：\" class=\"headerlink\" title=\"1.程序计数器：\"></a>1.程序计数器：</h3><p>线程私有。是一块较小的内存，是当前线程所执行的字节码的行号指示器。是Java虚拟机规范中唯一没有规定OOM（OutOfMemoryError）的区域。</p>\n<h3 id=\"2-Java栈：\"><a href=\"#2-Java栈：\" class=\"headerlink\" title=\"2.Java栈：\"></a>2.Java栈：</h3><p>线程私有。生命周期和线程相同。是Java方法执行的内存模型。执行每个方法都会创建一个栈帧，用于存储局部变量和操作数（对象引用）。局部变量所需要的内存空间大小在编译期间完成分配。所以栈帧的大小不会改变。存在两种异常情况：若线程请求深度大于栈的深度，抛StackOverflowError。若栈在动态扩展时无法请求足够内存，抛OOM。</p>\n<h3 id=\"3-Java堆：\"><a href=\"#3-Java堆：\" class=\"headerlink\" title=\"3.Java堆：\"></a>3.Java堆：</h3><p>所有线程共享。虚拟机启动时创建。存放对象实力和数组。所占内存最大。分为新生代（Young区），老年代（Old区）。新生代分Eden区，Servior区。Servior区又分为From space区和To Space区。Eden区和Servior区的内存比为8:1。 当扩展内存大于可用内存，抛OOM。</p>\n<h3 id=\"4-方法区：\"><a href=\"#4-方法区：\" class=\"headerlink\" title=\"4.方法区：\"></a>4.方法区：</h3><p>所有线程共享。用于存储已被虚拟机加载的类信息、常量、静态变量等数据。又称为非堆（Non—Heap）。方法区又称“永久代”。GC很少在这个区域进行，但不代表不会回收。这个区域回收目标主要是针对常量池的回收和对类型的卸载。当内存申请大于实际可用内存，抛OOM。</p>\n<h3 id=\"5-本地方法栈：\"><a href=\"#5-本地方法栈：\" class=\"headerlink\" title=\"5.本地方法栈：\"></a>5.本地方法栈：</h3><p>线程私有。与Java栈类似，但是不是为Java方法（字节码）服务，而是为本地非Java方法服务。也会抛StackOverflowError和OOM。</p>\n<hr>\n<p>Hotspot VM将内存划分为不同的物理区，就是“分代”思想的体现。如图所示，JVM内存主要由新生代、老年代、永久代构成。</p>\n<p>GC影响</p>\n<p>① 新生代（Young Generation）：大多数对象在新生代中被创建，其中很多对象的生命周期很短。每次新生代的垃圾回收（又称Minor GC）后只有少量对象存活，所以选用复制算法，只需要少量的复制成本就可以完成回收。</p>\n<p>新生代内又分三个区：一个Eden区，两个Survivor区（一般而言），大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到两个Survivor区（中的一个）。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被复制到另外一个Survivor区。对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被放到老年代，这个过程也称为“晋升”。显然，“晋升年龄阈值”的大小直接影响着对象在新生代中的停留时间，在Serial和ParNew GC两种回收器中，“晋升年龄阈值”通过参数MaxTenuringThreshold设定，默认值为15。</p>\n<p>② 老年代（Old Generation）：在新生代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称Major GC）通常使用“标记-清理”或“标记-整理”算法。整堆包括新生代和老年代的垃圾回收称为Full GC（HotSpot VM里，除了CMS之外，其它能收集老年代的GC都会同时收集整个GC堆，包括新生代）。</p>\n<p>③ 永久代（Perm Generation）：主要存放元数据，例如Class、Method的元信息，与垃圾回收要回收的Java对象关系不大。相对于新生代和年老代来说，该区域的划分对垃圾回收影响比较小。</p>\n<hr>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。<br>老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。<br>默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。<br>JVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。<br>因此，新生代实际可用的内存空间为 9/10 ( 即90% )的新生代空间。</p>\n<p>参考:<br><a href=\"https://blog.csdn.net/YHYR_YCY/article/details/52566105\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/YHYR_YCY/article/details/52566105</a><br><a href=\"https://tech.meituan.com/jvm_optimize.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/jvm_optimize.html</a></p>\n<hr>\n<p>##GC<br>垃圾回收统计信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-XX:+PrintGC </span><br><span class=\"line\">-XX:+PrintGCDetails </span><br><span class=\"line\">-XX:+PrintGCTimeStamps </span><br><span class=\"line\">-Xloggc:filename</span><br></pre></td></tr></table></figure></p>\n<p>参考:<a href=\"https://blog.csdn.net/renfufei/article/details/49230943\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/renfufei/article/details/49230943</a></p>\n<p>##JVM参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xmx   Java Heap最大值，默认值为物理内存的1/4，最佳设值应该视物理内存大小及计算机内其他内存开销而定；</span><br><span class=\"line\"></span><br><span class=\"line\">-Xms   Java Heap初始值，Server端JVM最好将-Xms和-Xmx设为相同值，开发测试机JVM可以保留默认值；</span><br><span class=\"line\"></span><br><span class=\"line\">-Xmn   Java Heap Young区大小，不熟悉最好保留默认值；</span><br><span class=\"line\"></span><br><span class=\"line\">-Xss   每个线程的Stack大小，不熟悉最好保留默认值；</span><br></pre></td></tr></table></figure></p>\n<p>参考:<a href=\"https://blog.csdn.net/sdujava2011/article/details/50086933\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sdujava2011/article/details/50086933</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2019/05/21/JVM/JVM.png\" alt=\"\"></p>\n<p> 方法区和Java堆都是内存共享,方法区又被称为非堆(Non-Heap).又称为“永久带”.</p>\n<h3 id=\"1-程序计数器：\"><a href=\"#1-程序计数器：\" class=\"headerlink\" title=\"1.程序计数器：\"></a>1.程序计数器：</h3><p>线程私有。是一块较小的内存，是当前线程所执行的字节码的行号指示器。是Java虚拟机规范中唯一没有规定OOM（OutOfMemoryError）的区域。</p>\n<h3 id=\"2-Java栈：\"><a href=\"#2-Java栈：\" class=\"headerlink\" title=\"2.Java栈：\"></a>2.Java栈：</h3><p>线程私有。生命周期和线程相同。是Java方法执行的内存模型。执行每个方法都会创建一个栈帧，用于存储局部变量和操作数（对象引用）。局部变量所需要的内存空间大小在编译期间完成分配。所以栈帧的大小不会改变。存在两种异常情况：若线程请求深度大于栈的深度，抛StackOverflowError。若栈在动态扩展时无法请求足够内存，抛OOM。</p>\n<h3 id=\"3-Java堆：\"><a href=\"#3-Java堆：\" class=\"headerlink\" title=\"3.Java堆：\"></a>3.Java堆：</h3><p>所有线程共享。虚拟机启动时创建。存放对象实力和数组。所占内存最大。分为新生代（Young区），老年代（Old区）。新生代分Eden区，Servior区。Servior区又分为From space区和To Space区。Eden区和Servior区的内存比为8:1。 当扩展内存大于可用内存，抛OOM。</p>\n<h3 id=\"4-方法区：\"><a href=\"#4-方法区：\" class=\"headerlink\" title=\"4.方法区：\"></a>4.方法区：</h3><p>所有线程共享。用于存储已被虚拟机加载的类信息、常量、静态变量等数据。又称为非堆（Non—Heap）。方法区又称“永久代”。GC很少在这个区域进行，但不代表不会回收。这个区域回收目标主要是针对常量池的回收和对类型的卸载。当内存申请大于实际可用内存，抛OOM。</p>\n<h3 id=\"5-本地方法栈：\"><a href=\"#5-本地方法栈：\" class=\"headerlink\" title=\"5.本地方法栈：\"></a>5.本地方法栈：</h3><p>线程私有。与Java栈类似，但是不是为Java方法（字节码）服务，而是为本地非Java方法服务。也会抛StackOverflowError和OOM。</p>\n<hr>\n<p>Hotspot VM将内存划分为不同的物理区，就是“分代”思想的体现。如图所示，JVM内存主要由新生代、老年代、永久代构成。</p>\n<p>GC影响</p>\n<p>① 新生代（Young Generation）：大多数对象在新生代中被创建，其中很多对象的生命周期很短。每次新生代的垃圾回收（又称Minor GC）后只有少量对象存活，所以选用复制算法，只需要少量的复制成本就可以完成回收。</p>\n<p>新生代内又分三个区：一个Eden区，两个Survivor区（一般而言），大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到两个Survivor区（中的一个）。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被复制到另外一个Survivor区。对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被放到老年代，这个过程也称为“晋升”。显然，“晋升年龄阈值”的大小直接影响着对象在新生代中的停留时间，在Serial和ParNew GC两种回收器中，“晋升年龄阈值”通过参数MaxTenuringThreshold设定，默认值为15。</p>\n<p>② 老年代（Old Generation）：在新生代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称Major GC）通常使用“标记-清理”或“标记-整理”算法。整堆包括新生代和老年代的垃圾回收称为Full GC（HotSpot VM里，除了CMS之外，其它能收集老年代的GC都会同时收集整个GC堆，包括新生代）。</p>\n<p>③ 永久代（Perm Generation）：主要存放元数据，例如Class、Method的元信息，与垃圾回收要回收的Java对象关系不大。相对于新生代和年老代来说，该区域的划分对垃圾回收影响比较小。</p>\n<hr>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。<br>老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。<br>默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。<br>JVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。<br>因此，新生代实际可用的内存空间为 9/10 ( 即90% )的新生代空间。</p>\n<p>参考:<br><a href=\"https://blog.csdn.net/YHYR_YCY/article/details/52566105\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/YHYR_YCY/article/details/52566105</a><br><a href=\"https://tech.meituan.com/jvm_optimize.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/jvm_optimize.html</a></p>\n<hr>\n<p>##GC<br>垃圾回收统计信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-XX:+PrintGC </span><br><span class=\"line\">-XX:+PrintGCDetails </span><br><span class=\"line\">-XX:+PrintGCTimeStamps </span><br><span class=\"line\">-Xloggc:filename</span><br></pre></td></tr></table></figure></p>\n<p>参考:<a href=\"https://blog.csdn.net/renfufei/article/details/49230943\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/renfufei/article/details/49230943</a></p>\n<p>##JVM参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xmx   Java Heap最大值，默认值为物理内存的1/4，最佳设值应该视物理内存大小及计算机内其他内存开销而定；</span><br><span class=\"line\"></span><br><span class=\"line\">-Xms   Java Heap初始值，Server端JVM最好将-Xms和-Xmx设为相同值，开发测试机JVM可以保留默认值；</span><br><span class=\"line\"></span><br><span class=\"line\">-Xmn   Java Heap Young区大小，不熟悉最好保留默认值；</span><br><span class=\"line\"></span><br><span class=\"line\">-Xss   每个线程的Stack大小，不熟悉最好保留默认值；</span><br></pre></td></tr></table></figure></p>\n<p>参考:<a href=\"https://blog.csdn.net/sdujava2011/article/details/50086933\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sdujava2011/article/details/50086933</a></p>\n"},{"title":"KCP协议","_content":"\nKCP是一个快速可靠协议,它设计的主要目的师稳了解决在网络拥堵的情况下TCP协议网络速度慢的问题,增大网络传输速率,但相对TCP,会相应的牺牲一部分带宽.\nKCP没有规定下车呢个传输协议,一般用UDP作为下层协议.KCP层在UDP的数据报文的基础上增加控制头.当用户数据很大,大于一个UDP包能承担的范围时(大于MSS),KCP会将用户的数据分片存储在多个KCP包中.每个KCP包称为一个分片.\n\n### 一些网络协议的基本概念\n####超时与重传\n发送数据包在一定的时间内没有接收到相应的ACK,等待一定的事件,超时之后就认为这个数据包丢失,就会重新发送.这个等待的事件称为RTO,即重传超时时间.\n####滑动窗口\n TCP通过确认机制来保证数据传输的可靠性,在早起的时候,发送数据方会在发送数据之后启动定时器,在一定时间内,如果没有收到发送数据包的ACK报文,就会重新发送数据,知道发送成功为止.但这种停等的机制必须等待确认之后才能发送下一个包,传输速度比较慢.\n 为了提高传输速度,发送方不必再每发送一个包之后就进行等待确认,而是发送多个包出去,然后等待接收方一一确认.但是接收方不可能同时处理无限多的数据,因此需要发送方往网络中发送的数据数量.接收方在未收到确认之前,发送方只能发送wnd大小的额数据,这个机制叫做滑动窗口机制.tcp每一端都可以收发数据,每个TCP连接的两端都维护一个发送窗口和接受窗口结构.\n#### KCP结构字段的含义\nsnd_una:第一个未确认的包\nsnd_nxt:下一个等待分配的包的序号\n\n####_KCP通过以下方式提高速率_\n1. RTO\n TCP的RTO是以2倍的方式来计算的,当丢包的次数多的时候,重传超时的RTO就非常非常的大了,重传就非常慢,效率低,性能差.而KCP的RTO可以以1.5倍的速度增长,相对于TCP来说,有更短的重传时间.\n\n2. 快速重传机制——无延迟ACK回复模式\n 假如开启KCP的快速重传机制,并且设置了当重复的ACK个数数大于resend时候，直接进行重传。 当发送端发送了1,2,3,4,5五个包，然后收到远端的ACK：1,3,4,5。当收到ACK3时，KCP知道2被跳过1次，当收到ACK4的时候，KCP知道2被跳过2次，当次数大于等于设置的resend的值的时候，不用等到超时，可直接重传2号包。这就是KCP的快速重传机制。\n3. 选择重传 \nKCP采用滑动窗口机制来提高发送速度。由于UDP是不可靠的传输方式，会存在丢包和薄、包的乱序。而KCP是可靠的且保证数据有序的协议。为了保证包的顺序，接收方会维护一个接收窗口，接收窗口有一个起始序号 rcv_nxt（待接收消息序号）以及尾序号 rcv_nxt + rcv_wnd（接收窗口大小）。如果接收窗口收到序号为 rcv_nxt 的分片（刚好是接收端待接收的消息序号），那么 rcv_nxt 就加一，也就是滑动窗口右移，并把该数据放入接收队列供应用层取用。如果收到的数据在窗口范围内但不是 rcv_nxt ，那么就把数据保存起来，等收到rcv_nxt序号的分片时再一并放入接收队列供应用层取用。 \n当丢包发生的时候，假设第n个包丢失了，但是第n+1,n+2个包都已经传输成功了，此时只重传第n个包，二部重传成功传输的n+1,n+2号包，这就是选择重传。为了能够做到选择重传，接收方需要告诉发送方哪些包它收到了。比如在返回的ACK中包含rcv_nxt和sn，rcv_nxt的含义是接收方已经成功按顺序接收了rcv_nxt序号之前的所有包，大于rcv_nxt的序号sn表示的是在接收窗口内的不连续的包。那么根据这两个参数就可以计算出哪些包没有收到了。发送方接收到接收方发过来的数据时，首先解析rcv_nxt，把所有小于rcv_nxt序号的包从发送缓存队列中移除。然后再解析sn（大于rcv_nxt），遍历发送缓存队列，找到所有序号小于sn的包，根据我们设置的快速重传的门限，对每个分片维护一个快速重传的计数，每收到一个ack解析sn后找到了一个分片，就把该分片的快速重传的计数加一，如果该计数达到了快速重传门限，那么就认为该分片已经丢失，可以触发快速重传，该门限值在kcp中可以设置。 \n4. 拥塞窗口 \n当网络状态不好的时候，KCP会限制发送端发送的数据量，这就是拥塞控制。拥塞窗口（cwnd）会随着网络状态的变化而变化。这里采用了慢启动机制，慢启动也就是控制拥塞窗口从0开始增长，在每收到一个报文段确认后，把拥塞窗口加1，多增加一个MSS的数值。但是为了防止拥塞窗口过大引起网络阻塞，还需要设置一个慢机制的的门限（ssthresh即拥塞窗口的阈值）。当拥塞窗口增长到阈值以后，就减慢增长速度，缓慢增长。 \n但是当网络很拥堵的情况下，导致发送数据出现重传时，这时说明网络中消息太多了，用户应该减少发送的数据，也就是拥塞窗口应该减小。怎么减小呢，在快速重传的情况下，有包丢失了但是有后续的包收到了，说明网络还是通的，这时采取拥塞窗口的退半避让,拥塞窗口减半，拥塞门限减半。减小网络流量，缓解拥堵。当出现超时重传的时候，说明网络很可能死掉了，因为超时重传会出现，原因是有包丢失了，并且该包之后的包也没有收到，这很有可能是网络死了，这时候，拥塞窗口直接变为1，不再发送新的数据，直到丢失的包传输成功。 \n\n\n参考:https://blog.csdn.net/qq_36748278/article/details/80171575\n","source":"_posts/KCP协议.md","raw":"---\ntitle: KCP协议\ncategories :\n- 技术\ntags :\n- kcp \n- 网络\n---\n\nKCP是一个快速可靠协议,它设计的主要目的师稳了解决在网络拥堵的情况下TCP协议网络速度慢的问题,增大网络传输速率,但相对TCP,会相应的牺牲一部分带宽.\nKCP没有规定下车呢个传输协议,一般用UDP作为下层协议.KCP层在UDP的数据报文的基础上增加控制头.当用户数据很大,大于一个UDP包能承担的范围时(大于MSS),KCP会将用户的数据分片存储在多个KCP包中.每个KCP包称为一个分片.\n\n### 一些网络协议的基本概念\n####超时与重传\n发送数据包在一定的时间内没有接收到相应的ACK,等待一定的事件,超时之后就认为这个数据包丢失,就会重新发送.这个等待的事件称为RTO,即重传超时时间.\n####滑动窗口\n TCP通过确认机制来保证数据传输的可靠性,在早起的时候,发送数据方会在发送数据之后启动定时器,在一定时间内,如果没有收到发送数据包的ACK报文,就会重新发送数据,知道发送成功为止.但这种停等的机制必须等待确认之后才能发送下一个包,传输速度比较慢.\n 为了提高传输速度,发送方不必再每发送一个包之后就进行等待确认,而是发送多个包出去,然后等待接收方一一确认.但是接收方不可能同时处理无限多的数据,因此需要发送方往网络中发送的数据数量.接收方在未收到确认之前,发送方只能发送wnd大小的额数据,这个机制叫做滑动窗口机制.tcp每一端都可以收发数据,每个TCP连接的两端都维护一个发送窗口和接受窗口结构.\n#### KCP结构字段的含义\nsnd_una:第一个未确认的包\nsnd_nxt:下一个等待分配的包的序号\n\n####_KCP通过以下方式提高速率_\n1. RTO\n TCP的RTO是以2倍的方式来计算的,当丢包的次数多的时候,重传超时的RTO就非常非常的大了,重传就非常慢,效率低,性能差.而KCP的RTO可以以1.5倍的速度增长,相对于TCP来说,有更短的重传时间.\n\n2. 快速重传机制——无延迟ACK回复模式\n 假如开启KCP的快速重传机制,并且设置了当重复的ACK个数数大于resend时候，直接进行重传。 当发送端发送了1,2,3,4,5五个包，然后收到远端的ACK：1,3,4,5。当收到ACK3时，KCP知道2被跳过1次，当收到ACK4的时候，KCP知道2被跳过2次，当次数大于等于设置的resend的值的时候，不用等到超时，可直接重传2号包。这就是KCP的快速重传机制。\n3. 选择重传 \nKCP采用滑动窗口机制来提高发送速度。由于UDP是不可靠的传输方式，会存在丢包和薄、包的乱序。而KCP是可靠的且保证数据有序的协议。为了保证包的顺序，接收方会维护一个接收窗口，接收窗口有一个起始序号 rcv_nxt（待接收消息序号）以及尾序号 rcv_nxt + rcv_wnd（接收窗口大小）。如果接收窗口收到序号为 rcv_nxt 的分片（刚好是接收端待接收的消息序号），那么 rcv_nxt 就加一，也就是滑动窗口右移，并把该数据放入接收队列供应用层取用。如果收到的数据在窗口范围内但不是 rcv_nxt ，那么就把数据保存起来，等收到rcv_nxt序号的分片时再一并放入接收队列供应用层取用。 \n当丢包发生的时候，假设第n个包丢失了，但是第n+1,n+2个包都已经传输成功了，此时只重传第n个包，二部重传成功传输的n+1,n+2号包，这就是选择重传。为了能够做到选择重传，接收方需要告诉发送方哪些包它收到了。比如在返回的ACK中包含rcv_nxt和sn，rcv_nxt的含义是接收方已经成功按顺序接收了rcv_nxt序号之前的所有包，大于rcv_nxt的序号sn表示的是在接收窗口内的不连续的包。那么根据这两个参数就可以计算出哪些包没有收到了。发送方接收到接收方发过来的数据时，首先解析rcv_nxt，把所有小于rcv_nxt序号的包从发送缓存队列中移除。然后再解析sn（大于rcv_nxt），遍历发送缓存队列，找到所有序号小于sn的包，根据我们设置的快速重传的门限，对每个分片维护一个快速重传的计数，每收到一个ack解析sn后找到了一个分片，就把该分片的快速重传的计数加一，如果该计数达到了快速重传门限，那么就认为该分片已经丢失，可以触发快速重传，该门限值在kcp中可以设置。 \n4. 拥塞窗口 \n当网络状态不好的时候，KCP会限制发送端发送的数据量，这就是拥塞控制。拥塞窗口（cwnd）会随着网络状态的变化而变化。这里采用了慢启动机制，慢启动也就是控制拥塞窗口从0开始增长，在每收到一个报文段确认后，把拥塞窗口加1，多增加一个MSS的数值。但是为了防止拥塞窗口过大引起网络阻塞，还需要设置一个慢机制的的门限（ssthresh即拥塞窗口的阈值）。当拥塞窗口增长到阈值以后，就减慢增长速度，缓慢增长。 \n但是当网络很拥堵的情况下，导致发送数据出现重传时，这时说明网络中消息太多了，用户应该减少发送的数据，也就是拥塞窗口应该减小。怎么减小呢，在快速重传的情况下，有包丢失了但是有后续的包收到了，说明网络还是通的，这时采取拥塞窗口的退半避让,拥塞窗口减半，拥塞门限减半。减小网络流量，缓解拥堵。当出现超时重传的时候，说明网络很可能死掉了，因为超时重传会出现，原因是有包丢失了，并且该包之后的包也没有收到，这很有可能是网络死了，这时候，拥塞窗口直接变为1，不再发送新的数据，直到丢失的包传输成功。 \n\n\n参考:https://blog.csdn.net/qq_36748278/article/details/80171575\n","slug":"KCP协议","published":1,"date":"2019-05-21T02:36:43.910Z","updated":"2019-05-21T02:36:43.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbrd001xm74zkyarlwq4","content":"<p>KCP是一个快速可靠协议,它设计的主要目的师稳了解决在网络拥堵的情况下TCP协议网络速度慢的问题,增大网络传输速率,但相对TCP,会相应的牺牲一部分带宽.<br>KCP没有规定下车呢个传输协议,一般用UDP作为下层协议.KCP层在UDP的数据报文的基础上增加控制头.当用户数据很大,大于一个UDP包能承担的范围时(大于MSS),KCP会将用户的数据分片存储在多个KCP包中.每个KCP包称为一个分片.</p>\n<h3 id=\"一些网络协议的基本概念\"><a href=\"#一些网络协议的基本概念\" class=\"headerlink\" title=\"一些网络协议的基本概念\"></a>一些网络协议的基本概念</h3><p>####超时与重传<br>发送数据包在一定的时间内没有接收到相应的ACK,等待一定的事件,超时之后就认为这个数据包丢失,就会重新发送.这个等待的事件称为RTO,即重传超时时间.</p>\n<p>####滑动窗口<br> TCP通过确认机制来保证数据传输的可靠性,在早起的时候,发送数据方会在发送数据之后启动定时器,在一定时间内,如果没有收到发送数据包的ACK报文,就会重新发送数据,知道发送成功为止.但这种停等的机制必须等待确认之后才能发送下一个包,传输速度比较慢.<br> 为了提高传输速度,发送方不必再每发送一个包之后就进行等待确认,而是发送多个包出去,然后等待接收方一一确认.但是接收方不可能同时处理无限多的数据,因此需要发送方往网络中发送的数据数量.接收方在未收到确认之前,发送方只能发送wnd大小的额数据,这个机制叫做滑动窗口机制.tcp每一端都可以收发数据,每个TCP连接的两端都维护一个发送窗口和接受窗口结构.</p>\n<h4 id=\"KCP结构字段的含义\"><a href=\"#KCP结构字段的含义\" class=\"headerlink\" title=\"KCP结构字段的含义\"></a>KCP结构字段的含义</h4><p>snd_una:第一个未确认的包<br>snd_nxt:下一个等待分配的包的序号</p>\n<p>####<em>KCP通过以下方式提高速率</em></p>\n<ol>\n<li><p>RTO<br>TCP的RTO是以2倍的方式来计算的,当丢包的次数多的时候,重传超时的RTO就非常非常的大了,重传就非常慢,效率低,性能差.而KCP的RTO可以以1.5倍的速度增长,相对于TCP来说,有更短的重传时间.</p>\n</li>\n<li><p>快速重传机制——无延迟ACK回复模式<br>假如开启KCP的快速重传机制,并且设置了当重复的ACK个数数大于resend时候，直接进行重传。 当发送端发送了1,2,3,4,5五个包，然后收到远端的ACK：1,3,4,5。当收到ACK3时，KCP知道2被跳过1次，当收到ACK4的时候，KCP知道2被跳过2次，当次数大于等于设置的resend的值的时候，不用等到超时，可直接重传2号包。这就是KCP的快速重传机制。</p>\n</li>\n<li>选择重传<br>KCP采用滑动窗口机制来提高发送速度。由于UDP是不可靠的传输方式，会存在丢包和薄、包的乱序。而KCP是可靠的且保证数据有序的协议。为了保证包的顺序，接收方会维护一个接收窗口，接收窗口有一个起始序号 rcv_nxt（待接收消息序号）以及尾序号 rcv_nxt + rcv_wnd（接收窗口大小）。如果接收窗口收到序号为 rcv_nxt 的分片（刚好是接收端待接收的消息序号），那么 rcv_nxt 就加一，也就是滑动窗口右移，并把该数据放入接收队列供应用层取用。如果收到的数据在窗口范围内但不是 rcv_nxt ，那么就把数据保存起来，等收到rcv_nxt序号的分片时再一并放入接收队列供应用层取用。<br>当丢包发生的时候，假设第n个包丢失了，但是第n+1,n+2个包都已经传输成功了，此时只重传第n个包，二部重传成功传输的n+1,n+2号包，这就是选择重传。为了能够做到选择重传，接收方需要告诉发送方哪些包它收到了。比如在返回的ACK中包含rcv_nxt和sn，rcv_nxt的含义是接收方已经成功按顺序接收了rcv_nxt序号之前的所有包，大于rcv_nxt的序号sn表示的是在接收窗口内的不连续的包。那么根据这两个参数就可以计算出哪些包没有收到了。发送方接收到接收方发过来的数据时，首先解析rcv_nxt，把所有小于rcv_nxt序号的包从发送缓存队列中移除。然后再解析sn（大于rcv_nxt），遍历发送缓存队列，找到所有序号小于sn的包，根据我们设置的快速重传的门限，对每个分片维护一个快速重传的计数，每收到一个ack解析sn后找到了一个分片，就把该分片的快速重传的计数加一，如果该计数达到了快速重传门限，那么就认为该分片已经丢失，可以触发快速重传，该门限值在kcp中可以设置。 </li>\n<li>拥塞窗口<br>当网络状态不好的时候，KCP会限制发送端发送的数据量，这就是拥塞控制。拥塞窗口（cwnd）会随着网络状态的变化而变化。这里采用了慢启动机制，慢启动也就是控制拥塞窗口从0开始增长，在每收到一个报文段确认后，把拥塞窗口加1，多增加一个MSS的数值。但是为了防止拥塞窗口过大引起网络阻塞，还需要设置一个慢机制的的门限（ssthresh即拥塞窗口的阈值）。当拥塞窗口增长到阈值以后，就减慢增长速度，缓慢增长。<br>但是当网络很拥堵的情况下，导致发送数据出现重传时，这时说明网络中消息太多了，用户应该减少发送的数据，也就是拥塞窗口应该减小。怎么减小呢，在快速重传的情况下，有包丢失了但是有后续的包收到了，说明网络还是通的，这时采取拥塞窗口的退半避让,拥塞窗口减半，拥塞门限减半。减小网络流量，缓解拥堵。当出现超时重传的时候，说明网络很可能死掉了，因为超时重传会出现，原因是有包丢失了，并且该包之后的包也没有收到，这很有可能是网络死了，这时候，拥塞窗口直接变为1，不再发送新的数据，直到丢失的包传输成功。 </li>\n</ol>\n<p>参考:<a href=\"https://blog.csdn.net/qq_36748278/article/details/80171575\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36748278/article/details/80171575</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>KCP是一个快速可靠协议,它设计的主要目的师稳了解决在网络拥堵的情况下TCP协议网络速度慢的问题,增大网络传输速率,但相对TCP,会相应的牺牲一部分带宽.<br>KCP没有规定下车呢个传输协议,一般用UDP作为下层协议.KCP层在UDP的数据报文的基础上增加控制头.当用户数据很大,大于一个UDP包能承担的范围时(大于MSS),KCP会将用户的数据分片存储在多个KCP包中.每个KCP包称为一个分片.</p>\n<h3 id=\"一些网络协议的基本概念\"><a href=\"#一些网络协议的基本概念\" class=\"headerlink\" title=\"一些网络协议的基本概念\"></a>一些网络协议的基本概念</h3><p>####超时与重传<br>发送数据包在一定的时间内没有接收到相应的ACK,等待一定的事件,超时之后就认为这个数据包丢失,就会重新发送.这个等待的事件称为RTO,即重传超时时间.</p>\n<p>####滑动窗口<br> TCP通过确认机制来保证数据传输的可靠性,在早起的时候,发送数据方会在发送数据之后启动定时器,在一定时间内,如果没有收到发送数据包的ACK报文,就会重新发送数据,知道发送成功为止.但这种停等的机制必须等待确认之后才能发送下一个包,传输速度比较慢.<br> 为了提高传输速度,发送方不必再每发送一个包之后就进行等待确认,而是发送多个包出去,然后等待接收方一一确认.但是接收方不可能同时处理无限多的数据,因此需要发送方往网络中发送的数据数量.接收方在未收到确认之前,发送方只能发送wnd大小的额数据,这个机制叫做滑动窗口机制.tcp每一端都可以收发数据,每个TCP连接的两端都维护一个发送窗口和接受窗口结构.</p>\n<h4 id=\"KCP结构字段的含义\"><a href=\"#KCP结构字段的含义\" class=\"headerlink\" title=\"KCP结构字段的含义\"></a>KCP结构字段的含义</h4><p>snd_una:第一个未确认的包<br>snd_nxt:下一个等待分配的包的序号</p>\n<p>####<em>KCP通过以下方式提高速率</em></p>\n<ol>\n<li><p>RTO<br>TCP的RTO是以2倍的方式来计算的,当丢包的次数多的时候,重传超时的RTO就非常非常的大了,重传就非常慢,效率低,性能差.而KCP的RTO可以以1.5倍的速度增长,相对于TCP来说,有更短的重传时间.</p>\n</li>\n<li><p>快速重传机制——无延迟ACK回复模式<br>假如开启KCP的快速重传机制,并且设置了当重复的ACK个数数大于resend时候，直接进行重传。 当发送端发送了1,2,3,4,5五个包，然后收到远端的ACK：1,3,4,5。当收到ACK3时，KCP知道2被跳过1次，当收到ACK4的时候，KCP知道2被跳过2次，当次数大于等于设置的resend的值的时候，不用等到超时，可直接重传2号包。这就是KCP的快速重传机制。</p>\n</li>\n<li>选择重传<br>KCP采用滑动窗口机制来提高发送速度。由于UDP是不可靠的传输方式，会存在丢包和薄、包的乱序。而KCP是可靠的且保证数据有序的协议。为了保证包的顺序，接收方会维护一个接收窗口，接收窗口有一个起始序号 rcv_nxt（待接收消息序号）以及尾序号 rcv_nxt + rcv_wnd（接收窗口大小）。如果接收窗口收到序号为 rcv_nxt 的分片（刚好是接收端待接收的消息序号），那么 rcv_nxt 就加一，也就是滑动窗口右移，并把该数据放入接收队列供应用层取用。如果收到的数据在窗口范围内但不是 rcv_nxt ，那么就把数据保存起来，等收到rcv_nxt序号的分片时再一并放入接收队列供应用层取用。<br>当丢包发生的时候，假设第n个包丢失了，但是第n+1,n+2个包都已经传输成功了，此时只重传第n个包，二部重传成功传输的n+1,n+2号包，这就是选择重传。为了能够做到选择重传，接收方需要告诉发送方哪些包它收到了。比如在返回的ACK中包含rcv_nxt和sn，rcv_nxt的含义是接收方已经成功按顺序接收了rcv_nxt序号之前的所有包，大于rcv_nxt的序号sn表示的是在接收窗口内的不连续的包。那么根据这两个参数就可以计算出哪些包没有收到了。发送方接收到接收方发过来的数据时，首先解析rcv_nxt，把所有小于rcv_nxt序号的包从发送缓存队列中移除。然后再解析sn（大于rcv_nxt），遍历发送缓存队列，找到所有序号小于sn的包，根据我们设置的快速重传的门限，对每个分片维护一个快速重传的计数，每收到一个ack解析sn后找到了一个分片，就把该分片的快速重传的计数加一，如果该计数达到了快速重传门限，那么就认为该分片已经丢失，可以触发快速重传，该门限值在kcp中可以设置。 </li>\n<li>拥塞窗口<br>当网络状态不好的时候，KCP会限制发送端发送的数据量，这就是拥塞控制。拥塞窗口（cwnd）会随着网络状态的变化而变化。这里采用了慢启动机制，慢启动也就是控制拥塞窗口从0开始增长，在每收到一个报文段确认后，把拥塞窗口加1，多增加一个MSS的数值。但是为了防止拥塞窗口过大引起网络阻塞，还需要设置一个慢机制的的门限（ssthresh即拥塞窗口的阈值）。当拥塞窗口增长到阈值以后，就减慢增长速度，缓慢增长。<br>但是当网络很拥堵的情况下，导致发送数据出现重传时，这时说明网络中消息太多了，用户应该减少发送的数据，也就是拥塞窗口应该减小。怎么减小呢，在快速重传的情况下，有包丢失了但是有后续的包收到了，说明网络还是通的，这时采取拥塞窗口的退半避让,拥塞窗口减半，拥塞门限减半。减小网络流量，缓解拥堵。当出现超时重传的时候，说明网络很可能死掉了，因为超时重传会出现，原因是有包丢失了，并且该包之后的包也没有收到，这很有可能是网络死了，这时候，拥塞窗口直接变为1，不再发送新的数据，直到丢失的包传输成功。 </li>\n</ol>\n<p>参考:<a href=\"https://blog.csdn.net/qq_36748278/article/details/80171575\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36748278/article/details/80171575</a></p>\n"},{"title":"Mina nextFilter","_content":"\nmina中nextFilter是不一定代表的是在filterChain中的下一个filter,在 DefaultIoFilterChain中,EntryImpl是一个内部类,源码如下:\n```\nprivate final class EntryImpl implements Entry {\n        private EntryImpl prevEntry;\n\n        private EntryImpl nextEntry;\n\n        private final String name;\n\n        private IoFilter filter;\n\n        private final NextFilter nextFilter;\n\n        private EntryImpl(EntryImpl prevEntry, EntryImpl nextEntry, String name, IoFilter filter) {\n            if (filter == null) {\n                throw new IllegalArgumentException(\"filter\");\n            }\n\n            if (name == null) {\n                throw new IllegalArgumentException(\"name\");\n            }\n\n            this.prevEntry = prevEntry;\n            this.nextEntry = nextEntry;\n            this.name = name;\n            this.filter = filter;\n            this.nextFilter = new NextFilter() {\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void sessionCreated(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionCreated(nextEntry, session);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void sessionOpened(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionOpened(nextEntry, session);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void sessionClosed(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionClosed(nextEntry, session);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void sessionIdle(IoSession session, IdleStatus status) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionIdle(nextEntry, session, status);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void exceptionCaught(IoSession session, Throwable cause) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextExceptionCaught(nextEntry, session, cause);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void inputClosed(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextInputClosed(nextEntry, session);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void messageReceived(IoSession session, Object message) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextMessageReceived(nextEntry, session, message);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void messageSent(IoSession session, WriteRequest writeRequest) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextMessageSent(nextEntry, session, writeRequest);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void filterWrite(IoSession session, WriteRequest writeRequest) {\n                    Entry nextEntry = EntryImpl.this.prevEntry;\n                    callPreviousFilterWrite(nextEntry, session, writeRequest);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void filterClose(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.prevEntry;\n                    callPreviousFilterClose(nextEntry, session);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public String toString() {\n                    return EntryImpl.this.nextEntry.name;\n                }\n            };\n        }\n```\n可以看到,nextFilter实现了?NextFilter接口,实现的方法中,filterWrite 和 filterClose调用的entry代码 ` Entry nextEntry = EntryImpl.this.prevEntry;`,这两个调用的都是之前的entry.\n\n\n\n","source":"_posts/Mina nextFilter.md","raw":"---\ntitle: Mina nextFilter\ncategories :\n- 技术\ntags :\n- Java\n- mina\n---\n\nmina中nextFilter是不一定代表的是在filterChain中的下一个filter,在 DefaultIoFilterChain中,EntryImpl是一个内部类,源码如下:\n```\nprivate final class EntryImpl implements Entry {\n        private EntryImpl prevEntry;\n\n        private EntryImpl nextEntry;\n\n        private final String name;\n\n        private IoFilter filter;\n\n        private final NextFilter nextFilter;\n\n        private EntryImpl(EntryImpl prevEntry, EntryImpl nextEntry, String name, IoFilter filter) {\n            if (filter == null) {\n                throw new IllegalArgumentException(\"filter\");\n            }\n\n            if (name == null) {\n                throw new IllegalArgumentException(\"name\");\n            }\n\n            this.prevEntry = prevEntry;\n            this.nextEntry = nextEntry;\n            this.name = name;\n            this.filter = filter;\n            this.nextFilter = new NextFilter() {\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void sessionCreated(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionCreated(nextEntry, session);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void sessionOpened(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionOpened(nextEntry, session);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void sessionClosed(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionClosed(nextEntry, session);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void sessionIdle(IoSession session, IdleStatus status) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionIdle(nextEntry, session, status);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void exceptionCaught(IoSession session, Throwable cause) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextExceptionCaught(nextEntry, session, cause);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void inputClosed(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextInputClosed(nextEntry, session);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void messageReceived(IoSession session, Object message) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextMessageReceived(nextEntry, session, message);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void messageSent(IoSession session, WriteRequest writeRequest) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextMessageSent(nextEntry, session, writeRequest);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void filterWrite(IoSession session, WriteRequest writeRequest) {\n                    Entry nextEntry = EntryImpl.this.prevEntry;\n                    callPreviousFilterWrite(nextEntry, session, writeRequest);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public void filterClose(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.prevEntry;\n                    callPreviousFilterClose(nextEntry, session);\n                }\n\n                /**\n                 * {@inheritDoc}\n                 */\n                @Override\n                public String toString() {\n                    return EntryImpl.this.nextEntry.name;\n                }\n            };\n        }\n```\n可以看到,nextFilter实现了?NextFilter接口,实现的方法中,filterWrite 和 filterClose调用的entry代码 ` Entry nextEntry = EntryImpl.this.prevEntry;`,这两个调用的都是之前的entry.\n\n\n\n","slug":"Mina nextFilter","published":1,"date":"2019-05-21T02:36:43.911Z","updated":"2019-05-21T02:36:43.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbrf0020m74zzevdbt3l","content":"<p>mina中nextFilter是不一定代表的是在filterChain中的下一个filter,在 DefaultIoFilterChain中,EntryImpl是一个内部类,源码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final class EntryImpl implements Entry &#123;</span><br><span class=\"line\">        private EntryImpl prevEntry;</span><br><span class=\"line\"></span><br><span class=\"line\">        private EntryImpl nextEntry;</span><br><span class=\"line\"></span><br><span class=\"line\">        private final String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        private IoFilter filter;</span><br><span class=\"line\"></span><br><span class=\"line\">        private final NextFilter nextFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">        private EntryImpl(EntryImpl prevEntry, EntryImpl nextEntry, String name, IoFilter filter) &#123;</span><br><span class=\"line\">            if (filter == null) &#123;</span><br><span class=\"line\">                throw new IllegalArgumentException(&quot;filter&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (name == null) &#123;</span><br><span class=\"line\">                throw new IllegalArgumentException(&quot;name&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            this.prevEntry = prevEntry;</span><br><span class=\"line\">            this.nextEntry = nextEntry;</span><br><span class=\"line\">            this.name = name;</span><br><span class=\"line\">            this.filter = filter;</span><br><span class=\"line\">            this.nextFilter = new NextFilter() &#123;</span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void sessionCreated(IoSession session) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextSessionCreated(nextEntry, session);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void sessionOpened(IoSession session) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextSessionOpened(nextEntry, session);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void sessionClosed(IoSession session) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextSessionClosed(nextEntry, session);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void sessionIdle(IoSession session, IdleStatus status) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextSessionIdle(nextEntry, session, status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void exceptionCaught(IoSession session, Throwable cause) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextExceptionCaught(nextEntry, session, cause);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void inputClosed(IoSession session) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextInputClosed(nextEntry, session);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void messageReceived(IoSession session, Object message) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextMessageReceived(nextEntry, session, message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void messageSent(IoSession session, WriteRequest writeRequest) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextMessageSent(nextEntry, session, writeRequest);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void filterWrite(IoSession session, WriteRequest writeRequest) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.prevEntry;</span><br><span class=\"line\">                    callPreviousFilterWrite(nextEntry, session, writeRequest);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void filterClose(IoSession session) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.prevEntry;</span><br><span class=\"line\">                    callPreviousFilterClose(nextEntry, session);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public String toString() &#123;</span><br><span class=\"line\">                    return EntryImpl.this.nextEntry.name;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到,nextFilter实现了?NextFilter接口,实现的方法中,filterWrite 和 filterClose调用的entry代码 <code>Entry nextEntry = EntryImpl.this.prevEntry;</code>,这两个调用的都是之前的entry.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>mina中nextFilter是不一定代表的是在filterChain中的下一个filter,在 DefaultIoFilterChain中,EntryImpl是一个内部类,源码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final class EntryImpl implements Entry &#123;</span><br><span class=\"line\">        private EntryImpl prevEntry;</span><br><span class=\"line\"></span><br><span class=\"line\">        private EntryImpl nextEntry;</span><br><span class=\"line\"></span><br><span class=\"line\">        private final String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        private IoFilter filter;</span><br><span class=\"line\"></span><br><span class=\"line\">        private final NextFilter nextFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">        private EntryImpl(EntryImpl prevEntry, EntryImpl nextEntry, String name, IoFilter filter) &#123;</span><br><span class=\"line\">            if (filter == null) &#123;</span><br><span class=\"line\">                throw new IllegalArgumentException(&quot;filter&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (name == null) &#123;</span><br><span class=\"line\">                throw new IllegalArgumentException(&quot;name&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            this.prevEntry = prevEntry;</span><br><span class=\"line\">            this.nextEntry = nextEntry;</span><br><span class=\"line\">            this.name = name;</span><br><span class=\"line\">            this.filter = filter;</span><br><span class=\"line\">            this.nextFilter = new NextFilter() &#123;</span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void sessionCreated(IoSession session) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextSessionCreated(nextEntry, session);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void sessionOpened(IoSession session) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextSessionOpened(nextEntry, session);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void sessionClosed(IoSession session) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextSessionClosed(nextEntry, session);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void sessionIdle(IoSession session, IdleStatus status) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextSessionIdle(nextEntry, session, status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void exceptionCaught(IoSession session, Throwable cause) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextExceptionCaught(nextEntry, session, cause);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void inputClosed(IoSession session) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextInputClosed(nextEntry, session);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void messageReceived(IoSession session, Object message) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextMessageReceived(nextEntry, session, message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void messageSent(IoSession session, WriteRequest writeRequest) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.nextEntry;</span><br><span class=\"line\">                    callNextMessageSent(nextEntry, session, writeRequest);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void filterWrite(IoSession session, WriteRequest writeRequest) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.prevEntry;</span><br><span class=\"line\">                    callPreviousFilterWrite(nextEntry, session, writeRequest);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void filterClose(IoSession session) &#123;</span><br><span class=\"line\">                    Entry nextEntry = EntryImpl.this.prevEntry;</span><br><span class=\"line\">                    callPreviousFilterClose(nextEntry, session);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * &#123;@inheritDoc&#125;</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public String toString() &#123;</span><br><span class=\"line\">                    return EntryImpl.this.nextEntry.name;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到,nextFilter实现了?NextFilter接口,实现的方法中,filterWrite 和 filterClose调用的entry代码 <code>Entry nextEntry = EntryImpl.this.prevEntry;</code>,这两个调用的都是之前的entry.</p>\n"},{"title":"Mockito的另一种应用","_content":"\n除了模拟静态方法的返回值,如RewardConfigHelper.getAndRewardPlayer()在策划没配置奖励时也有返回值,mockito还可以模拟对象的方法.\n例如,有一个需求是分享琦玉照片时领取奖励,需要编写测试用例模拟分享琦玉照片.但是新建分享之前需要玩家照片背包里有琦玉照片,当不方便手动给玩家加照片时,可以模拟判断玩家背包里是否有照片的方法,如`pr.getSaitama().getPhotoSys().hasPhoto(String picId);`\n```\n@Test\n    //    @PrepareForTest(SaitamaPhotoSys.class)\n    public void testShareSaitamaPic() {\n        SaitamaPhotoSys saitamaPhotoSys = pr.getSaitama().getPhotoSys();\n        SaitamaPhotoSys mock = spy(saitamaPhotoSys);\n        PowerMockito.when(mock.hasPhoto(anyString())).thenReturn(true);\n\n        pr.getSaitama().setPhotoSys(mock);\n        pr.setLevel(119);\n        pr.levelup();\n        params.put(\"picId\", KOSDataConfigService.getFirstId(SaitamaPicture.class));\n        Assert.assertTrue(handler.shareSaitamaPic(pr, params).size() > 0);\n    }\n```\n给mock设置好返回值后,` pr.getSaitama().setPhotoSys(mock);`,这样在`handler.shareSaitamaPic(pr, params)`时才会返回设置好的结果.\n\n\n","source":"_posts/Mockito的另一种应用.md","raw":"---\ntitle: Mockito的另一种应用\ncategories :\n- 技术\ntags :\n- Java\n- Mock\n---\n\n除了模拟静态方法的返回值,如RewardConfigHelper.getAndRewardPlayer()在策划没配置奖励时也有返回值,mockito还可以模拟对象的方法.\n例如,有一个需求是分享琦玉照片时领取奖励,需要编写测试用例模拟分享琦玉照片.但是新建分享之前需要玩家照片背包里有琦玉照片,当不方便手动给玩家加照片时,可以模拟判断玩家背包里是否有照片的方法,如`pr.getSaitama().getPhotoSys().hasPhoto(String picId);`\n```\n@Test\n    //    @PrepareForTest(SaitamaPhotoSys.class)\n    public void testShareSaitamaPic() {\n        SaitamaPhotoSys saitamaPhotoSys = pr.getSaitama().getPhotoSys();\n        SaitamaPhotoSys mock = spy(saitamaPhotoSys);\n        PowerMockito.when(mock.hasPhoto(anyString())).thenReturn(true);\n\n        pr.getSaitama().setPhotoSys(mock);\n        pr.setLevel(119);\n        pr.levelup();\n        params.put(\"picId\", KOSDataConfigService.getFirstId(SaitamaPicture.class));\n        Assert.assertTrue(handler.shareSaitamaPic(pr, params).size() > 0);\n    }\n```\n给mock设置好返回值后,` pr.getSaitama().setPhotoSys(mock);`,这样在`handler.shareSaitamaPic(pr, params)`时才会返回设置好的结果.\n\n\n","slug":"Mockito的另一种应用","published":1,"date":"2019-05-11T11:33:08.210Z","updated":"2019-05-11T11:33:08.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbrg0024m74zyger1dc5","content":"<p>除了模拟静态方法的返回值,如RewardConfigHelper.getAndRewardPlayer()在策划没配置奖励时也有返回值,mockito还可以模拟对象的方法.<br>例如,有一个需求是分享琦玉照片时领取奖励,需要编写测试用例模拟分享琦玉照片.但是新建分享之前需要玩家照片背包里有琦玉照片,当不方便手动给玩家加照片时,可以模拟判断玩家背包里是否有照片的方法,如<code>pr.getSaitama().getPhotoSys().hasPhoto(String picId);</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">    //    @PrepareForTest(SaitamaPhotoSys.class)</span><br><span class=\"line\">    public void testShareSaitamaPic() &#123;</span><br><span class=\"line\">        SaitamaPhotoSys saitamaPhotoSys = pr.getSaitama().getPhotoSys();</span><br><span class=\"line\">        SaitamaPhotoSys mock = spy(saitamaPhotoSys);</span><br><span class=\"line\">        PowerMockito.when(mock.hasPhoto(anyString())).thenReturn(true);</span><br><span class=\"line\"></span><br><span class=\"line\">        pr.getSaitama().setPhotoSys(mock);</span><br><span class=\"line\">        pr.setLevel(119);</span><br><span class=\"line\">        pr.levelup();</span><br><span class=\"line\">        params.put(&quot;picId&quot;, KOSDataConfigService.getFirstId(SaitamaPicture.class));</span><br><span class=\"line\">        Assert.assertTrue(handler.shareSaitamaPic(pr, params).size() &gt; 0);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>给mock设置好返回值后,<code>pr.getSaitama().setPhotoSys(mock);</code>,这样在<code>handler.shareSaitamaPic(pr, params)</code>时才会返回设置好的结果.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>除了模拟静态方法的返回值,如RewardConfigHelper.getAndRewardPlayer()在策划没配置奖励时也有返回值,mockito还可以模拟对象的方法.<br>例如,有一个需求是分享琦玉照片时领取奖励,需要编写测试用例模拟分享琦玉照片.但是新建分享之前需要玩家照片背包里有琦玉照片,当不方便手动给玩家加照片时,可以模拟判断玩家背包里是否有照片的方法,如<code>pr.getSaitama().getPhotoSys().hasPhoto(String picId);</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">    //    @PrepareForTest(SaitamaPhotoSys.class)</span><br><span class=\"line\">    public void testShareSaitamaPic() &#123;</span><br><span class=\"line\">        SaitamaPhotoSys saitamaPhotoSys = pr.getSaitama().getPhotoSys();</span><br><span class=\"line\">        SaitamaPhotoSys mock = spy(saitamaPhotoSys);</span><br><span class=\"line\">        PowerMockito.when(mock.hasPhoto(anyString())).thenReturn(true);</span><br><span class=\"line\"></span><br><span class=\"line\">        pr.getSaitama().setPhotoSys(mock);</span><br><span class=\"line\">        pr.setLevel(119);</span><br><span class=\"line\">        pr.levelup();</span><br><span class=\"line\">        params.put(&quot;picId&quot;, KOSDataConfigService.getFirstId(SaitamaPicture.class));</span><br><span class=\"line\">        Assert.assertTrue(handler.shareSaitamaPic(pr, params).size() &gt; 0);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>给mock设置好返回值后,<code>pr.getSaitama().setPhotoSys(mock);</code>,这样在<code>handler.shareSaitamaPic(pr, params)</code>时才会返回设置好的结果.</p>\n"},{"title":"MongoDB 索引","_content":"\n索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。\n\n这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。\n\n索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构\n\n#####MongoDB使用 createIndex() 方法来创建索引。\n\ncreateIndex()方法基本语法格式如下所示：\n```\n>db.collection.createIndex(keys, options)\n```\n语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。\n\n实例\n```\n>db.col.createIndex({\"title\":1})\n```\n`createIndex()` 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。\n```\n>db.col.createIndex({\"title\":1,\"description\":-1})\n```\noptions:可选参数，表示建立索引的设置。可选值如下：\n```\nbackground，Boolean，在后台建立索引，以便建立索引时不阻止其他数据库活动。默认值为false。\nunique，Boolean，创建唯一索引。默认值 false。\nname，String，指定索引的名称。如果未指定，MongoDB会生成一个索引字段的名称和排序顺序串联。\npartialFilterExpression, document.如果指定,MongoDB只会给满足过滤表达式的记录建立索引.\nsparse，Boolean，对文档中不存在的字段数据不启用索引。默认值是 false。\nexpireAfterSeconds,integer,指定索引的过期时间\nstorageEngine,document,允许用户配置索引的存储引擎\n```\n#####在后台创建索引的原因：\n在前台创建索引期间会锁定数据库，会导致其它操作无法进行数据读写，在后台创建索引是，会定期释放写锁，从而保证其它操作的运行，但是后台操作会在耗时更长，尤其是在频繁进行写入的服务器上。\n\n#####MongoDB提供的查看索引信息的方法：\n1、查看集合索引\n```\ndb.col.getIndexes()\n```\n2、查看集合索引大小\n```\ndb.col.totalIndexSize()\n```\n3、删除集合所有索引\n```\ndb.col.dropIndexes()\n```\n4、删除集合指定索引\n```\ndb.col.dropIndex(\"索引名称\")\n```\n\n\n#####Compound index\nMongodb 支持对多个 field 建立索引，称之为 compound index。Compound index 中 field 的顺序对索引的性能有至关重要的影响，比如索引 {userid:1, score:-1} 首先根据 userid 排序，然后再在每个 userid 中根据 score 排序。\n\n创建 Compound index\n在此创建一个 products collection：\n```\n{\n \"_id\": ObjectId(...),\n \"item\": \"Banana\",\n \"category\": [\"food\", \"produce\", \"grocery\"],\n \"location\": \"4th Street Store\",\n \"stock\": 4,\n \"type\": \"cases\"\n}\n```\n复制代码然后创建一个 compound index：\n`db.products.createIndex( { \"item\": 1, \"stock\": 1 } )`\n复制代码这个 index 引用的 document 首先会根据 item 排序，然后在 每个 item 中，又会根据 stock 排序，以下语句都满足该索引：\n```\ndb.products.find( { item: \"Banana\" } )\ndb.products.find( { item: \"Banana\", stock: { $gt: 5 } } )\n```\n条件 `{item: \"Banana\"} `满足是因为这个 query 满足 **prefix 原则**。\n#####使用 compound 索引需要满足 prefix 原则\nIndex prefix 是指 index fields 的左前缀子集，考虑以下索引：\n```\n{ \"item\": 1, \"location\": 1, \"stock\": 1 }\n```\n这个索引包含以下 index prefix：\n``{ item: 1 }\n{ item: 1, location: 1 }\n复制代码所以只要语句满足 index prefix 原则都是可以支持使用 compound index 的：\n```\ndb.products.find( { item: \"Banana\" } )\ndb.products.find( { item: \"Banana\",location:\"4th Street Store\"} )\ndb.products.find( { item: \"Banana\",location:\"4th Street Store\",stock:4})\n```\n相反如果不满足 index prefix 则无法使用索引，比如以下 field 的查询：\n```\nthe location field\nthe stock field\nthe location and stock fields\n```\n由于 index prefix 的存在，如果一个 collection 既有 {a:1, b:1} 索引 ，也有 {a:1} 索引，如果二者没有稀疏或者唯一性的要求，single index 是可以移除的。\n\n参考：https://juejin.im/post/5ad1d2836fb9a028dd4eaae6\n","source":"_posts/MongoDB 索引.md","raw":"---\ntitle: MongoDB 索引\ncategories :\n- 技术\ntags :\n- Java\n- MongoDB\n---\n\n索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。\n\n这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。\n\n索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构\n\n#####MongoDB使用 createIndex() 方法来创建索引。\n\ncreateIndex()方法基本语法格式如下所示：\n```\n>db.collection.createIndex(keys, options)\n```\n语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。\n\n实例\n```\n>db.col.createIndex({\"title\":1})\n```\n`createIndex()` 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。\n```\n>db.col.createIndex({\"title\":1,\"description\":-1})\n```\noptions:可选参数，表示建立索引的设置。可选值如下：\n```\nbackground，Boolean，在后台建立索引，以便建立索引时不阻止其他数据库活动。默认值为false。\nunique，Boolean，创建唯一索引。默认值 false。\nname，String，指定索引的名称。如果未指定，MongoDB会生成一个索引字段的名称和排序顺序串联。\npartialFilterExpression, document.如果指定,MongoDB只会给满足过滤表达式的记录建立索引.\nsparse，Boolean，对文档中不存在的字段数据不启用索引。默认值是 false。\nexpireAfterSeconds,integer,指定索引的过期时间\nstorageEngine,document,允许用户配置索引的存储引擎\n```\n#####在后台创建索引的原因：\n在前台创建索引期间会锁定数据库，会导致其它操作无法进行数据读写，在后台创建索引是，会定期释放写锁，从而保证其它操作的运行，但是后台操作会在耗时更长，尤其是在频繁进行写入的服务器上。\n\n#####MongoDB提供的查看索引信息的方法：\n1、查看集合索引\n```\ndb.col.getIndexes()\n```\n2、查看集合索引大小\n```\ndb.col.totalIndexSize()\n```\n3、删除集合所有索引\n```\ndb.col.dropIndexes()\n```\n4、删除集合指定索引\n```\ndb.col.dropIndex(\"索引名称\")\n```\n\n\n#####Compound index\nMongodb 支持对多个 field 建立索引，称之为 compound index。Compound index 中 field 的顺序对索引的性能有至关重要的影响，比如索引 {userid:1, score:-1} 首先根据 userid 排序，然后再在每个 userid 中根据 score 排序。\n\n创建 Compound index\n在此创建一个 products collection：\n```\n{\n \"_id\": ObjectId(...),\n \"item\": \"Banana\",\n \"category\": [\"food\", \"produce\", \"grocery\"],\n \"location\": \"4th Street Store\",\n \"stock\": 4,\n \"type\": \"cases\"\n}\n```\n复制代码然后创建一个 compound index：\n`db.products.createIndex( { \"item\": 1, \"stock\": 1 } )`\n复制代码这个 index 引用的 document 首先会根据 item 排序，然后在 每个 item 中，又会根据 stock 排序，以下语句都满足该索引：\n```\ndb.products.find( { item: \"Banana\" } )\ndb.products.find( { item: \"Banana\", stock: { $gt: 5 } } )\n```\n条件 `{item: \"Banana\"} `满足是因为这个 query 满足 **prefix 原则**。\n#####使用 compound 索引需要满足 prefix 原则\nIndex prefix 是指 index fields 的左前缀子集，考虑以下索引：\n```\n{ \"item\": 1, \"location\": 1, \"stock\": 1 }\n```\n这个索引包含以下 index prefix：\n``{ item: 1 }\n{ item: 1, location: 1 }\n复制代码所以只要语句满足 index prefix 原则都是可以支持使用 compound index 的：\n```\ndb.products.find( { item: \"Banana\" } )\ndb.products.find( { item: \"Banana\",location:\"4th Street Store\"} )\ndb.products.find( { item: \"Banana\",location:\"4th Street Store\",stock:4})\n```\n相反如果不满足 index prefix 则无法使用索引，比如以下 field 的查询：\n```\nthe location field\nthe stock field\nthe location and stock fields\n```\n由于 index prefix 的存在，如果一个 collection 既有 {a:1, b:1} 索引 ，也有 {a:1} 索引，如果二者没有稀疏或者唯一性的要求，single index 是可以移除的。\n\n参考：https://juejin.im/post/5ad1d2836fb9a028dd4eaae6\n","slug":"MongoDB 索引","published":1,"date":"2019-05-21T02:36:43.913Z","updated":"2019-05-21T02:36:43.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbrj0027m74zcks95b1f","content":"<p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p>\n<p>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p>\n<p>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构</p>\n<p>#####MongoDB使用 createIndex() 方法来创建索引。</p>\n<p>createIndex()方法基本语法格式如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.collection.createIndex(keys, options)</span><br></pre></td></tr></table></figure></p>\n<p>语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。</p>\n<p>实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.col.createIndex(&#123;&quot;title&quot;:1&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><code>createIndex()</code> 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.col.createIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>options:可选参数，表示建立索引的设置。可选值如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background，Boolean，在后台建立索引，以便建立索引时不阻止其他数据库活动。默认值为false。</span><br><span class=\"line\">unique，Boolean，创建唯一索引。默认值 false。</span><br><span class=\"line\">name，String，指定索引的名称。如果未指定，MongoDB会生成一个索引字段的名称和排序顺序串联。</span><br><span class=\"line\">partialFilterExpression, document.如果指定,MongoDB只会给满足过滤表达式的记录建立索引.</span><br><span class=\"line\">sparse，Boolean，对文档中不存在的字段数据不启用索引。默认值是 false。</span><br><span class=\"line\">expireAfterSeconds,integer,指定索引的过期时间</span><br><span class=\"line\">storageEngine,document,允许用户配置索引的存储引擎</span><br></pre></td></tr></table></figure></p>\n<p>#####在后台创建索引的原因：<br>在前台创建索引期间会锁定数据库，会导致其它操作无法进行数据读写，在后台创建索引是，会定期释放写锁，从而保证其它操作的运行，但是后台操作会在耗时更长，尤其是在频繁进行写入的服务器上。</p>\n<p>#####MongoDB提供的查看索引信息的方法：<br>1、查看集合索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.getIndexes()</span><br></pre></td></tr></table></figure></p>\n<p>2、查看集合索引大小<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.totalIndexSize()</span><br></pre></td></tr></table></figure></p>\n<p>3、删除集合所有索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.dropIndexes()</span><br></pre></td></tr></table></figure></p>\n<p>4、删除集合指定索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.dropIndex(&quot;索引名称&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>#####Compound index<br>Mongodb 支持对多个 field 建立索引，称之为 compound index。Compound index 中 field 的顺序对索引的性能有至关重要的影响，比如索引 {userid:1, score:-1} 首先根据 userid 排序，然后再在每个 userid 中根据 score 排序。</p>\n<p>创建 Compound index<br>在此创建一个 products collection：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;_id&quot;: ObjectId(...),</span><br><span class=\"line\"> &quot;item&quot;: &quot;Banana&quot;,</span><br><span class=\"line\"> &quot;category&quot;: [&quot;food&quot;, &quot;produce&quot;, &quot;grocery&quot;],</span><br><span class=\"line\"> &quot;location&quot;: &quot;4th Street Store&quot;,</span><br><span class=\"line\"> &quot;stock&quot;: 4,</span><br><span class=\"line\"> &quot;type&quot;: &quot;cases&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>复制代码然后创建一个 compound index：<br><code>db.products.createIndex( { &quot;item&quot;: 1, &quot;stock&quot;: 1 } )</code><br>复制代码这个 index 引用的 document 首先会根据 item 排序，然后在 每个 item 中，又会根据 stock 排序，以下语句都满足该索引：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.products.find( &#123; item: &quot;Banana&quot; &#125; )</span><br><span class=\"line\">db.products.find( &#123; item: &quot;Banana&quot;, stock: &#123; $gt: 5 &#125; &#125; )</span><br></pre></td></tr></table></figure></p>\n<p>条件 <code>{item: &quot;Banana&quot;}</code>满足是因为这个 query 满足 <strong>prefix 原则</strong>。</p>\n<p>#####使用 compound 索引需要满足 prefix 原则<br>Index prefix 是指 index fields 的左前缀子集，考虑以下索引：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;item&quot;: 1, &quot;location&quot;: 1, &quot;stock&quot;: 1 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个索引包含以下 index prefix：<br><code></code>{ item: 1 }<br>{ item: 1, location: 1 }<br>复制代码所以只要语句满足 index prefix 原则都是可以支持使用 compound index 的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.products.find( &#123; item: &quot;Banana&quot; &#125; )</span><br><span class=\"line\">db.products.find( &#123; item: &quot;Banana&quot;,location:&quot;4th Street Store&quot;&#125; )</span><br><span class=\"line\">db.products.find( &#123; item: &quot;Banana&quot;,location:&quot;4th Street Store&quot;,stock:4&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>相反如果不满足 index prefix 则无法使用索引，比如以下 field 的查询：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the location field</span><br><span class=\"line\">the stock field</span><br><span class=\"line\">the location and stock fields</span><br></pre></td></tr></table></figure></p>\n<p>由于 index prefix 的存在，如果一个 collection 既有 {a:1, b:1} 索引 ，也有 {a:1} 索引，如果二者没有稀疏或者唯一性的要求，single index 是可以移除的。</p>\n<p>参考：<a href=\"https://juejin.im/post/5ad1d2836fb9a028dd4eaae6\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ad1d2836fb9a028dd4eaae6</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p>\n<p>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p>\n<p>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构</p>\n<p>#####MongoDB使用 createIndex() 方法来创建索引。</p>\n<p>createIndex()方法基本语法格式如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.collection.createIndex(keys, options)</span><br></pre></td></tr></table></figure></p>\n<p>语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。</p>\n<p>实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.col.createIndex(&#123;&quot;title&quot;:1&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><code>createIndex()</code> 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.col.createIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>options:可选参数，表示建立索引的设置。可选值如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background，Boolean，在后台建立索引，以便建立索引时不阻止其他数据库活动。默认值为false。</span><br><span class=\"line\">unique，Boolean，创建唯一索引。默认值 false。</span><br><span class=\"line\">name，String，指定索引的名称。如果未指定，MongoDB会生成一个索引字段的名称和排序顺序串联。</span><br><span class=\"line\">partialFilterExpression, document.如果指定,MongoDB只会给满足过滤表达式的记录建立索引.</span><br><span class=\"line\">sparse，Boolean，对文档中不存在的字段数据不启用索引。默认值是 false。</span><br><span class=\"line\">expireAfterSeconds,integer,指定索引的过期时间</span><br><span class=\"line\">storageEngine,document,允许用户配置索引的存储引擎</span><br></pre></td></tr></table></figure></p>\n<p>#####在后台创建索引的原因：<br>在前台创建索引期间会锁定数据库，会导致其它操作无法进行数据读写，在后台创建索引是，会定期释放写锁，从而保证其它操作的运行，但是后台操作会在耗时更长，尤其是在频繁进行写入的服务器上。</p>\n<p>#####MongoDB提供的查看索引信息的方法：<br>1、查看集合索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.getIndexes()</span><br></pre></td></tr></table></figure></p>\n<p>2、查看集合索引大小<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.totalIndexSize()</span><br></pre></td></tr></table></figure></p>\n<p>3、删除集合所有索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.dropIndexes()</span><br></pre></td></tr></table></figure></p>\n<p>4、删除集合指定索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.dropIndex(&quot;索引名称&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>#####Compound index<br>Mongodb 支持对多个 field 建立索引，称之为 compound index。Compound index 中 field 的顺序对索引的性能有至关重要的影响，比如索引 {userid:1, score:-1} 首先根据 userid 排序，然后再在每个 userid 中根据 score 排序。</p>\n<p>创建 Compound index<br>在此创建一个 products collection：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;_id&quot;: ObjectId(...),</span><br><span class=\"line\"> &quot;item&quot;: &quot;Banana&quot;,</span><br><span class=\"line\"> &quot;category&quot;: [&quot;food&quot;, &quot;produce&quot;, &quot;grocery&quot;],</span><br><span class=\"line\"> &quot;location&quot;: &quot;4th Street Store&quot;,</span><br><span class=\"line\"> &quot;stock&quot;: 4,</span><br><span class=\"line\"> &quot;type&quot;: &quot;cases&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>复制代码然后创建一个 compound index：<br><code>db.products.createIndex( { &quot;item&quot;: 1, &quot;stock&quot;: 1 } )</code><br>复制代码这个 index 引用的 document 首先会根据 item 排序，然后在 每个 item 中，又会根据 stock 排序，以下语句都满足该索引：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.products.find( &#123; item: &quot;Banana&quot; &#125; )</span><br><span class=\"line\">db.products.find( &#123; item: &quot;Banana&quot;, stock: &#123; $gt: 5 &#125; &#125; )</span><br></pre></td></tr></table></figure></p>\n<p>条件 <code>{item: &quot;Banana&quot;}</code>满足是因为这个 query 满足 <strong>prefix 原则</strong>。</p>\n<p>#####使用 compound 索引需要满足 prefix 原则<br>Index prefix 是指 index fields 的左前缀子集，考虑以下索引：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;item&quot;: 1, &quot;location&quot;: 1, &quot;stock&quot;: 1 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个索引包含以下 index prefix：<br><code></code>{ item: 1 }<br>{ item: 1, location: 1 }<br>复制代码所以只要语句满足 index prefix 原则都是可以支持使用 compound index 的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.products.find( &#123; item: &quot;Banana&quot; &#125; )</span><br><span class=\"line\">db.products.find( &#123; item: &quot;Banana&quot;,location:&quot;4th Street Store&quot;&#125; )</span><br><span class=\"line\">db.products.find( &#123; item: &quot;Banana&quot;,location:&quot;4th Street Store&quot;,stock:4&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>相反如果不满足 index prefix 则无法使用索引，比如以下 field 的查询：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the location field</span><br><span class=\"line\">the stock field</span><br><span class=\"line\">the location and stock fields</span><br></pre></td></tr></table></figure></p>\n<p>由于 index prefix 的存在，如果一个 collection 既有 {a:1, b:1} 索引 ，也有 {a:1} 索引，如果二者没有稀疏或者唯一性的要求，single index 是可以移除的。</p>\n<p>参考：<a href=\"https://juejin.im/post/5ad1d2836fb9a028dd4eaae6\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ad1d2836fb9a028dd4eaae6</a></p>\n"},{"title":"MongoDB $type操作符","_content":"\n`$type`操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。\nMongoDB 中可以使用的类型如下表所示：\n```\nDouble\t1\t \nString\t2\t \nObject\t3\t \nArray\t4\t \nBinary data\t5\t \nUndefined\t6\t已废弃。\nObject id\t7\t \nBoolean\t8\t \nDate\t9\t \nNull\t10\t \nRegular Expression\t11\t \nJavaScript\t13\t \nSymbol\t14\t \nJavaScript (with scope)\t15\t \n32-bit integer\t16\t \nTimestamp\t17\t \n64-bit integer\t18\t \nMin key\t255\tQuery with -1.\nMax key\t127\t\n```\n新建一个数据库并插入数据,使用find()命令查看数据：\n```\n> db.col.find()\n{ \"_id\" : ObjectId(\"56066542ade2f21f36b0313a\"), \"title\" : \"PHP 教程\", \"description\" : \"PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"php\" ], \"likes\" : 200 }\n{ \"_id\" : ObjectId(\"56066549ade2f21f36b0313b\"), \"title\" : \"Java 教程\", \"description\" : \"Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"java\" ], \"likes\" : 150 }\n{ \"_id\" : ObjectId(\"5606654fade2f21f36b0313c\"), \"title\" : \"MongoDB 教程\", \"description\" : \"MongoDB 是一个 Nosql 数据库\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"mongodb\" ], \"likes\" : 100 }\n```\n\n如果想获取 `\"col\"` 集合中` title `为 `String`的数据，你可以使用以下命令：\n```\ndb.col.find({\"title\" : {$type : 2}})\n或\ndb.col.find({\"title\" : {$type : 'string'}})\n```\n输出结果为：\n```\n{ \"_id\" : ObjectId(\"56066542ade2f21f36b0313a\"), \"title\" : \"PHP 教程\", \"description\" : \"PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"php\" ], \"likes\" : 200 }\n{ \"_id\" : ObjectId(\"56066549ade2f21f36b0313b\"), \"title\" : \"Java 教程\", \"description\" : \"Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"java\" ], \"likes\" : 150 }\n{ \"_id\" : ObjectId(\"5606654fade2f21f36b0313c\"), \"title\" : \"MongoDB 教程\", \"description\" : \"MongoDB 是一个 Nosql 数据库\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"mongodb\" ], \"likes\" : 100 }\n```\n","source":"_posts/MongoDB $type操作符.md","raw":"---\ntitle: MongoDB $type操作符\ncategories :\n- 技术\ntags :\n- MongoDB\n---\n\n`$type`操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。\nMongoDB 中可以使用的类型如下表所示：\n```\nDouble\t1\t \nString\t2\t \nObject\t3\t \nArray\t4\t \nBinary data\t5\t \nUndefined\t6\t已废弃。\nObject id\t7\t \nBoolean\t8\t \nDate\t9\t \nNull\t10\t \nRegular Expression\t11\t \nJavaScript\t13\t \nSymbol\t14\t \nJavaScript (with scope)\t15\t \n32-bit integer\t16\t \nTimestamp\t17\t \n64-bit integer\t18\t \nMin key\t255\tQuery with -1.\nMax key\t127\t\n```\n新建一个数据库并插入数据,使用find()命令查看数据：\n```\n> db.col.find()\n{ \"_id\" : ObjectId(\"56066542ade2f21f36b0313a\"), \"title\" : \"PHP 教程\", \"description\" : \"PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"php\" ], \"likes\" : 200 }\n{ \"_id\" : ObjectId(\"56066549ade2f21f36b0313b\"), \"title\" : \"Java 教程\", \"description\" : \"Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"java\" ], \"likes\" : 150 }\n{ \"_id\" : ObjectId(\"5606654fade2f21f36b0313c\"), \"title\" : \"MongoDB 教程\", \"description\" : \"MongoDB 是一个 Nosql 数据库\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"mongodb\" ], \"likes\" : 100 }\n```\n\n如果想获取 `\"col\"` 集合中` title `为 `String`的数据，你可以使用以下命令：\n```\ndb.col.find({\"title\" : {$type : 2}})\n或\ndb.col.find({\"title\" : {$type : 'string'}})\n```\n输出结果为：\n```\n{ \"_id\" : ObjectId(\"56066542ade2f21f36b0313a\"), \"title\" : \"PHP 教程\", \"description\" : \"PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"php\" ], \"likes\" : 200 }\n{ \"_id\" : ObjectId(\"56066549ade2f21f36b0313b\"), \"title\" : \"Java 教程\", \"description\" : \"Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"java\" ], \"likes\" : 150 }\n{ \"_id\" : ObjectId(\"5606654fade2f21f36b0313c\"), \"title\" : \"MongoDB 教程\", \"description\" : \"MongoDB 是一个 Nosql 数据库\", \"by\" : \"菜鸟教程\", \"url\" : \"http://www.runoob.com\", \"tags\" : [ \"mongodb\" ], \"likes\" : 100 }\n```\n","slug":"MongoDB $type操作符","published":1,"date":"2019-05-21T02:36:43.912Z","updated":"2019-05-21T02:36:43.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbrk002am74zytbwrdmh","content":"<p><code>$type</code>操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。<br>MongoDB 中可以使用的类型如下表所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Double\t1\t </span><br><span class=\"line\">String\t2\t </span><br><span class=\"line\">Object\t3\t </span><br><span class=\"line\">Array\t4\t </span><br><span class=\"line\">Binary data\t5\t </span><br><span class=\"line\">Undefined\t6\t已废弃。</span><br><span class=\"line\">Object id\t7\t </span><br><span class=\"line\">Boolean\t8\t </span><br><span class=\"line\">Date\t9\t </span><br><span class=\"line\">Null\t10\t </span><br><span class=\"line\">Regular Expression\t11\t </span><br><span class=\"line\">JavaScript\t13\t </span><br><span class=\"line\">Symbol\t14\t </span><br><span class=\"line\">JavaScript (with scope)\t15\t </span><br><span class=\"line\">32-bit integer\t16\t </span><br><span class=\"line\">Timestamp\t17\t </span><br><span class=\"line\">64-bit integer\t18\t </span><br><span class=\"line\">Min key\t255\tQuery with -1.</span><br><span class=\"line\">Max key\t127</span><br></pre></td></tr></table></figure></p>\n<p>新建一个数据库并插入数据,使用find()命令查看数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.col.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果想获取 <code>&quot;col&quot;</code> 集合中<code>title</code>为 <code>String</code>的数据，你可以使用以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find(&#123;&quot;title&quot; : &#123;$type : 2&#125;&#125;)</span><br><span class=\"line\">或</span><br><span class=\"line\">db.col.find(&#123;&quot;title&quot; : &#123;$type : &apos;string&apos;&#125;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>$type</code>操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。<br>MongoDB 中可以使用的类型如下表所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Double\t1\t </span><br><span class=\"line\">String\t2\t </span><br><span class=\"line\">Object\t3\t </span><br><span class=\"line\">Array\t4\t </span><br><span class=\"line\">Binary data\t5\t </span><br><span class=\"line\">Undefined\t6\t已废弃。</span><br><span class=\"line\">Object id\t7\t </span><br><span class=\"line\">Boolean\t8\t </span><br><span class=\"line\">Date\t9\t </span><br><span class=\"line\">Null\t10\t </span><br><span class=\"line\">Regular Expression\t11\t </span><br><span class=\"line\">JavaScript\t13\t </span><br><span class=\"line\">Symbol\t14\t </span><br><span class=\"line\">JavaScript (with scope)\t15\t </span><br><span class=\"line\">32-bit integer\t16\t </span><br><span class=\"line\">Timestamp\t17\t </span><br><span class=\"line\">64-bit integer\t18\t </span><br><span class=\"line\">Min key\t255\tQuery with -1.</span><br><span class=\"line\">Max key\t127</span><br></pre></td></tr></table></figure></p>\n<p>新建一个数据库并插入数据,使用find()命令查看数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.col.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果想获取 <code>&quot;col&quot;</code> 集合中<code>title</code>为 <code>String</code>的数据，你可以使用以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find(&#123;&quot;title&quot; : &#123;$type : 2&#125;&#125;)</span><br><span class=\"line\">或</span><br><span class=\"line\">db.col.find(&#123;&quot;title&quot; : &#123;$type : &apos;string&apos;&#125;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"MongoDB 查询文档","_content":"\n#### MongoDB 查询数据的语法格式如下：\n```\ndb.collection.find(query, projection)\n```\n\n#### MongoDB常用的条件操作符:\n```\n$gt -------- greater than  >\n\n$gte --------- gt equal  >=\n\n$lt -------- less than  <\n\n$lte --------- lt equal  <=\n\n$ne ----------- not equal  !=\n\n$eq  --------  equal  =\n```\n\n#### 一些其它用法:\n```\n查询 title 包含\"教\"字的文档：\ndb.col.find({title:/教/})\n\n查询 title 字段以\"教\"字开头的文档：\ndb.col.find({title:/^教/})\n\n查询 titl e字段以\"教\"字结尾的文档：\ndb.col.find({title:/教$/})\n```\n\n#### MongoDB AND 条件\nMongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。\n\n语法格式如下：\n```\ndb.col.find({key1:value1, key2:value2}).pretty()\n```\n\n#### MongoDB OR 条件\nMongoDB OR 条件语句使用了关键字 $or,语法格式如下：\n```\n>db.col.find(\n   {\n      $or: [\n         {key1: value1}, {key2:value2}\n      ]\n   }\n).pretty()\n```\n\n#### AND 和 OR 联合使用\n以下实例演示了 AND 和 OR 联合使用，类似常规 SQL 语句为：` 'where likes>50 AND (by = '菜鸟教程' OR title = 'MongoDB 教程')'`\n```\n>db.col.find({\"likes\": {$gt:50}, $or: [{\"by\": \"菜鸟教程\"},{\"title\": \"MongoDB 教程\"}]}).pretty()\n\n{\n        \"_id\" : ObjectId(\"56063f17ade2f21f36b03133\"),\n        \"title\" : \"MongoDB 教程\",\n        \"description\" : \"MongoDB 是一个 Nosql 数据库\",\n        \"by\" : \"菜鸟教程\",\n        \"url\" : \"http://www.runoob.com\",\n        \"tags\" : [\n                \"mongodb\",\n                \"database\",\n                \"NoSQL\"\n        ],\n        \"likes\" : 100\n}\n```\n#### skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 `sort()`, 然后是 `skip()`，最后是显示的`limit()`。\n\n```\n> db.kos.find({$or:[{\"monKey\":\"monValue\"},{\"value\":{$type:2},\"name\":\"2\"}]}).limit(1).skip(1).pretty()\n```\n显示第二条结果\n","source":"_posts/MongoDB 查询文档.md","raw":"---\ntitle: MongoDB 查询文档\ncategories :\n- 技术\ntags :\n- MongoDB\n---\n\n#### MongoDB 查询数据的语法格式如下：\n```\ndb.collection.find(query, projection)\n```\n\n#### MongoDB常用的条件操作符:\n```\n$gt -------- greater than  >\n\n$gte --------- gt equal  >=\n\n$lt -------- less than  <\n\n$lte --------- lt equal  <=\n\n$ne ----------- not equal  !=\n\n$eq  --------  equal  =\n```\n\n#### 一些其它用法:\n```\n查询 title 包含\"教\"字的文档：\ndb.col.find({title:/教/})\n\n查询 title 字段以\"教\"字开头的文档：\ndb.col.find({title:/^教/})\n\n查询 titl e字段以\"教\"字结尾的文档：\ndb.col.find({title:/教$/})\n```\n\n#### MongoDB AND 条件\nMongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。\n\n语法格式如下：\n```\ndb.col.find({key1:value1, key2:value2}).pretty()\n```\n\n#### MongoDB OR 条件\nMongoDB OR 条件语句使用了关键字 $or,语法格式如下：\n```\n>db.col.find(\n   {\n      $or: [\n         {key1: value1}, {key2:value2}\n      ]\n   }\n).pretty()\n```\n\n#### AND 和 OR 联合使用\n以下实例演示了 AND 和 OR 联合使用，类似常规 SQL 语句为：` 'where likes>50 AND (by = '菜鸟教程' OR title = 'MongoDB 教程')'`\n```\n>db.col.find({\"likes\": {$gt:50}, $or: [{\"by\": \"菜鸟教程\"},{\"title\": \"MongoDB 教程\"}]}).pretty()\n\n{\n        \"_id\" : ObjectId(\"56063f17ade2f21f36b03133\"),\n        \"title\" : \"MongoDB 教程\",\n        \"description\" : \"MongoDB 是一个 Nosql 数据库\",\n        \"by\" : \"菜鸟教程\",\n        \"url\" : \"http://www.runoob.com\",\n        \"tags\" : [\n                \"mongodb\",\n                \"database\",\n                \"NoSQL\"\n        ],\n        \"likes\" : 100\n}\n```\n#### skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 `sort()`, 然后是 `skip()`，最后是显示的`limit()`。\n\n```\n> db.kos.find({$or:[{\"monKey\":\"monValue\"},{\"value\":{$type:2},\"name\":\"2\"}]}).limit(1).skip(1).pretty()\n```\n显示第二条结果\n","slug":"MongoDB 查询文档","published":1,"date":"2019-05-21T02:36:43.913Z","updated":"2019-05-21T02:36:43.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbrm002em74zwlr67670","content":"<h4 id=\"MongoDB-查询数据的语法格式如下：\"><a href=\"#MongoDB-查询数据的语法格式如下：\" class=\"headerlink\" title=\"MongoDB 查询数据的语法格式如下：\"></a>MongoDB 查询数据的语法格式如下：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure>\n<h4 id=\"MongoDB常用的条件操作符\"><a href=\"#MongoDB常用的条件操作符\" class=\"headerlink\" title=\"MongoDB常用的条件操作符:\"></a>MongoDB常用的条件操作符:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$gt -------- greater than  &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$gte --------- gt equal  &gt;=</span><br><span class=\"line\"></span><br><span class=\"line\">$lt -------- less than  &lt;</span><br><span class=\"line\"></span><br><span class=\"line\">$lte --------- lt equal  &lt;=</span><br><span class=\"line\"></span><br><span class=\"line\">$ne ----------- not equal  !=</span><br><span class=\"line\"></span><br><span class=\"line\">$eq  --------  equal  =</span><br></pre></td></tr></table></figure>\n<h4 id=\"一些其它用法\"><a href=\"#一些其它用法\" class=\"headerlink\" title=\"一些其它用法:\"></a>一些其它用法:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询 title 包含&quot;教&quot;字的文档：</span><br><span class=\"line\">db.col.find(&#123;title:/教/&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">查询 title 字段以&quot;教&quot;字开头的文档：</span><br><span class=\"line\">db.col.find(&#123;title:/^教/&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">查询 titl e字段以&quot;教&quot;字结尾的文档：</span><br><span class=\"line\">db.col.find(&#123;title:/教$/&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"MongoDB-AND-条件\"><a href=\"#MongoDB-AND-条件\" class=\"headerlink\" title=\"MongoDB AND 条件\"></a>MongoDB AND 条件</h4><p>MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。</p>\n<p>语法格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find(&#123;key1:value1, key2:value2&#125;).pretty()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"MongoDB-OR-条件\"><a href=\"#MongoDB-OR-条件\" class=\"headerlink\" title=\"MongoDB OR 条件\"></a>MongoDB OR 条件</h4><p>MongoDB OR 条件语句使用了关键字 $or,语法格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.col.find(</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      $or: [</span><br><span class=\"line\">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">).pretty()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"AND-和-OR-联合使用\"><a href=\"#AND-和-OR-联合使用\" class=\"headerlink\" title=\"AND 和 OR 联合使用\"></a>AND 和 OR 联合使用</h4><p>以下实例演示了 AND 和 OR 联合使用，类似常规 SQL 语句为：<code>&#39;where likes&gt;50 AND (by = &#39;菜鸟教程&#39; OR title = &#39;MongoDB 教程&#39;)&#39;</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.col.find(&#123;&quot;likes&quot;: &#123;$gt:50&#125;, $or: [&#123;&quot;by&quot;: &quot;菜鸟教程&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</span><br><span class=\"line\">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</span><br><span class=\"line\">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class=\"line\">        &quot;by&quot; : &quot;菜鸟教程&quot;,</span><br><span class=\"line\">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class=\"line\">        &quot;tags&quot; : [</span><br><span class=\"line\">                &quot;mongodb&quot;,</span><br><span class=\"line\">                &quot;database&quot;,</span><br><span class=\"line\">                &quot;NoSQL&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;likes&quot; : 100</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"skip-limilt-sort-三个放在一起执行的时候，执行的顺序是先-sort-然后是-skip-，最后是显示的limit-。\"><a href=\"#skip-limilt-sort-三个放在一起执行的时候，执行的顺序是先-sort-然后是-skip-，最后是显示的limit-。\" class=\"headerlink\" title=\"skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的limit()。\"></a>skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 <code>sort()</code>, 然后是 <code>skip()</code>，最后是显示的<code>limit()</code>。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.kos.find(&#123;$or:[&#123;&quot;monKey&quot;:&quot;monValue&quot;&#125;,&#123;&quot;value&quot;:&#123;$type:2&#125;,&quot;name&quot;:&quot;2&quot;&#125;]&#125;).limit(1).skip(1).pretty()</span><br></pre></td></tr></table></figure>\n<p>显示第二条结果</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"MongoDB-查询数据的语法格式如下：\"><a href=\"#MongoDB-查询数据的语法格式如下：\" class=\"headerlink\" title=\"MongoDB 查询数据的语法格式如下：\"></a>MongoDB 查询数据的语法格式如下：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure>\n<h4 id=\"MongoDB常用的条件操作符\"><a href=\"#MongoDB常用的条件操作符\" class=\"headerlink\" title=\"MongoDB常用的条件操作符:\"></a>MongoDB常用的条件操作符:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$gt -------- greater than  &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$gte --------- gt equal  &gt;=</span><br><span class=\"line\"></span><br><span class=\"line\">$lt -------- less than  &lt;</span><br><span class=\"line\"></span><br><span class=\"line\">$lte --------- lt equal  &lt;=</span><br><span class=\"line\"></span><br><span class=\"line\">$ne ----------- not equal  !=</span><br><span class=\"line\"></span><br><span class=\"line\">$eq  --------  equal  =</span><br></pre></td></tr></table></figure>\n<h4 id=\"一些其它用法\"><a href=\"#一些其它用法\" class=\"headerlink\" title=\"一些其它用法:\"></a>一些其它用法:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询 title 包含&quot;教&quot;字的文档：</span><br><span class=\"line\">db.col.find(&#123;title:/教/&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">查询 title 字段以&quot;教&quot;字开头的文档：</span><br><span class=\"line\">db.col.find(&#123;title:/^教/&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">查询 titl e字段以&quot;教&quot;字结尾的文档：</span><br><span class=\"line\">db.col.find(&#123;title:/教$/&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"MongoDB-AND-条件\"><a href=\"#MongoDB-AND-条件\" class=\"headerlink\" title=\"MongoDB AND 条件\"></a>MongoDB AND 条件</h4><p>MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。</p>\n<p>语法格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find(&#123;key1:value1, key2:value2&#125;).pretty()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"MongoDB-OR-条件\"><a href=\"#MongoDB-OR-条件\" class=\"headerlink\" title=\"MongoDB OR 条件\"></a>MongoDB OR 条件</h4><p>MongoDB OR 条件语句使用了关键字 $or,语法格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.col.find(</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      $or: [</span><br><span class=\"line\">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">).pretty()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"AND-和-OR-联合使用\"><a href=\"#AND-和-OR-联合使用\" class=\"headerlink\" title=\"AND 和 OR 联合使用\"></a>AND 和 OR 联合使用</h4><p>以下实例演示了 AND 和 OR 联合使用，类似常规 SQL 语句为：<code>&#39;where likes&gt;50 AND (by = &#39;菜鸟教程&#39; OR title = &#39;MongoDB 教程&#39;)&#39;</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.col.find(&#123;&quot;likes&quot;: &#123;$gt:50&#125;, $or: [&#123;&quot;by&quot;: &quot;菜鸟教程&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</span><br><span class=\"line\">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</span><br><span class=\"line\">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class=\"line\">        &quot;by&quot; : &quot;菜鸟教程&quot;,</span><br><span class=\"line\">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class=\"line\">        &quot;tags&quot; : [</span><br><span class=\"line\">                &quot;mongodb&quot;,</span><br><span class=\"line\">                &quot;database&quot;,</span><br><span class=\"line\">                &quot;NoSQL&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;likes&quot; : 100</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"skip-limilt-sort-三个放在一起执行的时候，执行的顺序是先-sort-然后是-skip-，最后是显示的limit-。\"><a href=\"#skip-limilt-sort-三个放在一起执行的时候，执行的顺序是先-sort-然后是-skip-，最后是显示的limit-。\" class=\"headerlink\" title=\"skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的limit()。\"></a>skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 <code>sort()</code>, 然后是 <code>skip()</code>，最后是显示的<code>limit()</code>。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.kos.find(&#123;$or:[&#123;&quot;monKey&quot;:&quot;monValue&quot;&#125;,&#123;&quot;value&quot;:&#123;$type:2&#125;,&quot;name&quot;:&quot;2&quot;&#125;]&#125;).limit(1).skip(1).pretty()</span><br></pre></td></tr></table></figure>\n<p>显示第二条结果</p>\n"},{"title":"MongoDB 聚合(三) aggregate()","_content":"\nMongoDB中聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。\n\naggregate() 方法的基本语法格式如下所示：\n```\n>db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)\n```\n##### 示例\n集合中的数据如下：\n```\n{\n   _id: ObjectId(7df78ad8902c)\n   title: 'MongoDB Overview', \n   description: 'MongoDB is no sql database',\n   by_user: 'runoob.com',\n   url: 'http://www.runoob.com',\n   tags: ['mongodb', 'database', 'NoSQL'],\n   likes: 100\n},\n{\n   _id: ObjectId(7df78ad8902d)\n   title: 'NoSQL Overview', \n   description: 'No sql database is very fast',\n   by_user: 'runoob.com',\n   url: 'http://www.runoob.com',\n   tags: ['mongodb', 'database', 'NoSQL'],\n   likes: 10\n},\n{\n   _id: ObjectId(7df78ad8902e)\n   title: 'Neo4j Overview', \n   description: 'Neo4j is no sql database',\n   by_user: 'Neo4j',\n   url: 'http://www.neo4j.com',\n   tags: ['neo4j', 'database', 'NoSQL'],\n   likes: 750\n},\n```\n现在我们通过以上集合计算每个作者所写的文章数，使用aggregate()计算结果如下：\n```\n> db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$sum : 1}}}])\n{\n   \"result\" : [\n      {\n         \"_id\" : \"runoob.com\",\n         \"num_tutorial\" : 2\n      },\n      {\n         \"_id\" : \"Neo4j\",\n         \"num_tutorial\" : 1\n      }\n   ],\n   \"ok\" : 1\n}\n```\n以上实例类似sql语句：\n` select by_user, count(*) from mycol group by by_user`\n\n在上面的例子中，我们通过字段 by_user 字段对数据进行分组，并计算 by_user 字段相同值的总和。\n\n下表展示了一些聚合的表达式:\n\n\n|表达式\t|描述\t|实例|\n| ------- | -------- | ------- |\n|$sum\t| 计算总和。\t| db.mycol.aggregate([{\\$group : {_id : \"\\$by_user\", num_tutorial : {\\$sum : \"\\$likes\"}}}])|\n\n\n| 水果        | 价格    |  数量  |\n| --------   |-----   | ---- |\n| 香蕉        | 2   |   5    |\n| 苹果        | 1      |   6    |\n| 草莓        | 1      |   7    |\n","source":"_posts/MongoDB 聚合(三) aggregate().md","raw":"---\ntitle: MongoDB 聚合(三) aggregate()\ncategories :\n- 技术\ntags :\n- Mongo\n---\n\nMongoDB中聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。\n\naggregate() 方法的基本语法格式如下所示：\n```\n>db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)\n```\n##### 示例\n集合中的数据如下：\n```\n{\n   _id: ObjectId(7df78ad8902c)\n   title: 'MongoDB Overview', \n   description: 'MongoDB is no sql database',\n   by_user: 'runoob.com',\n   url: 'http://www.runoob.com',\n   tags: ['mongodb', 'database', 'NoSQL'],\n   likes: 100\n},\n{\n   _id: ObjectId(7df78ad8902d)\n   title: 'NoSQL Overview', \n   description: 'No sql database is very fast',\n   by_user: 'runoob.com',\n   url: 'http://www.runoob.com',\n   tags: ['mongodb', 'database', 'NoSQL'],\n   likes: 10\n},\n{\n   _id: ObjectId(7df78ad8902e)\n   title: 'Neo4j Overview', \n   description: 'Neo4j is no sql database',\n   by_user: 'Neo4j',\n   url: 'http://www.neo4j.com',\n   tags: ['neo4j', 'database', 'NoSQL'],\n   likes: 750\n},\n```\n现在我们通过以上集合计算每个作者所写的文章数，使用aggregate()计算结果如下：\n```\n> db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$sum : 1}}}])\n{\n   \"result\" : [\n      {\n         \"_id\" : \"runoob.com\",\n         \"num_tutorial\" : 2\n      },\n      {\n         \"_id\" : \"Neo4j\",\n         \"num_tutorial\" : 1\n      }\n   ],\n   \"ok\" : 1\n}\n```\n以上实例类似sql语句：\n` select by_user, count(*) from mycol group by by_user`\n\n在上面的例子中，我们通过字段 by_user 字段对数据进行分组，并计算 by_user 字段相同值的总和。\n\n下表展示了一些聚合的表达式:\n\n\n|表达式\t|描述\t|实例|\n| ------- | -------- | ------- |\n|$sum\t| 计算总和。\t| db.mycol.aggregate([{\\$group : {_id : \"\\$by_user\", num_tutorial : {\\$sum : \"\\$likes\"}}}])|\n\n\n| 水果        | 价格    |  数量  |\n| --------   |-----   | ---- |\n| 香蕉        | 2   |   5    |\n| 苹果        | 1      |   6    |\n| 草莓        | 1      |   7    |\n","slug":"MongoDB 聚合(三) aggregate()","published":1,"date":"2019-05-21T02:36:43.915Z","updated":"2019-05-21T02:36:43.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbro002hm74zfczcgl6s","content":"<p>MongoDB中聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。</p>\n<p>aggregate() 方法的基本语法格式如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><p>集合中的数据如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   _id: ObjectId(7df78ad8902c)</span><br><span class=\"line\">   title: &apos;MongoDB Overview&apos;, </span><br><span class=\"line\">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class=\"line\">   by_user: &apos;runoob.com&apos;,</span><br><span class=\"line\">   url: &apos;http://www.runoob.com&apos;,</span><br><span class=\"line\">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class=\"line\">   likes: 100</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   _id: ObjectId(7df78ad8902d)</span><br><span class=\"line\">   title: &apos;NoSQL Overview&apos;, </span><br><span class=\"line\">   description: &apos;No sql database is very fast&apos;,</span><br><span class=\"line\">   by_user: &apos;runoob.com&apos;,</span><br><span class=\"line\">   url: &apos;http://www.runoob.com&apos;,</span><br><span class=\"line\">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class=\"line\">   likes: 10</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   _id: ObjectId(7df78ad8902e)</span><br><span class=\"line\">   title: &apos;Neo4j Overview&apos;, </span><br><span class=\"line\">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class=\"line\">   by_user: &apos;Neo4j&apos;,</span><br><span class=\"line\">   url: &apos;http://www.neo4j.com&apos;,</span><br><span class=\"line\">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class=\"line\">   likes: 750</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>现在我们通过以上集合计算每个作者所写的文章数，使用aggregate()计算结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;result&quot; : [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         &quot;_id&quot; : &quot;runoob.com&quot;,</span><br><span class=\"line\">         &quot;num_tutorial&quot; : 2</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class=\"line\">         &quot;num_tutorial&quot; : 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   ],</span><br><span class=\"line\">   &quot;ok&quot; : 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上实例类似sql语句：<br><code>select by_user, count(*) from mycol group by by_user</code></p>\n<p>在上面的例子中，我们通过字段 by_user 字段对数据进行分组，并计算 by_user 字段相同值的总和。</p>\n<p>下表展示了一些聚合的表达式:</p>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$sum</td>\n<td>计算总和。</td>\n<td>db.mycol.aggregate([{\\$group : {_id : “\\$by_user”, num_tutorial : {\\$sum : “\\$likes”}}}])</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>水果</th>\n<th>价格</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>香蕉</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>苹果</td>\n<td>1</td>\n<td>6</td>\n</tr>\n<tr>\n<td>草莓</td>\n<td>1</td>\n<td>7</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>MongoDB中聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。</p>\n<p>aggregate() 方法的基本语法格式如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><p>集合中的数据如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   _id: ObjectId(7df78ad8902c)</span><br><span class=\"line\">   title: &apos;MongoDB Overview&apos;, </span><br><span class=\"line\">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class=\"line\">   by_user: &apos;runoob.com&apos;,</span><br><span class=\"line\">   url: &apos;http://www.runoob.com&apos;,</span><br><span class=\"line\">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class=\"line\">   likes: 100</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   _id: ObjectId(7df78ad8902d)</span><br><span class=\"line\">   title: &apos;NoSQL Overview&apos;, </span><br><span class=\"line\">   description: &apos;No sql database is very fast&apos;,</span><br><span class=\"line\">   by_user: &apos;runoob.com&apos;,</span><br><span class=\"line\">   url: &apos;http://www.runoob.com&apos;,</span><br><span class=\"line\">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class=\"line\">   likes: 10</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   _id: ObjectId(7df78ad8902e)</span><br><span class=\"line\">   title: &apos;Neo4j Overview&apos;, </span><br><span class=\"line\">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class=\"line\">   by_user: &apos;Neo4j&apos;,</span><br><span class=\"line\">   url: &apos;http://www.neo4j.com&apos;,</span><br><span class=\"line\">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class=\"line\">   likes: 750</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>现在我们通过以上集合计算每个作者所写的文章数，使用aggregate()计算结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;result&quot; : [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         &quot;_id&quot; : &quot;runoob.com&quot;,</span><br><span class=\"line\">         &quot;num_tutorial&quot; : 2</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class=\"line\">         &quot;num_tutorial&quot; : 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   ],</span><br><span class=\"line\">   &quot;ok&quot; : 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上实例类似sql语句：<br><code>select by_user, count(*) from mycol group by by_user</code></p>\n<p>在上面的例子中，我们通过字段 by_user 字段对数据进行分组，并计算 by_user 字段相同值的总和。</p>\n<p>下表展示了一些聚合的表达式:</p>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$sum</td>\n<td>计算总和。</td>\n<td>db.mycol.aggregate([{\\$group : {_id : “\\$by_user”, num_tutorial : {\\$sum : “\\$likes”}}}])</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>水果</th>\n<th>价格</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>香蕉</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>苹果</td>\n<td>1</td>\n<td>6</td>\n</tr>\n<tr>\n<td>草莓</td>\n<td>1</td>\n<td>7</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"MongoDB 聚合(一) group","_content":"\nMongoDB目前提供了三个可以执行聚合操作的命令：`aggregate`、`mapReduce`、`group`.\n\n### 1.group\n##### 参数说明：\n - `key`：用来分组文档的字段。\n\n - `initial`: 每组都分享一个”初始化函数“\n\n - `reduce`: 执行的reduce函数，第一个参数是当前的文档对象，第二个参数是上一次function操作的累计对象，有多少个文档， $reduce就会调用多少次。\n\n - `condition`：（可选）执行过滤的条件\n\n - `finalize`：（可选）在reduce执行完成，结果集返回之前对结果集最终执行的函数。\n\n例如，我们按年级分组，查出每个年级的学生姓名：\n````\ndb.students.group({\nkey:{grade:true},\ninitial:{stuNames:[], count:0},\n$reduce:function(cur, prev){\nprev.stuNames.push(cur.name);\n}\n})\n```\n如果只想查询age大于20的人，group有这么两个可选参数: `condition` 和`finalize`：\n```\ndb.students.group({\nkey:{grade:true},\ninitial:{stuNames:[], count:0},\n$reduce:function(cur, prev){\nprev.stuNames.push(cur.name);\n},\nfinalize:function(prev){\nprev.count = prev.stuNames.length;\n},\ncondition:{age:{$gt:20}}\n})\n```\n```\n#查询每个栏目最贵的商品价格, max()操作\n{\n  key:{cat_id:1},\n  cond:{},\n  reduce:function(curr , result) {\n      if(curr.shop_price > result.max) {\n          result.max = curr.shop_price;\n      }\n  },\n  initial:{max:0}\n}\n\n#查询每个栏目下商品的平均价格\n{\n  key:{cat_id:1},\n  cond:{},\n  reduce:function(curr , result) {\n      result.cnt += 1;\n      result.sum += curr.shop_price;\n  },\n  initial:{sum:0,cnt:0},\n  finalize:function(result) {\n      result.avg = result.sum/result.cnt; //在每次分组完毕后进行运算\n  }\n}\n```\n##### group其实略微有点鸡肋,因为既然用到了mongodb,那复制集和分片是避无可免的,而group是不支持分片的运算\n\n","source":"_posts/MongoDB 聚合(一) group.md","raw":"---\ntitle: MongoDB 聚合(一) group\ncategories :\n- 技术\ntags :\n- MongoDB\n---\n\nMongoDB目前提供了三个可以执行聚合操作的命令：`aggregate`、`mapReduce`、`group`.\n\n### 1.group\n##### 参数说明：\n - `key`：用来分组文档的字段。\n\n - `initial`: 每组都分享一个”初始化函数“\n\n - `reduce`: 执行的reduce函数，第一个参数是当前的文档对象，第二个参数是上一次function操作的累计对象，有多少个文档， $reduce就会调用多少次。\n\n - `condition`：（可选）执行过滤的条件\n\n - `finalize`：（可选）在reduce执行完成，结果集返回之前对结果集最终执行的函数。\n\n例如，我们按年级分组，查出每个年级的学生姓名：\n````\ndb.students.group({\nkey:{grade:true},\ninitial:{stuNames:[], count:0},\n$reduce:function(cur, prev){\nprev.stuNames.push(cur.name);\n}\n})\n```\n如果只想查询age大于20的人，group有这么两个可选参数: `condition` 和`finalize`：\n```\ndb.students.group({\nkey:{grade:true},\ninitial:{stuNames:[], count:0},\n$reduce:function(cur, prev){\nprev.stuNames.push(cur.name);\n},\nfinalize:function(prev){\nprev.count = prev.stuNames.length;\n},\ncondition:{age:{$gt:20}}\n})\n```\n```\n#查询每个栏目最贵的商品价格, max()操作\n{\n  key:{cat_id:1},\n  cond:{},\n  reduce:function(curr , result) {\n      if(curr.shop_price > result.max) {\n          result.max = curr.shop_price;\n      }\n  },\n  initial:{max:0}\n}\n\n#查询每个栏目下商品的平均价格\n{\n  key:{cat_id:1},\n  cond:{},\n  reduce:function(curr , result) {\n      result.cnt += 1;\n      result.sum += curr.shop_price;\n  },\n  initial:{sum:0,cnt:0},\n  finalize:function(result) {\n      result.avg = result.sum/result.cnt; //在每次分组完毕后进行运算\n  }\n}\n```\n##### group其实略微有点鸡肋,因为既然用到了mongodb,那复制集和分片是避无可免的,而group是不支持分片的运算\n\n","slug":"MongoDB 聚合(一) group","published":1,"date":"2019-05-21T02:36:43.914Z","updated":"2019-05-21T02:36:43.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbrq002lm74zj6datnum","content":"<p>MongoDB目前提供了三个可以执行聚合操作的命令：<code>aggregate</code>、<code>mapReduce</code>、<code>group</code>.</p>\n<h3 id=\"1-group\"><a href=\"#1-group\" class=\"headerlink\" title=\"1.group\"></a>1.group</h3><h5 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h5><ul>\n<li><p><code>key</code>：用来分组文档的字段。</p>\n</li>\n<li><p><code>initial</code>: 每组都分享一个”初始化函数“</p>\n</li>\n<li><p><code>reduce</code>: 执行的reduce函数，第一个参数是当前的文档对象，第二个参数是上一次function操作的累计对象，有多少个文档， $reduce就会调用多少次。</p>\n</li>\n<li><p><code>condition</code>：（可选）执行过滤的条件</p>\n</li>\n<li><p><code>finalize</code>：（可选）在reduce执行完成，结果集返回之前对结果集最终执行的函数。</p>\n</li>\n</ul>\n<p>例如，我们按年级分组，查出每个年级的学生姓名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.students.group(&#123;</span><br><span class=\"line\">key:&#123;grade:true&#125;,</span><br><span class=\"line\">initial:&#123;stuNames:[], count:0&#125;,</span><br><span class=\"line\">$reduce:function(cur, prev)&#123;</span><br><span class=\"line\">prev.stuNames.push(cur.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>如果只想查询age大于20的人，group有这么两个可选参数: <code>condition</code> 和<code>finalize</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.students.group(&#123;</span><br><span class=\"line\">key:&#123;grade:true&#125;,</span><br><span class=\"line\">initial:&#123;stuNames:[], count:0&#125;,</span><br><span class=\"line\">$reduce:function(cur, prev)&#123;</span><br><span class=\"line\">prev.stuNames.push(cur.name);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">finalize:function(prev)&#123;</span><br><span class=\"line\">prev.count = prev.stuNames.length;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">condition:&#123;age:&#123;$gt:20&#125;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询每个栏目最贵的商品价格, max()操作</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  key:&#123;cat_id:1&#125;,</span><br><span class=\"line\">  cond:&#123;&#125;,</span><br><span class=\"line\">  reduce:function(curr , result) &#123;</span><br><span class=\"line\">      if(curr.shop_price &gt; result.max) &#123;</span><br><span class=\"line\">          result.max = curr.shop_price;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  initial:&#123;max:0&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#查询每个栏目下商品的平均价格</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  key:&#123;cat_id:1&#125;,</span><br><span class=\"line\">  cond:&#123;&#125;,</span><br><span class=\"line\">  reduce:function(curr , result) &#123;</span><br><span class=\"line\">      result.cnt += 1;</span><br><span class=\"line\">      result.sum += curr.shop_price;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  initial:&#123;sum:0,cnt:0&#125;,</span><br><span class=\"line\">  finalize:function(result) &#123;</span><br><span class=\"line\">      result.avg = result.sum/result.cnt; //在每次分组完毕后进行运算</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"group其实略微有点鸡肋-因为既然用到了mongodb-那复制集和分片是避无可免的-而group是不支持分片的运算\"><a href=\"#group其实略微有点鸡肋-因为既然用到了mongodb-那复制集和分片是避无可免的-而group是不支持分片的运算\" class=\"headerlink\" title=\"group其实略微有点鸡肋,因为既然用到了mongodb,那复制集和分片是避无可免的,而group是不支持分片的运算\"></a>group其实略微有点鸡肋,因为既然用到了mongodb,那复制集和分片是避无可免的,而group是不支持分片的运算</h5>","site":{"data":{}},"excerpt":"","more":"<p>MongoDB目前提供了三个可以执行聚合操作的命令：<code>aggregate</code>、<code>mapReduce</code>、<code>group</code>.</p>\n<h3 id=\"1-group\"><a href=\"#1-group\" class=\"headerlink\" title=\"1.group\"></a>1.group</h3><h5 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h5><ul>\n<li><p><code>key</code>：用来分组文档的字段。</p>\n</li>\n<li><p><code>initial</code>: 每组都分享一个”初始化函数“</p>\n</li>\n<li><p><code>reduce</code>: 执行的reduce函数，第一个参数是当前的文档对象，第二个参数是上一次function操作的累计对象，有多少个文档， $reduce就会调用多少次。</p>\n</li>\n<li><p><code>condition</code>：（可选）执行过滤的条件</p>\n</li>\n<li><p><code>finalize</code>：（可选）在reduce执行完成，结果集返回之前对结果集最终执行的函数。</p>\n</li>\n</ul>\n<p>例如，我们按年级分组，查出每个年级的学生姓名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.students.group(&#123;</span><br><span class=\"line\">key:&#123;grade:true&#125;,</span><br><span class=\"line\">initial:&#123;stuNames:[], count:0&#125;,</span><br><span class=\"line\">$reduce:function(cur, prev)&#123;</span><br><span class=\"line\">prev.stuNames.push(cur.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>如果只想查询age大于20的人，group有这么两个可选参数: <code>condition</code> 和<code>finalize</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.students.group(&#123;</span><br><span class=\"line\">key:&#123;grade:true&#125;,</span><br><span class=\"line\">initial:&#123;stuNames:[], count:0&#125;,</span><br><span class=\"line\">$reduce:function(cur, prev)&#123;</span><br><span class=\"line\">prev.stuNames.push(cur.name);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">finalize:function(prev)&#123;</span><br><span class=\"line\">prev.count = prev.stuNames.length;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">condition:&#123;age:&#123;$gt:20&#125;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询每个栏目最贵的商品价格, max()操作</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  key:&#123;cat_id:1&#125;,</span><br><span class=\"line\">  cond:&#123;&#125;,</span><br><span class=\"line\">  reduce:function(curr , result) &#123;</span><br><span class=\"line\">      if(curr.shop_price &gt; result.max) &#123;</span><br><span class=\"line\">          result.max = curr.shop_price;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  initial:&#123;max:0&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#查询每个栏目下商品的平均价格</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  key:&#123;cat_id:1&#125;,</span><br><span class=\"line\">  cond:&#123;&#125;,</span><br><span class=\"line\">  reduce:function(curr , result) &#123;</span><br><span class=\"line\">      result.cnt += 1;</span><br><span class=\"line\">      result.sum += curr.shop_price;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  initial:&#123;sum:0,cnt:0&#125;,</span><br><span class=\"line\">  finalize:function(result) &#123;</span><br><span class=\"line\">      result.avg = result.sum/result.cnt; //在每次分组完毕后进行运算</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"group其实略微有点鸡肋-因为既然用到了mongodb-那复制集和分片是避无可免的-而group是不支持分片的运算\"><a href=\"#group其实略微有点鸡肋-因为既然用到了mongodb-那复制集和分片是避无可免的-而group是不支持分片的运算\" class=\"headerlink\" title=\"group其实略微有点鸡肋,因为既然用到了mongodb,那复制集和分片是避无可免的,而group是不支持分片的运算\"></a>group其实略微有点鸡肋,因为既然用到了mongodb,那复制集和分片是避无可免的,而group是不支持分片的运算</h5>"},{"title":"Mongo的一些操作","_content":"\n首先是连接mongo:\n` mongo 127.0.0.1:34004`\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Mongo的一些操作.md","raw":"---\ntitle: Mongo的一些操作\ncategories :\n- 技术\ntags :\n- Java\n- MongoDB\n---\n\n首先是连接mongo:\n` mongo 127.0.0.1:34004`\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Mongo的一些操作","published":1,"date":"2019-05-21T02:36:43.916Z","updated":"2019-05-21T02:36:43.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbrt002om74zd8xoxkp9","content":"<p>首先是连接mongo:<br><code>mongo 127.0.0.1:34004</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先是连接mongo:<br><code>mongo 127.0.0.1:34004</code></p>\n"},{"title":"PHP数据类型","_content":"\n####php支持8种原始类型,包括4种标量类型,即boolean,integer,float/double和string; 2种符合类型,array(数组)和object(对象); 2种特殊类型,即resource(资源)和null.\n</b>\n#### 1. 布尔型(boolean)\n只有true或false,在一些特殊情况下0、0.0、'0'、\"0\"、空白字符串(\"\")、只声明没有赋值的数组等也被认为是false.\n\n``` \n<?php \n$i='0';\nif ($i==false){\n    echo \"false!\";\n}elseif($i==true){\n    echo \"true!\";\n}else{\n    echo \"other!\";\n}\n?>\n```\n\n\\$i='0' 输出 false!\n$i=-1 输出 true!\n\n#### 2. 字符串型\n\n字符串中mei ge字符占1个字节,有三种定义字符串的方式,分别是单引号(')、双引号(\")和定界符(<<<).\n单引号和双引号时经常被使用过的方式,格式如下:\n` $a='字符串'` 或 `$a=\"字符串\"`\n两者的不同之处在于,双引号所包含的变量会被自动替换成实际数值.\n\n```\n<?php\n//string\n$i='只会看到一遍';\necho \"$i\";\necho '$i';\n?>\n```\n\n结果为输出 `只会看到一遍$i`\n\n##### 定界符: \n在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。\n\n```\n<?php\n//定界符\n$i='aaaa';\necho <<<dsdsd\n定界符里面的内容1。\n<p>\n$i\n<p>\n里面的内容2。\ndsdsd;\n?>\n```\n\n输出:\n```\n定界符里面的内容1。\naaaa\n里面的内容2。\n```\n\n\n#### 3.整型(integer)\n整型书可以用八进制、十进制和十六进制来表示.八进制前面加0,十六进制前面加0x.\n```\n<?php\n//整型\n$str1 = 12345678;\n$str2 = 0x12345678;\n$str3 = 01234567;\necho '十进制：'.$str1.' <p>';\necho \"十六进制：$str2 <p>\";\necho \"八进制：$str3 <p>\";\n?>\n```\n结果输出:\n```\n十进制：12345678\n十六进制：305419896\n八进制：342391\n```\n\n#### 4.浮点数\n浮点数可以用标准格式和科学技术发格式来写\n```\n<?php\n//浮点数\necho '圆周率的3种写法：<p>';\necho '第一种：pi()='.pi().'<p>';        #调用pi()函数输出\necho '第二种：3.14159265359='. 3.14159265359.'<p>';\necho '第三种: 314159265359E-11='. 314159265359E-11.'<p>';  //科学技术法格式\n?>\n```\n\n```\n圆周率的3种写法：\n第一种：pi()=3.1415926535898\n第二种：3.14159265359=3.14159265359\n第三种: 314159265359E-11=3.14159265359\n```\n\n#### 5.数组\n\n```\n<?php\n$arr1=array(\"this\",\"is\",\"an\",\"example\");\n$arr2=array(0=>\"php\",\"sss\"=>\"java\");\n$arr3[\"aaa\"]=\"bbb\";\n\necho \"$arr1[0]  <p>\";\necho \"$arr2[0] <p>\";\necho ''.$arr2[\"sss\"].' <p>';\necho $arr3[\"aaa\"];\n?>\n\n```\n输出:\n```\nthis\nphp\njava\nbbb\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/PHP数据类型.md","raw":"---\ntitle: PHP数据类型\ncategories :\n- 技术\ntags :\n- PHP\n---\n\n####php支持8种原始类型,包括4种标量类型,即boolean,integer,float/double和string; 2种符合类型,array(数组)和object(对象); 2种特殊类型,即resource(资源)和null.\n</b>\n#### 1. 布尔型(boolean)\n只有true或false,在一些特殊情况下0、0.0、'0'、\"0\"、空白字符串(\"\")、只声明没有赋值的数组等也被认为是false.\n\n``` \n<?php \n$i='0';\nif ($i==false){\n    echo \"false!\";\n}elseif($i==true){\n    echo \"true!\";\n}else{\n    echo \"other!\";\n}\n?>\n```\n\n\\$i='0' 输出 false!\n$i=-1 输出 true!\n\n#### 2. 字符串型\n\n字符串中mei ge字符占1个字节,有三种定义字符串的方式,分别是单引号(')、双引号(\")和定界符(<<<).\n单引号和双引号时经常被使用过的方式,格式如下:\n` $a='字符串'` 或 `$a=\"字符串\"`\n两者的不同之处在于,双引号所包含的变量会被自动替换成实际数值.\n\n```\n<?php\n//string\n$i='只会看到一遍';\necho \"$i\";\necho '$i';\n?>\n```\n\n结果为输出 `只会看到一遍$i`\n\n##### 定界符: \n在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。\n\n```\n<?php\n//定界符\n$i='aaaa';\necho <<<dsdsd\n定界符里面的内容1。\n<p>\n$i\n<p>\n里面的内容2。\ndsdsd;\n?>\n```\n\n输出:\n```\n定界符里面的内容1。\naaaa\n里面的内容2。\n```\n\n\n#### 3.整型(integer)\n整型书可以用八进制、十进制和十六进制来表示.八进制前面加0,十六进制前面加0x.\n```\n<?php\n//整型\n$str1 = 12345678;\n$str2 = 0x12345678;\n$str3 = 01234567;\necho '十进制：'.$str1.' <p>';\necho \"十六进制：$str2 <p>\";\necho \"八进制：$str3 <p>\";\n?>\n```\n结果输出:\n```\n十进制：12345678\n十六进制：305419896\n八进制：342391\n```\n\n#### 4.浮点数\n浮点数可以用标准格式和科学技术发格式来写\n```\n<?php\n//浮点数\necho '圆周率的3种写法：<p>';\necho '第一种：pi()='.pi().'<p>';        #调用pi()函数输出\necho '第二种：3.14159265359='. 3.14159265359.'<p>';\necho '第三种: 314159265359E-11='. 314159265359E-11.'<p>';  //科学技术法格式\n?>\n```\n\n```\n圆周率的3种写法：\n第一种：pi()=3.1415926535898\n第二种：3.14159265359=3.14159265359\n第三种: 314159265359E-11=3.14159265359\n```\n\n#### 5.数组\n\n```\n<?php\n$arr1=array(\"this\",\"is\",\"an\",\"example\");\n$arr2=array(0=>\"php\",\"sss\"=>\"java\");\n$arr3[\"aaa\"]=\"bbb\";\n\necho \"$arr1[0]  <p>\";\necho \"$arr2[0] <p>\";\necho ''.$arr2[\"sss\"].' <p>';\necho $arr3[\"aaa\"];\n?>\n\n```\n输出:\n```\nthis\nphp\njava\nbbb\n```\n\n\n\n\n\n\n\n\n\n","slug":"PHP数据类型","published":1,"date":"2019-05-21T02:36:43.917Z","updated":"2019-05-21T02:36:43.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbrv002sm74zh3mis9gy","content":"<p>####php支持8种原始类型,包括4种标量类型,即boolean,integer,float/double和string; 2种符合类型,array(数组)和object(对象); 2种特殊类型,即resource(资源)和null.<br></p>\n<h4 id=\"1-布尔型-boolean\"><a href=\"#1-布尔型-boolean\" class=\"headerlink\" title=\"1. 布尔型(boolean)\"></a>1. 布尔型(boolean)</h4><p>只有true或false,在一些特殊情况下0、0.0、’0’、”0”、空白字符串(“”)、只声明没有赋值的数组等也被认为是false.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">$i=&apos;0&apos;;</span><br><span class=\"line\">if ($i==false)&#123;</span><br><span class=\"line\">    echo &quot;false!&quot;;</span><br><span class=\"line\">&#125;elseif($i==true)&#123;</span><br><span class=\"line\">    echo &quot;true!&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;other!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>\\$i=’0’ 输出 false!<br>$i=-1 输出 true!</p>\n<h4 id=\"2-字符串型\"><a href=\"#2-字符串型\" class=\"headerlink\" title=\"2. 字符串型\"></a>2. 字符串型</h4><p>字符串中mei ge字符占1个字节,有三种定义字符串的方式,分别是单引号(‘)、双引号(“)和定界符(&lt;&lt;&lt;).<br>单引号和双引号时经常被使用过的方式,格式如下:<br><code>$a=&#39;字符串&#39;</code> 或 <code>$a=&quot;字符串&quot;</code><br>两者的不同之处在于,双引号所包含的变量会被自动替换成实际数值.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//string</span><br><span class=\"line\">$i=&apos;只会看到一遍&apos;;</span><br><span class=\"line\">echo &quot;$i&quot;;</span><br><span class=\"line\">echo &apos;$i&apos;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>结果为输出 <code>只会看到一遍$i</code></p>\n<h5 id=\"定界符\"><a href=\"#定界符\" class=\"headerlink\" title=\"定界符:\"></a>定界符:</h5><p>在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//定界符</span><br><span class=\"line\">$i=&apos;aaaa&apos;;</span><br><span class=\"line\">echo &lt;&lt;&lt;dsdsd</span><br><span class=\"line\">定界符里面的内容1。</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">$i</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">里面的内容2。</span><br><span class=\"line\">dsdsd;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定界符里面的内容1。</span><br><span class=\"line\">aaaa</span><br><span class=\"line\">里面的内容2。</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-整型-integer\"><a href=\"#3-整型-integer\" class=\"headerlink\" title=\"3.整型(integer)\"></a>3.整型(integer)</h4><p>整型书可以用八进制、十进制和十六进制来表示.八进制前面加0,十六进制前面加0x.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//整型</span><br><span class=\"line\">$str1 = 12345678;</span><br><span class=\"line\">$str2 = 0x12345678;</span><br><span class=\"line\">$str3 = 01234567;</span><br><span class=\"line\">echo &apos;十进制：&apos;.$str1.&apos; &lt;p&gt;&apos;;</span><br><span class=\"line\">echo &quot;十六进制：$str2 &lt;p&gt;&quot;;</span><br><span class=\"line\">echo &quot;八进制：$str3 &lt;p&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>结果输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">十进制：12345678</span><br><span class=\"line\">十六进制：305419896</span><br><span class=\"line\">八进制：342391</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-浮点数\"><a href=\"#4-浮点数\" class=\"headerlink\" title=\"4.浮点数\"></a>4.浮点数</h4><p>浮点数可以用标准格式和科学技术发格式来写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//浮点数</span><br><span class=\"line\">echo &apos;圆周率的3种写法：&lt;p&gt;&apos;;</span><br><span class=\"line\">echo &apos;第一种：pi()=&apos;.pi().&apos;&lt;p&gt;&apos;;        #调用pi()函数输出</span><br><span class=\"line\">echo &apos;第二种：3.14159265359=&apos;. 3.14159265359.&apos;&lt;p&gt;&apos;;</span><br><span class=\"line\">echo &apos;第三种: 314159265359E-11=&apos;. 314159265359E-11.&apos;&lt;p&gt;&apos;;  //科学技术法格式</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">圆周率的3种写法：</span><br><span class=\"line\">第一种：pi()=3.1415926535898</span><br><span class=\"line\">第二种：3.14159265359=3.14159265359</span><br><span class=\"line\">第三种: 314159265359E-11=3.14159265359</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-数组\"><a href=\"#5-数组\" class=\"headerlink\" title=\"5.数组\"></a>5.数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$arr1=array(&quot;this&quot;,&quot;is&quot;,&quot;an&quot;,&quot;example&quot;);</span><br><span class=\"line\">$arr2=array(0=&gt;&quot;php&quot;,&quot;sss&quot;=&gt;&quot;java&quot;);</span><br><span class=\"line\">$arr3[&quot;aaa&quot;]=&quot;bbb&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;$arr1[0]  &lt;p&gt;&quot;;</span><br><span class=\"line\">echo &quot;$arr2[0] &lt;p&gt;&quot;;</span><br><span class=\"line\">echo &apos;&apos;.$arr2[&quot;sss&quot;].&apos; &lt;p&gt;&apos;;</span><br><span class=\"line\">echo $arr3[&quot;aaa&quot;];</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this</span><br><span class=\"line\">php</span><br><span class=\"line\">java</span><br><span class=\"line\">bbb</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>####php支持8种原始类型,包括4种标量类型,即boolean,integer,float/double和string; 2种符合类型,array(数组)和object(对象); 2种特殊类型,即resource(资源)和null.<br></p>\n<h4 id=\"1-布尔型-boolean\"><a href=\"#1-布尔型-boolean\" class=\"headerlink\" title=\"1. 布尔型(boolean)\"></a>1. 布尔型(boolean)</h4><p>只有true或false,在一些特殊情况下0、0.0、’0’、”0”、空白字符串(“”)、只声明没有赋值的数组等也被认为是false.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">$i=&apos;0&apos;;</span><br><span class=\"line\">if ($i==false)&#123;</span><br><span class=\"line\">    echo &quot;false!&quot;;</span><br><span class=\"line\">&#125;elseif($i==true)&#123;</span><br><span class=\"line\">    echo &quot;true!&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;other!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>\\$i=’0’ 输出 false!<br>$i=-1 输出 true!</p>\n<h4 id=\"2-字符串型\"><a href=\"#2-字符串型\" class=\"headerlink\" title=\"2. 字符串型\"></a>2. 字符串型</h4><p>字符串中mei ge字符占1个字节,有三种定义字符串的方式,分别是单引号(‘)、双引号(“)和定界符(&lt;&lt;&lt;).<br>单引号和双引号时经常被使用过的方式,格式如下:<br><code>$a=&#39;字符串&#39;</code> 或 <code>$a=&quot;字符串&quot;</code><br>两者的不同之处在于,双引号所包含的变量会被自动替换成实际数值.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//string</span><br><span class=\"line\">$i=&apos;只会看到一遍&apos;;</span><br><span class=\"line\">echo &quot;$i&quot;;</span><br><span class=\"line\">echo &apos;$i&apos;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>结果为输出 <code>只会看到一遍$i</code></p>\n<h5 id=\"定界符\"><a href=\"#定界符\" class=\"headerlink\" title=\"定界符:\"></a>定界符:</h5><p>在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//定界符</span><br><span class=\"line\">$i=&apos;aaaa&apos;;</span><br><span class=\"line\">echo &lt;&lt;&lt;dsdsd</span><br><span class=\"line\">定界符里面的内容1。</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">$i</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">里面的内容2。</span><br><span class=\"line\">dsdsd;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定界符里面的内容1。</span><br><span class=\"line\">aaaa</span><br><span class=\"line\">里面的内容2。</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-整型-integer\"><a href=\"#3-整型-integer\" class=\"headerlink\" title=\"3.整型(integer)\"></a>3.整型(integer)</h4><p>整型书可以用八进制、十进制和十六进制来表示.八进制前面加0,十六进制前面加0x.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//整型</span><br><span class=\"line\">$str1 = 12345678;</span><br><span class=\"line\">$str2 = 0x12345678;</span><br><span class=\"line\">$str3 = 01234567;</span><br><span class=\"line\">echo &apos;十进制：&apos;.$str1.&apos; &lt;p&gt;&apos;;</span><br><span class=\"line\">echo &quot;十六进制：$str2 &lt;p&gt;&quot;;</span><br><span class=\"line\">echo &quot;八进制：$str3 &lt;p&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>结果输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">十进制：12345678</span><br><span class=\"line\">十六进制：305419896</span><br><span class=\"line\">八进制：342391</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-浮点数\"><a href=\"#4-浮点数\" class=\"headerlink\" title=\"4.浮点数\"></a>4.浮点数</h4><p>浮点数可以用标准格式和科学技术发格式来写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//浮点数</span><br><span class=\"line\">echo &apos;圆周率的3种写法：&lt;p&gt;&apos;;</span><br><span class=\"line\">echo &apos;第一种：pi()=&apos;.pi().&apos;&lt;p&gt;&apos;;        #调用pi()函数输出</span><br><span class=\"line\">echo &apos;第二种：3.14159265359=&apos;. 3.14159265359.&apos;&lt;p&gt;&apos;;</span><br><span class=\"line\">echo &apos;第三种: 314159265359E-11=&apos;. 314159265359E-11.&apos;&lt;p&gt;&apos;;  //科学技术法格式</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">圆周率的3种写法：</span><br><span class=\"line\">第一种：pi()=3.1415926535898</span><br><span class=\"line\">第二种：3.14159265359=3.14159265359</span><br><span class=\"line\">第三种: 314159265359E-11=3.14159265359</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-数组\"><a href=\"#5-数组\" class=\"headerlink\" title=\"5.数组\"></a>5.数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$arr1=array(&quot;this&quot;,&quot;is&quot;,&quot;an&quot;,&quot;example&quot;);</span><br><span class=\"line\">$arr2=array(0=&gt;&quot;php&quot;,&quot;sss&quot;=&gt;&quot;java&quot;);</span><br><span class=\"line\">$arr3[&quot;aaa&quot;]=&quot;bbb&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;$arr1[0]  &lt;p&gt;&quot;;</span><br><span class=\"line\">echo &quot;$arr2[0] &lt;p&gt;&quot;;</span><br><span class=\"line\">echo &apos;&apos;.$arr2[&quot;sss&quot;].&apos; &lt;p&gt;&apos;;</span><br><span class=\"line\">echo $arr3[&quot;aaa&quot;];</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this</span><br><span class=\"line\">php</span><br><span class=\"line\">java</span><br><span class=\"line\">bbb</span><br></pre></td></tr></table></figure></p>\n"},{"title":"MongoDB 聚合(二) MpaReduce","_content":"\n(可参考:http://www.runoob.com/mongodb/mongodb-map-reduce.html)\n\nMap-Reduce是一种计算模型，简单的说就是将大批量的工作（数据）分解（MAP）执行，然后再将结果合并成最终结果（REDUCE）。\n\nMongoDB提供的Map-Reduce非常灵活，对于大规模数据分析也相当实用。\n以下是MapReduce的基本语法：\n```\n>db.collection.mapReduce(\n   function() {emit(key,value);},  //map 函数\n   function(key,values) {return reduceFunction},   //reduce 函数\n   {\n      out: collection,\n      query: document,\n      sort: document,\n      limit: number\n   }\n)\n```\n使用 MapReduce 要实现两个函数 Map 函数和 Reduce 函数,Map 函数调用 emit(key, value), 遍历 collection 中所有的记录, 将 key 与 value 传递给 Reduce 函数进行处理。\n\nMap 函数必须调用 emit(key, value) 返回键值对。\n参数说明:\n - `map` ：映射函数 (生成键值对序列,作为 reduce 函数参数)。\n - `reduce` 统计函数，reduce函数的任务就是将key-values变成key-value，也就是把values数组变成一个单一的值value。。\n - `out` 统计结果存放集合 (不指定则使用临时集合,在客户端断开后自动删除)。\n - `query` 一个筛选条件，只有满足条件的文档才会调用map函数。（query。limit，sort可以随意组合）\n - `sort` 和limit结合的sort排序参数（也是在发往map函数前给文档排序），可以优化分组机制\n - `limit` 发往map函数的文档数量的上限（要是没有limit，单独使用sort的用处不大）\n\n以下实例在集合 orders 中查找 status:\"A\" 的数据，并根据 cust_id 来分组，并计算 amount 的总和。\n\nhttp://www.runoob.com/mongodb/mongodb-map-reduce.html\n\n\n考虑以下文档结构存储用户的文章，文档存储了用户的 user_name 和文章的 status 字段：\n```\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"mark\",\n   \"status\":\"active\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"mark\",\n   \"status\":\"active\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"mark\",\n   \"status\":\"active\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"mark\",\n   \"status\":\"active\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"mark\",\n   \"status\":\"disabled\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"runoob\",\n   \"status\":\"disabled\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"runoob\",\n   \"status\":\"disabled\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"runoob\",\n   \"status\":\"active\"\n})\nWriteResult({ \"nInserted\" : 1 })\n```\n现在，我们将在 posts 集合中使用 mapReduce 函数来选取已发布的文章(status:\"active\")，并通过user_name分组，计算每个用户的文章数：\n```\n>db.posts.mapReduce( \n   function() { emit(this.user_name,1); }, \n   function(key, values) {return Array.sum(values)}, \n      {  \n         query:{status:\"active\"},  \n         out:\"post_total\" \n      }\n)\n```\n以上 mapReduce 输出结果为：\n```\n{\n        \"result\" : \"post_total\",\n        \"timeMillis\" : 23,\n        \"counts\" : {\n                \"input\" : 5,\n                \"emit\" : 5,\n                \"reduce\" : 1,\n                \"output\" : 2\n        },\n        \"ok\" : 1\n}\n```\n结果表明，共有 5 个符合查询条件（status:\"active\"）的文档， 在map函数中生成了 5 个键值对文档，最后使用reduce函数将相同的键值分为 2 组。\n\n具体参数说明：\n\n - `result`：储存结果的collection的名字,这是个临时集合，MapReduce的连接关闭后自动就被删除了。\n - `timeMillis`：执行花费的时间，毫秒为单位\n - `input`：满足条件被发送到map函数的文档个数\n - `emit`：在map函数中emit被调用的次数，也就是所有集合中的数据总量\n - `ouput`：结果集合中的文档个数（count对调试非常有帮助）\n - `ok`：是否成功，成功为1\n - `err`：如果失败，这里可以有失败原因，不过从经验上来看，原因比较模糊，作用不大\n\n使用 find 操作符来查看 mapReduce 的查询结果：\n```\n>db.posts.mapReduce( \n   function() { emit(this.user_name,1); }, \n   function(key, values) {return Array.sum(values)}, \n      {  \n         query:{status:\"active\"},  \n         out:\"post_total\" \n      }\n).find()\n```\n以上查询显示如下结果:\n```\n{ \"_id\" : \"mark\", \"value\" : 4 }\n{ \"_id\" : \"runoob\", \"value\" : 1 }\n```\n用类似的方式，MapReduce可以被用来构建大型复杂的聚合查询。\n\nMap函数和Reduce函数可以使用 JavaScript 来实现，使得MapReduce的使用非常灵活和强大。\n\n","source":"_posts/MongoDB 聚合(二) MapReduce.md","raw":"---\ntitle: MongoDB 聚合(二) MpaReduce\ncategories :\n- 技术\ntags :\n- Mongo\n---\n\n(可参考:http://www.runoob.com/mongodb/mongodb-map-reduce.html)\n\nMap-Reduce是一种计算模型，简单的说就是将大批量的工作（数据）分解（MAP）执行，然后再将结果合并成最终结果（REDUCE）。\n\nMongoDB提供的Map-Reduce非常灵活，对于大规模数据分析也相当实用。\n以下是MapReduce的基本语法：\n```\n>db.collection.mapReduce(\n   function() {emit(key,value);},  //map 函数\n   function(key,values) {return reduceFunction},   //reduce 函数\n   {\n      out: collection,\n      query: document,\n      sort: document,\n      limit: number\n   }\n)\n```\n使用 MapReduce 要实现两个函数 Map 函数和 Reduce 函数,Map 函数调用 emit(key, value), 遍历 collection 中所有的记录, 将 key 与 value 传递给 Reduce 函数进行处理。\n\nMap 函数必须调用 emit(key, value) 返回键值对。\n参数说明:\n - `map` ：映射函数 (生成键值对序列,作为 reduce 函数参数)。\n - `reduce` 统计函数，reduce函数的任务就是将key-values变成key-value，也就是把values数组变成一个单一的值value。。\n - `out` 统计结果存放集合 (不指定则使用临时集合,在客户端断开后自动删除)。\n - `query` 一个筛选条件，只有满足条件的文档才会调用map函数。（query。limit，sort可以随意组合）\n - `sort` 和limit结合的sort排序参数（也是在发往map函数前给文档排序），可以优化分组机制\n - `limit` 发往map函数的文档数量的上限（要是没有limit，单独使用sort的用处不大）\n\n以下实例在集合 orders 中查找 status:\"A\" 的数据，并根据 cust_id 来分组，并计算 amount 的总和。\n\nhttp://www.runoob.com/mongodb/mongodb-map-reduce.html\n\n\n考虑以下文档结构存储用户的文章，文档存储了用户的 user_name 和文章的 status 字段：\n```\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"mark\",\n   \"status\":\"active\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"mark\",\n   \"status\":\"active\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"mark\",\n   \"status\":\"active\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"mark\",\n   \"status\":\"active\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"mark\",\n   \"status\":\"disabled\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"runoob\",\n   \"status\":\"disabled\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"runoob\",\n   \"status\":\"disabled\"\n})\nWriteResult({ \"nInserted\" : 1 })\n>db.posts.insert({\n   \"post_text\": \"菜鸟教程，最全的技术文档。\",\n   \"user_name\": \"runoob\",\n   \"status\":\"active\"\n})\nWriteResult({ \"nInserted\" : 1 })\n```\n现在，我们将在 posts 集合中使用 mapReduce 函数来选取已发布的文章(status:\"active\")，并通过user_name分组，计算每个用户的文章数：\n```\n>db.posts.mapReduce( \n   function() { emit(this.user_name,1); }, \n   function(key, values) {return Array.sum(values)}, \n      {  \n         query:{status:\"active\"},  \n         out:\"post_total\" \n      }\n)\n```\n以上 mapReduce 输出结果为：\n```\n{\n        \"result\" : \"post_total\",\n        \"timeMillis\" : 23,\n        \"counts\" : {\n                \"input\" : 5,\n                \"emit\" : 5,\n                \"reduce\" : 1,\n                \"output\" : 2\n        },\n        \"ok\" : 1\n}\n```\n结果表明，共有 5 个符合查询条件（status:\"active\"）的文档， 在map函数中生成了 5 个键值对文档，最后使用reduce函数将相同的键值分为 2 组。\n\n具体参数说明：\n\n - `result`：储存结果的collection的名字,这是个临时集合，MapReduce的连接关闭后自动就被删除了。\n - `timeMillis`：执行花费的时间，毫秒为单位\n - `input`：满足条件被发送到map函数的文档个数\n - `emit`：在map函数中emit被调用的次数，也就是所有集合中的数据总量\n - `ouput`：结果集合中的文档个数（count对调试非常有帮助）\n - `ok`：是否成功，成功为1\n - `err`：如果失败，这里可以有失败原因，不过从经验上来看，原因比较模糊，作用不大\n\n使用 find 操作符来查看 mapReduce 的查询结果：\n```\n>db.posts.mapReduce( \n   function() { emit(this.user_name,1); }, \n   function(key, values) {return Array.sum(values)}, \n      {  \n         query:{status:\"active\"},  \n         out:\"post_total\" \n      }\n).find()\n```\n以上查询显示如下结果:\n```\n{ \"_id\" : \"mark\", \"value\" : 4 }\n{ \"_id\" : \"runoob\", \"value\" : 1 }\n```\n用类似的方式，MapReduce可以被用来构建大型复杂的聚合查询。\n\nMap函数和Reduce函数可以使用 JavaScript 来实现，使得MapReduce的使用非常灵活和强大。\n\n","slug":"MongoDB 聚合(二) MapReduce","published":1,"date":"2019-05-21T02:36:43.915Z","updated":"2019-05-21T02:36:43.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbs0002vm74zf0zo4jpu","content":"<p>(可参考:<a href=\"http://www.runoob.com/mongodb/mongodb-map-reduce.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-map-reduce.html</a>)</p>\n<p>Map-Reduce是一种计算模型，简单的说就是将大批量的工作（数据）分解（MAP）执行，然后再将结果合并成最终结果（REDUCE）。</p>\n<p>MongoDB提供的Map-Reduce非常灵活，对于大规模数据分析也相当实用。<br>以下是MapReduce的基本语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.collection.mapReduce(</span><br><span class=\"line\">   function() &#123;emit(key,value);&#125;,  //map 函数</span><br><span class=\"line\">   function(key,values) &#123;return reduceFunction&#125;,   //reduce 函数</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      out: collection,</span><br><span class=\"line\">      query: document,</span><br><span class=\"line\">      sort: document,</span><br><span class=\"line\">      limit: number</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>使用 MapReduce 要实现两个函数 Map 函数和 Reduce 函数,Map 函数调用 emit(key, value), 遍历 collection 中所有的记录, 将 key 与 value 传递给 Reduce 函数进行处理。</p>\n<p>Map 函数必须调用 emit(key, value) 返回键值对。<br>参数说明:</p>\n<ul>\n<li><code>map</code> ：映射函数 (生成键值对序列,作为 reduce 函数参数)。</li>\n<li><code>reduce</code> 统计函数，reduce函数的任务就是将key-values变成key-value，也就是把values数组变成一个单一的值value。。</li>\n<li><code>out</code> 统计结果存放集合 (不指定则使用临时集合,在客户端断开后自动删除)。</li>\n<li><code>query</code> 一个筛选条件，只有满足条件的文档才会调用map函数。（query。limit，sort可以随意组合）</li>\n<li><code>sort</code> 和limit结合的sort排序参数（也是在发往map函数前给文档排序），可以优化分组机制</li>\n<li><code>limit</code> 发往map函数的文档数量的上限（要是没有limit，单独使用sort的用处不大）</li>\n</ul>\n<p>以下实例在集合 orders 中查找 status:”A” 的数据，并根据 cust_id 来分组，并计算 amount 的总和。</p>\n<p><a href=\"http://www.runoob.com/mongodb/mongodb-map-reduce.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-map-reduce.html</a></p>\n<p>考虑以下文档结构存储用户的文章，文档存储了用户的 user_name 和文章的 status 字段：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;mark&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;active&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;mark&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;active&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;mark&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;active&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;mark&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;active&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;mark&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;disabled&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;runoob&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;disabled&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;runoob&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;disabled&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;runoob&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;active&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>现在，我们将在 posts 集合中使用 mapReduce 函数来选取已发布的文章(status:”active”)，并通过user_name分组，计算每个用户的文章数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.posts.mapReduce( </span><br><span class=\"line\">   function() &#123; emit(this.user_name,1); &#125;, </span><br><span class=\"line\">   function(key, values) &#123;return Array.sum(values)&#125;, </span><br><span class=\"line\">      &#123;  </span><br><span class=\"line\">         query:&#123;status:&quot;active&quot;&#125;,  </span><br><span class=\"line\">         out:&quot;post_total&quot; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>以上 mapReduce 输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;result&quot; : &quot;post_total&quot;,</span><br><span class=\"line\">        &quot;timeMillis&quot; : 23,</span><br><span class=\"line\">        &quot;counts&quot; : &#123;</span><br><span class=\"line\">                &quot;input&quot; : 5,</span><br><span class=\"line\">                &quot;emit&quot; : 5,</span><br><span class=\"line\">                &quot;reduce&quot; : 1,</span><br><span class=\"line\">                &quot;output&quot; : 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ok&quot; : 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果表明，共有 5 个符合查询条件（status:”active”）的文档， 在map函数中生成了 5 个键值对文档，最后使用reduce函数将相同的键值分为 2 组。</p>\n<p>具体参数说明：</p>\n<ul>\n<li><code>result</code>：储存结果的collection的名字,这是个临时集合，MapReduce的连接关闭后自动就被删除了。</li>\n<li><code>timeMillis</code>：执行花费的时间，毫秒为单位</li>\n<li><code>input</code>：满足条件被发送到map函数的文档个数</li>\n<li><code>emit</code>：在map函数中emit被调用的次数，也就是所有集合中的数据总量</li>\n<li><code>ouput</code>：结果集合中的文档个数（count对调试非常有帮助）</li>\n<li><code>ok</code>：是否成功，成功为1</li>\n<li><code>err</code>：如果失败，这里可以有失败原因，不过从经验上来看，原因比较模糊，作用不大</li>\n</ul>\n<p>使用 find 操作符来查看 mapReduce 的查询结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.posts.mapReduce( </span><br><span class=\"line\">   function() &#123; emit(this.user_name,1); &#125;, </span><br><span class=\"line\">   function(key, values) &#123;return Array.sum(values)&#125;, </span><br><span class=\"line\">      &#123;  </span><br><span class=\"line\">         query:&#123;status:&quot;active&quot;&#125;,  </span><br><span class=\"line\">         out:&quot;post_total&quot; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">).find()</span><br></pre></td></tr></table></figure></p>\n<p>以上查询显示如下结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;_id&quot; : &quot;mark&quot;, &quot;value&quot; : 4 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : &quot;runoob&quot;, &quot;value&quot; : 1 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>用类似的方式，MapReduce可以被用来构建大型复杂的聚合查询。</p>\n<p>Map函数和Reduce函数可以使用 JavaScript 来实现，使得MapReduce的使用非常灵活和强大。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>(可参考:<a href=\"http://www.runoob.com/mongodb/mongodb-map-reduce.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-map-reduce.html</a>)</p>\n<p>Map-Reduce是一种计算模型，简单的说就是将大批量的工作（数据）分解（MAP）执行，然后再将结果合并成最终结果（REDUCE）。</p>\n<p>MongoDB提供的Map-Reduce非常灵活，对于大规模数据分析也相当实用。<br>以下是MapReduce的基本语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.collection.mapReduce(</span><br><span class=\"line\">   function() &#123;emit(key,value);&#125;,  //map 函数</span><br><span class=\"line\">   function(key,values) &#123;return reduceFunction&#125;,   //reduce 函数</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      out: collection,</span><br><span class=\"line\">      query: document,</span><br><span class=\"line\">      sort: document,</span><br><span class=\"line\">      limit: number</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>使用 MapReduce 要实现两个函数 Map 函数和 Reduce 函数,Map 函数调用 emit(key, value), 遍历 collection 中所有的记录, 将 key 与 value 传递给 Reduce 函数进行处理。</p>\n<p>Map 函数必须调用 emit(key, value) 返回键值对。<br>参数说明:</p>\n<ul>\n<li><code>map</code> ：映射函数 (生成键值对序列,作为 reduce 函数参数)。</li>\n<li><code>reduce</code> 统计函数，reduce函数的任务就是将key-values变成key-value，也就是把values数组变成一个单一的值value。。</li>\n<li><code>out</code> 统计结果存放集合 (不指定则使用临时集合,在客户端断开后自动删除)。</li>\n<li><code>query</code> 一个筛选条件，只有满足条件的文档才会调用map函数。（query。limit，sort可以随意组合）</li>\n<li><code>sort</code> 和limit结合的sort排序参数（也是在发往map函数前给文档排序），可以优化分组机制</li>\n<li><code>limit</code> 发往map函数的文档数量的上限（要是没有limit，单独使用sort的用处不大）</li>\n</ul>\n<p>以下实例在集合 orders 中查找 status:”A” 的数据，并根据 cust_id 来分组，并计算 amount 的总和。</p>\n<p><a href=\"http://www.runoob.com/mongodb/mongodb-map-reduce.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-map-reduce.html</a></p>\n<p>考虑以下文档结构存储用户的文章，文档存储了用户的 user_name 和文章的 status 字段：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;mark&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;active&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;mark&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;active&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;mark&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;active&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;mark&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;active&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;mark&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;disabled&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;runoob&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;disabled&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;runoob&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;disabled&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt;db.posts.insert(&#123;</span><br><span class=\"line\">   &quot;post_text&quot;: &quot;菜鸟教程，最全的技术文档。&quot;,</span><br><span class=\"line\">   &quot;user_name&quot;: &quot;runoob&quot;,</span><br><span class=\"line\">   &quot;status&quot;:&quot;active&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>现在，我们将在 posts 集合中使用 mapReduce 函数来选取已发布的文章(status:”active”)，并通过user_name分组，计算每个用户的文章数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.posts.mapReduce( </span><br><span class=\"line\">   function() &#123; emit(this.user_name,1); &#125;, </span><br><span class=\"line\">   function(key, values) &#123;return Array.sum(values)&#125;, </span><br><span class=\"line\">      &#123;  </span><br><span class=\"line\">         query:&#123;status:&quot;active&quot;&#125;,  </span><br><span class=\"line\">         out:&quot;post_total&quot; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>以上 mapReduce 输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;result&quot; : &quot;post_total&quot;,</span><br><span class=\"line\">        &quot;timeMillis&quot; : 23,</span><br><span class=\"line\">        &quot;counts&quot; : &#123;</span><br><span class=\"line\">                &quot;input&quot; : 5,</span><br><span class=\"line\">                &quot;emit&quot; : 5,</span><br><span class=\"line\">                &quot;reduce&quot; : 1,</span><br><span class=\"line\">                &quot;output&quot; : 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ok&quot; : 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果表明，共有 5 个符合查询条件（status:”active”）的文档， 在map函数中生成了 5 个键值对文档，最后使用reduce函数将相同的键值分为 2 组。</p>\n<p>具体参数说明：</p>\n<ul>\n<li><code>result</code>：储存结果的collection的名字,这是个临时集合，MapReduce的连接关闭后自动就被删除了。</li>\n<li><code>timeMillis</code>：执行花费的时间，毫秒为单位</li>\n<li><code>input</code>：满足条件被发送到map函数的文档个数</li>\n<li><code>emit</code>：在map函数中emit被调用的次数，也就是所有集合中的数据总量</li>\n<li><code>ouput</code>：结果集合中的文档个数（count对调试非常有帮助）</li>\n<li><code>ok</code>：是否成功，成功为1</li>\n<li><code>err</code>：如果失败，这里可以有失败原因，不过从经验上来看，原因比较模糊，作用不大</li>\n</ul>\n<p>使用 find 操作符来查看 mapReduce 的查询结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.posts.mapReduce( </span><br><span class=\"line\">   function() &#123; emit(this.user_name,1); &#125;, </span><br><span class=\"line\">   function(key, values) &#123;return Array.sum(values)&#125;, </span><br><span class=\"line\">      &#123;  </span><br><span class=\"line\">         query:&#123;status:&quot;active&quot;&#125;,  </span><br><span class=\"line\">         out:&quot;post_total&quot; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">).find()</span><br></pre></td></tr></table></figure></p>\n<p>以上查询显示如下结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;_id&quot; : &quot;mark&quot;, &quot;value&quot; : 4 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : &quot;runoob&quot;, &quot;value&quot; : 1 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>用类似的方式，MapReduce可以被用来构建大型复杂的聚合查询。</p>\n<p>Map函数和Reduce函数可以使用 JavaScript 来实现，使得MapReduce的使用非常灵活和强大。</p>\n"},{"title":"Redis","_content":"\n`redis-cli`\n\n`redis-server`\n\n\n\n\n","source":"_posts/Redis.md","raw":"---\ntitle: Redis\ncategories :\n- 技术\ntags :\n- linux\n- redis\n---\n\n`redis-cli`\n\n`redis-server`\n\n\n\n\n","slug":"Redis","published":1,"date":"2019-05-21T02:36:43.918Z","updated":"2019-05-21T02:36:43.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbs2002zm74zn3xscg63","content":"<p><code>redis-cli</code></p>\n<p><code>redis-server</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>redis-cli</code></p>\n<p><code>redis-server</code></p>\n"},{"title":"Queue remove/poll , add/offer , element/pekk 区别","_content":"\n### offer,add 区别：\n一些队列有大小限制，因此如果想在一个满的队列中加入一个新项，多出的项就会被拒绝。\n这时新的 offer 方法就可以起作用了。它不是对调用 add() 方法抛出一个 unchecked 异常，而只是得到由 offer() 返回的 false。\n\n### poll，remove区别：\nremove() 和 poll() 方法都是从队列中删除第一个元素。remove() 的行为与 Collection 接口的版本相似，\n但是新的 poll() 方法在用空集合调用时不是抛出异常，只是返回 null。因此新的方法更适合容易出现异常条件的情况。\n\n\n### peek，element区别：\nelement() 和 peek() 用于在队列的头部查询元素。与 remove() 方法类似，在队列为空时， element() 抛出一个异常，而 peek() 返回 null\n","source":"_posts/Queue remove-poll , add-offer , element-pekk 区别.md","raw":"---\ntitle: Queue remove/poll , add/offer , element/pekk 区别\ncategories :\n- 技术\ntags :\n- Java\n---\n\n### offer,add 区别：\n一些队列有大小限制，因此如果想在一个满的队列中加入一个新项，多出的项就会被拒绝。\n这时新的 offer 方法就可以起作用了。它不是对调用 add() 方法抛出一个 unchecked 异常，而只是得到由 offer() 返回的 false。\n\n### poll，remove区别：\nremove() 和 poll() 方法都是从队列中删除第一个元素。remove() 的行为与 Collection 接口的版本相似，\n但是新的 poll() 方法在用空集合调用时不是抛出异常，只是返回 null。因此新的方法更适合容易出现异常条件的情况。\n\n\n### peek，element区别：\nelement() 和 peek() 用于在队列的头部查询元素。与 remove() 方法类似，在队列为空时， element() 抛出一个异常，而 peek() 返回 null\n","slug":"Queue remove-poll , add-offer , element-pekk 区别","published":1,"date":"2019-05-21T02:36:43.917Z","updated":"2019-05-21T02:36:43.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbs40032m74zewuvf3ev","content":"<h3 id=\"offer-add-区别：\"><a href=\"#offer-add-区别：\" class=\"headerlink\" title=\"offer,add 区别：\"></a>offer,add 区别：</h3><p>一些队列有大小限制，因此如果想在一个满的队列中加入一个新项，多出的项就会被拒绝。<br>这时新的 offer 方法就可以起作用了。它不是对调用 add() 方法抛出一个 unchecked 异常，而只是得到由 offer() 返回的 false。</p>\n<h3 id=\"poll，remove区别：\"><a href=\"#poll，remove区别：\" class=\"headerlink\" title=\"poll，remove区别：\"></a>poll，remove区别：</h3><p>remove() 和 poll() 方法都是从队列中删除第一个元素。remove() 的行为与 Collection 接口的版本相似，<br>但是新的 poll() 方法在用空集合调用时不是抛出异常，只是返回 null。因此新的方法更适合容易出现异常条件的情况。</p>\n<h3 id=\"peek，element区别：\"><a href=\"#peek，element区别：\" class=\"headerlink\" title=\"peek，element区别：\"></a>peek，element区别：</h3><p>element() 和 peek() 用于在队列的头部查询元素。与 remove() 方法类似，在队列为空时， element() 抛出一个异常，而 peek() 返回 null</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"offer-add-区别：\"><a href=\"#offer-add-区别：\" class=\"headerlink\" title=\"offer,add 区别：\"></a>offer,add 区别：</h3><p>一些队列有大小限制，因此如果想在一个满的队列中加入一个新项，多出的项就会被拒绝。<br>这时新的 offer 方法就可以起作用了。它不是对调用 add() 方法抛出一个 unchecked 异常，而只是得到由 offer() 返回的 false。</p>\n<h3 id=\"poll，remove区别：\"><a href=\"#poll，remove区别：\" class=\"headerlink\" title=\"poll，remove区别：\"></a>poll，remove区别：</h3><p>remove() 和 poll() 方法都是从队列中删除第一个元素。remove() 的行为与 Collection 接口的版本相似，<br>但是新的 poll() 方法在用空集合调用时不是抛出异常，只是返回 null。因此新的方法更适合容易出现异常条件的情况。</p>\n<h3 id=\"peek，element区别：\"><a href=\"#peek，element区别：\" class=\"headerlink\" title=\"peek，element区别：\"></a>peek，element区别：</h3><p>element() 和 peek() 用于在队列的头部查询元素。与 remove() 方法类似，在队列为空时， element() 抛出一个异常，而 peek() 返回 null</p>\n"},{"title":"ThreadPool 2","_content":"\n### 1.创建线程池\n```\n /**\n         * cachedThreadPool\n         */\n        ExecutorService cachedThreadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60,\n                TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n                new NamedThreadFactory(\"CachedThread\"), new ThreadPoolExecutor.AbortPolicy());\n                \n        int cpuNum = Runtime.getRuntime().availableProcessors();\n\n        /**\n         * fixedThreadPool\n         */\n        ExecutorService fixedThreadPool = new ThreadPoolExecutor(cpuNum + 1, cpuNum + 1, 0,\n                TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(),\n                new NamedThreadFactory(\"FixedThread\"), new ThreadPoolExecutor.AbortPolicy());\n\n        /**\n         * singleThreadPool\n         */\n        ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.NANOSECONDS,\n                new LinkedBlockingQueue<>(), new NamedThreadFactory(\"SingleThread\"),\n                new ThreadPoolExecutor.AbortPolicy());\n\n        /**\n         * scheduledThreadPool\n         */\n        ExecutorService scheduledThreadPool = new ThreadPoolExecutor(cpuNum + 1, Integer.MAX_VALUE,\n                0, TimeUnit.NANOSECONDS, new DelayQueue(),\n                new NamedThreadFactory(\"ScheduledThread\"), new ThreadPoolExecutor.AbortPolicy());\n\n        ScheduledThreadPoolExecutor scheduledExecutorService = new ScheduledThreadPoolExecutor(2,\n                new NamedThreadFactory(\"schedule\"), new ThreadPoolExecutor.AbortPolicy());\n```\n#### 注意\n`ExecutorService scheduledThreadPool`这种方式创建的线程池时没有`scheduledThreadPool`和`singleThreadPool`方法的.\n\n#### scheduleAtFixedRate和scheduleWithFixedDelay区别\n```\n /**\n         * scheduleAtFixedRate 从上一次任务开始执行时 根据period计算下次开始执行时间\n         */\n         scheduledExecutorService.scheduleAtFixedRate(task, 3, 4, TimeUnit.SECONDS);\n        /**\n         * scheduleWithFixedDelay 从上一次任务结束的时候 根据delay计算下次任务开始的执行时间\n         */\n        scheduledExecutorService.scheduleWithFixedDelay(task, 3, 4, TimeUnit.SECONDS);\n```\n#### 异常处理\n```\nstatic class Task implements Runnable {\n\n        @Override\n        public void run() {\n            Thread.currentThread()\n                    .setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n\n                        @Override\n                        public void uncaughtException(Thread t, Throwable e) {\n                            System.out.println(\"exception\");\n                        }\n                    });\n\n            System.out.println(\"---\");\n            System.out.println(1 / 0);\n            System.out.println(Thread.currentThread().getName());\n\n        }\n    }\n```\n在创建线程任务时,最好在线程逻辑里就将异常捕获并处理.\n`在多线程环境中，线程抛出的异常是不能用try….catch捕获的，这样就有可能导致一些问题的出现，比如异常的时候无法回收一些系统资源，或者没有关闭当前的连接等等。`\n```\n try {\n            //singleThreadPool.submit(task);\n            task.run();\n        } catch (Exception e) {\n            System.out.println(11);\n        }\n\n    }\n\n    static class Task implements Runnable {\n\n        @Override\n        public void run() {\n            \n\n            System.out.println(\"---\");\n            System.out.println(1 / 0);\n            System.out.println(Thread.currentThread().getName());\n\n        }\n    }\n```\n这种方式还是会造成线程因为异常而终止.\n##### submit 和 execute \n```\nsingleThreadPool.submit(task);\ntry {\n            singleThreadPool.submit(task);\n\n        } catch (Exception e) {\n            System.out.println(11);\n        }\n```\nsubmit无法捕获异常\n而execute方法可以捕获异常\n\n","source":"_posts/ThreadPool2.md","raw":"---\ntitle: ThreadPool 2\ncategories :\n- 技术\ntags :\n- Java\n---\n\n### 1.创建线程池\n```\n /**\n         * cachedThreadPool\n         */\n        ExecutorService cachedThreadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60,\n                TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n                new NamedThreadFactory(\"CachedThread\"), new ThreadPoolExecutor.AbortPolicy());\n                \n        int cpuNum = Runtime.getRuntime().availableProcessors();\n\n        /**\n         * fixedThreadPool\n         */\n        ExecutorService fixedThreadPool = new ThreadPoolExecutor(cpuNum + 1, cpuNum + 1, 0,\n                TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(),\n                new NamedThreadFactory(\"FixedThread\"), new ThreadPoolExecutor.AbortPolicy());\n\n        /**\n         * singleThreadPool\n         */\n        ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.NANOSECONDS,\n                new LinkedBlockingQueue<>(), new NamedThreadFactory(\"SingleThread\"),\n                new ThreadPoolExecutor.AbortPolicy());\n\n        /**\n         * scheduledThreadPool\n         */\n        ExecutorService scheduledThreadPool = new ThreadPoolExecutor(cpuNum + 1, Integer.MAX_VALUE,\n                0, TimeUnit.NANOSECONDS, new DelayQueue(),\n                new NamedThreadFactory(\"ScheduledThread\"), new ThreadPoolExecutor.AbortPolicy());\n\n        ScheduledThreadPoolExecutor scheduledExecutorService = new ScheduledThreadPoolExecutor(2,\n                new NamedThreadFactory(\"schedule\"), new ThreadPoolExecutor.AbortPolicy());\n```\n#### 注意\n`ExecutorService scheduledThreadPool`这种方式创建的线程池时没有`scheduledThreadPool`和`singleThreadPool`方法的.\n\n#### scheduleAtFixedRate和scheduleWithFixedDelay区别\n```\n /**\n         * scheduleAtFixedRate 从上一次任务开始执行时 根据period计算下次开始执行时间\n         */\n         scheduledExecutorService.scheduleAtFixedRate(task, 3, 4, TimeUnit.SECONDS);\n        /**\n         * scheduleWithFixedDelay 从上一次任务结束的时候 根据delay计算下次任务开始的执行时间\n         */\n        scheduledExecutorService.scheduleWithFixedDelay(task, 3, 4, TimeUnit.SECONDS);\n```\n#### 异常处理\n```\nstatic class Task implements Runnable {\n\n        @Override\n        public void run() {\n            Thread.currentThread()\n                    .setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n\n                        @Override\n                        public void uncaughtException(Thread t, Throwable e) {\n                            System.out.println(\"exception\");\n                        }\n                    });\n\n            System.out.println(\"---\");\n            System.out.println(1 / 0);\n            System.out.println(Thread.currentThread().getName());\n\n        }\n    }\n```\n在创建线程任务时,最好在线程逻辑里就将异常捕获并处理.\n`在多线程环境中，线程抛出的异常是不能用try….catch捕获的，这样就有可能导致一些问题的出现，比如异常的时候无法回收一些系统资源，或者没有关闭当前的连接等等。`\n```\n try {\n            //singleThreadPool.submit(task);\n            task.run();\n        } catch (Exception e) {\n            System.out.println(11);\n        }\n\n    }\n\n    static class Task implements Runnable {\n\n        @Override\n        public void run() {\n            \n\n            System.out.println(\"---\");\n            System.out.println(1 / 0);\n            System.out.println(Thread.currentThread().getName());\n\n        }\n    }\n```\n这种方式还是会造成线程因为异常而终止.\n##### submit 和 execute \n```\nsingleThreadPool.submit(task);\ntry {\n            singleThreadPool.submit(task);\n\n        } catch (Exception e) {\n            System.out.println(11);\n        }\n```\nsubmit无法捕获异常\n而execute方法可以捕获异常\n\n","slug":"ThreadPool2","published":1,"date":"2019-05-11T11:33:08.209Z","updated":"2019-05-11T11:33:08.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbs50035m74zcb139pop","content":"<h3 id=\"1-创建线程池\"><a href=\"#1-创建线程池\" class=\"headerlink\" title=\"1.创建线程池\"></a>1.创建线程池</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">        * cachedThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService cachedThreadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60,</span><br><span class=\"line\">               TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;CachedThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\">               </span><br><span class=\"line\">       int cpuNum = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * fixedThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService fixedThreadPool = new ThreadPoolExecutor(cpuNum + 1, cpuNum + 1, 0,</span><br><span class=\"line\">               TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;FixedThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * singleThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.NANOSECONDS,</span><br><span class=\"line\">               new LinkedBlockingQueue&lt;&gt;(), new NamedThreadFactory(&quot;SingleThread&quot;),</span><br><span class=\"line\">               new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * scheduledThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService scheduledThreadPool = new ThreadPoolExecutor(cpuNum + 1, Integer.MAX_VALUE,</span><br><span class=\"line\">               0, TimeUnit.NANOSECONDS, new DelayQueue(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;ScheduledThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       ScheduledThreadPoolExecutor scheduledExecutorService = new ScheduledThreadPoolExecutor(2,</span><br><span class=\"line\">               new NamedThreadFactory(&quot;schedule&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p><code>ExecutorService scheduledThreadPool</code>这种方式创建的线程池时没有<code>scheduledThreadPool</code>和<code>singleThreadPool</code>方法的.</p>\n<h4 id=\"scheduleAtFixedRate和scheduleWithFixedDelay区别\"><a href=\"#scheduleAtFixedRate和scheduleWithFixedDelay区别\" class=\"headerlink\" title=\"scheduleAtFixedRate和scheduleWithFixedDelay区别\"></a>scheduleAtFixedRate和scheduleWithFixedDelay区别</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">        * scheduleAtFixedRate 从上一次任务开始执行时 根据period计算下次开始执行时间</span><br><span class=\"line\">        */</span><br><span class=\"line\">        scheduledExecutorService.scheduleAtFixedRate(task, 3, 4, TimeUnit.SECONDS);</span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * scheduleWithFixedDelay 从上一次任务结束的时候 根据delay计算下次任务开始的执行时间</span><br><span class=\"line\">        */</span><br><span class=\"line\">       scheduledExecutorService.scheduleWithFixedDelay(task, 3, 4, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Task implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            Thread.currentThread()</span><br><span class=\"line\">                    .setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        public void uncaughtException(Thread t, Throwable e) &#123;</span><br><span class=\"line\">                            System.out.println(&quot;exception&quot;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(&quot;---&quot;);</span><br><span class=\"line\">            System.out.println(1 / 0);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在创建线程任务时,最好在线程逻辑里就将异常捕获并处理.<br><code>在多线程环境中，线程抛出的异常是不能用try….catch捕获的，这样就有可能导致一些问题的出现，比如异常的时候无法回收一些系统资源，或者没有关闭当前的连接等等。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">           //singleThreadPool.submit(task);</span><br><span class=\"line\">           task.run();</span><br><span class=\"line\">       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">           System.out.println(11);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   static class Task implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public void run() &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">           System.out.println(&quot;---&quot;);</span><br><span class=\"line\">           System.out.println(1 / 0);</span><br><span class=\"line\">           System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式还是会造成线程因为异常而终止.</p>\n<h5 id=\"submit-和-execute\"><a href=\"#submit-和-execute\" class=\"headerlink\" title=\"submit 和 execute\"></a>submit 和 execute</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singleThreadPool.submit(task);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">            singleThreadPool.submit(task);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(11);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>submit无法捕获异常<br>而execute方法可以捕获异常</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-创建线程池\"><a href=\"#1-创建线程池\" class=\"headerlink\" title=\"1.创建线程池\"></a>1.创建线程池</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">        * cachedThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService cachedThreadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60,</span><br><span class=\"line\">               TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;CachedThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\">               </span><br><span class=\"line\">       int cpuNum = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * fixedThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService fixedThreadPool = new ThreadPoolExecutor(cpuNum + 1, cpuNum + 1, 0,</span><br><span class=\"line\">               TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;FixedThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * singleThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.NANOSECONDS,</span><br><span class=\"line\">               new LinkedBlockingQueue&lt;&gt;(), new NamedThreadFactory(&quot;SingleThread&quot;),</span><br><span class=\"line\">               new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * scheduledThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService scheduledThreadPool = new ThreadPoolExecutor(cpuNum + 1, Integer.MAX_VALUE,</span><br><span class=\"line\">               0, TimeUnit.NANOSECONDS, new DelayQueue(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;ScheduledThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       ScheduledThreadPoolExecutor scheduledExecutorService = new ScheduledThreadPoolExecutor(2,</span><br><span class=\"line\">               new NamedThreadFactory(&quot;schedule&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p><code>ExecutorService scheduledThreadPool</code>这种方式创建的线程池时没有<code>scheduledThreadPool</code>和<code>singleThreadPool</code>方法的.</p>\n<h4 id=\"scheduleAtFixedRate和scheduleWithFixedDelay区别\"><a href=\"#scheduleAtFixedRate和scheduleWithFixedDelay区别\" class=\"headerlink\" title=\"scheduleAtFixedRate和scheduleWithFixedDelay区别\"></a>scheduleAtFixedRate和scheduleWithFixedDelay区别</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">        * scheduleAtFixedRate 从上一次任务开始执行时 根据period计算下次开始执行时间</span><br><span class=\"line\">        */</span><br><span class=\"line\">        scheduledExecutorService.scheduleAtFixedRate(task, 3, 4, TimeUnit.SECONDS);</span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * scheduleWithFixedDelay 从上一次任务结束的时候 根据delay计算下次任务开始的执行时间</span><br><span class=\"line\">        */</span><br><span class=\"line\">       scheduledExecutorService.scheduleWithFixedDelay(task, 3, 4, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Task implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            Thread.currentThread()</span><br><span class=\"line\">                    .setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        public void uncaughtException(Thread t, Throwable e) &#123;</span><br><span class=\"line\">                            System.out.println(&quot;exception&quot;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(&quot;---&quot;);</span><br><span class=\"line\">            System.out.println(1 / 0);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在创建线程任务时,最好在线程逻辑里就将异常捕获并处理.<br><code>在多线程环境中，线程抛出的异常是不能用try….catch捕获的，这样就有可能导致一些问题的出现，比如异常的时候无法回收一些系统资源，或者没有关闭当前的连接等等。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">           //singleThreadPool.submit(task);</span><br><span class=\"line\">           task.run();</span><br><span class=\"line\">       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">           System.out.println(11);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   static class Task implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public void run() &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">           System.out.println(&quot;---&quot;);</span><br><span class=\"line\">           System.out.println(1 / 0);</span><br><span class=\"line\">           System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式还是会造成线程因为异常而终止.</p>\n<h5 id=\"submit-和-execute\"><a href=\"#submit-和-execute\" class=\"headerlink\" title=\"submit 和 execute\"></a>submit 和 execute</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singleThreadPool.submit(task);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">            singleThreadPool.submit(task);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(11);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>submit无法捕获异常<br>而execute方法可以捕获异常</p>\n"},{"title":"awk常用的几种命令","_content":"\n`awk '{if($4==\"check#10007_100\" && $9==\"47002\") print $0}' action_log_2019-03-15.log > 10007.log`\n\n\n\n1.分隔符\n`awk -F, '{print $1}' tt`\n`awk 'BEGIN{FS=\",\"} /2/ {print $1}' tt`\n\n2.正则匹配\n `awk 'BEGIN{FS=\",\"} $2 ~ /2/ {print $2}' tt`\n ` awk 'BEGIN{FS=\",\"} $2 !~ /2/ {print $2}' tt`\n\n3.去重\n`awk 'NF > 1 && $(NF-1) !~ /}/ && !a[$(NF-1)]++   {print $(NF-1)}' action_log_2018-12-03.log > 12-03.log`\n\n```\n正则表达式\nAWK 可以方便高效地处理正则表达式。大量复杂的任务都可以由极其简单的正则表达式来解决。每一个精通命令行的人都知道正则表达式真正的威力所在。\n\n这一章将着重讲解标准正则表达式的使用方法。\n\n点（Dot）\n点字符（.）可以匹配除了行结束字符的所有字符。比如下面的便子就可以匹配 fin, fun, fan 等等。\n\n[jerry]$ echo -e \"cat\\nbat\\nfun\\nfin\\nfan\" | awk '/f.n/'\n执行上面命令可以得到如下结果：\n\nfun\nfin\nfan\n行开始\n行开始符(^)匹配一行的开始。下面的示例将输出所有以字符串 The 开始的行。\n\n[jerry]$ echo -e \"This\\nThat\\nThere\\nTheir\\nthese\" | awk '/^The/'\n执行上面的命令可以得到如下结果：\n\nThere\nTheir\n行结束\n行结束符($)匹配一行的结束。下面的例子中将输出所有以字符 n 结束的行：\n\n[jerry]$ echo -e \"knif\\nknow\\nfun\\nfin\\nfan\\nnine\" | awk '/n$/'\n执行上面的命令可以得到如下结果：\n\nfun\nfin\nfan\n匹配字符集\n匹配字符集用于匹配集合（由方括号表示）中的一个字符。如下例子中，匹配 Call 与 Tall 而不会匹配 Ball。\n\n[jerry]$ echo -e \"Call\\nTall\\nBall\" | awk '/[CT]all/'\n执行上面的命令可以得到如下结果：\n\nfun\nfin\nfan\n排除集\n正则匹配时会排除集合中的字符。如下例子中只会输出 Ball。\n\n[jerry]$ echo -e \"Call\\nTall\\nBall\" | awk '/[^CT]all/'\n执行上面的命令可以得到如下结果：\n\nBall\n或\n竖线(|)允许正则表达式实现逻辑或运算. 下面例子将会输出 Ball 与 Call 。\n\n[jerry]$ echo -e \"Call\\nTall\\nBall\\nSmall\\nShall\" | awk '/Call|Ball/'\n执行上面的命令可以得到如下结果：\n\nCall\nBall\n最多出现一次\n该符号( ？)前面的字符不出现或者出现一次。如下示例匹配 Colour 与 Color。 使用 ? 使得 u 变成了可选字符 。\n\n[jerry]$ echo -e \"Colour\\nColor\" | awk '/Colou?r/'\n执行上面的命令可以得到如下结果：\n\nColour\nColor\n出现零次或多次\n该符号(＊) 允许其前的字符出现多次或者不出现。如下示例将匹配 ca，cat, catt 等等。\n\n[jerry]$ echo -e \"ca\\ncat\\ncatt\" | awk '/cat*/'\n执行上面的命令可以得到如下结果：\n\nca\ncat\ncatt\n出现一次或多次\n该符号(+)使得其前的字符出现一次或者多次。下面的例子会匹配一个 2 或者多个连续的 2。\n\n[jerry]$ echo -e \"111\\n22\\n123\\n234\\n456\\n222\"  | awk '/2+/'\n执行上面的命令可以得到如下结果：\n\n22\n123\n234\n222\n分组\n括号用于分组而字符 | 用于提供多种选择。如下的正则表达式会匹配所有包含 Apple Juice 或 Aplle Cake 的行。\n\n[jerry]$ echo -e \"Apple Juice\\nApple Pie\\nApple Tart\\nApple Cake\" | awk '/Apple (Juice|Cake)/'\n执行上面的命令可以得到如下结果：\n\nApple Juice\nApple Cake\n```\n","source":"_posts/awk常用的几种命令.md","raw":"---\ntitle: awk常用的几种命令 \ncategories :\n- 技术\ntags :\n- awk\n- linux\n---\n\n`awk '{if($4==\"check#10007_100\" && $9==\"47002\") print $0}' action_log_2019-03-15.log > 10007.log`\n\n\n\n1.分隔符\n`awk -F, '{print $1}' tt`\n`awk 'BEGIN{FS=\",\"} /2/ {print $1}' tt`\n\n2.正则匹配\n `awk 'BEGIN{FS=\",\"} $2 ~ /2/ {print $2}' tt`\n ` awk 'BEGIN{FS=\",\"} $2 !~ /2/ {print $2}' tt`\n\n3.去重\n`awk 'NF > 1 && $(NF-1) !~ /}/ && !a[$(NF-1)]++   {print $(NF-1)}' action_log_2018-12-03.log > 12-03.log`\n\n```\n正则表达式\nAWK 可以方便高效地处理正则表达式。大量复杂的任务都可以由极其简单的正则表达式来解决。每一个精通命令行的人都知道正则表达式真正的威力所在。\n\n这一章将着重讲解标准正则表达式的使用方法。\n\n点（Dot）\n点字符（.）可以匹配除了行结束字符的所有字符。比如下面的便子就可以匹配 fin, fun, fan 等等。\n\n[jerry]$ echo -e \"cat\\nbat\\nfun\\nfin\\nfan\" | awk '/f.n/'\n执行上面命令可以得到如下结果：\n\nfun\nfin\nfan\n行开始\n行开始符(^)匹配一行的开始。下面的示例将输出所有以字符串 The 开始的行。\n\n[jerry]$ echo -e \"This\\nThat\\nThere\\nTheir\\nthese\" | awk '/^The/'\n执行上面的命令可以得到如下结果：\n\nThere\nTheir\n行结束\n行结束符($)匹配一行的结束。下面的例子中将输出所有以字符 n 结束的行：\n\n[jerry]$ echo -e \"knif\\nknow\\nfun\\nfin\\nfan\\nnine\" | awk '/n$/'\n执行上面的命令可以得到如下结果：\n\nfun\nfin\nfan\n匹配字符集\n匹配字符集用于匹配集合（由方括号表示）中的一个字符。如下例子中，匹配 Call 与 Tall 而不会匹配 Ball。\n\n[jerry]$ echo -e \"Call\\nTall\\nBall\" | awk '/[CT]all/'\n执行上面的命令可以得到如下结果：\n\nfun\nfin\nfan\n排除集\n正则匹配时会排除集合中的字符。如下例子中只会输出 Ball。\n\n[jerry]$ echo -e \"Call\\nTall\\nBall\" | awk '/[^CT]all/'\n执行上面的命令可以得到如下结果：\n\nBall\n或\n竖线(|)允许正则表达式实现逻辑或运算. 下面例子将会输出 Ball 与 Call 。\n\n[jerry]$ echo -e \"Call\\nTall\\nBall\\nSmall\\nShall\" | awk '/Call|Ball/'\n执行上面的命令可以得到如下结果：\n\nCall\nBall\n最多出现一次\n该符号( ？)前面的字符不出现或者出现一次。如下示例匹配 Colour 与 Color。 使用 ? 使得 u 变成了可选字符 。\n\n[jerry]$ echo -e \"Colour\\nColor\" | awk '/Colou?r/'\n执行上面的命令可以得到如下结果：\n\nColour\nColor\n出现零次或多次\n该符号(＊) 允许其前的字符出现多次或者不出现。如下示例将匹配 ca，cat, catt 等等。\n\n[jerry]$ echo -e \"ca\\ncat\\ncatt\" | awk '/cat*/'\n执行上面的命令可以得到如下结果：\n\nca\ncat\ncatt\n出现一次或多次\n该符号(+)使得其前的字符出现一次或者多次。下面的例子会匹配一个 2 或者多个连续的 2。\n\n[jerry]$ echo -e \"111\\n22\\n123\\n234\\n456\\n222\"  | awk '/2+/'\n执行上面的命令可以得到如下结果：\n\n22\n123\n234\n222\n分组\n括号用于分组而字符 | 用于提供多种选择。如下的正则表达式会匹配所有包含 Apple Juice 或 Aplle Cake 的行。\n\n[jerry]$ echo -e \"Apple Juice\\nApple Pie\\nApple Tart\\nApple Cake\" | awk '/Apple (Juice|Cake)/'\n执行上面的命令可以得到如下结果：\n\nApple Juice\nApple Cake\n```\n","slug":"awk常用的几种命令","published":1,"date":"2019-05-21T02:36:43.919Z","updated":"2019-05-21T02:36:43.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbs80039m74z8qhs6dwz","content":"<p><code>awk &#39;{if($4==&quot;check#10007_100&quot; &amp;&amp; $9==&quot;47002&quot;) print $0}&#39; action_log_2019-03-15.log &gt; 10007.log</code></p>\n<p>1.分隔符<br><code>awk -F, &#39;{print $1}&#39; tt</code><br><code>awk &#39;BEGIN{FS=&quot;,&quot;} /2/ {print $1}&#39; tt</code></p>\n<p>2.正则匹配<br> <code>awk &#39;BEGIN{FS=&quot;,&quot;} $2 ~ /2/ {print $2}&#39; tt</code><br> <code>awk &#39;BEGIN{FS=&quot;,&quot;} $2 !~ /2/ {print $2}&#39; tt</code></p>\n<p>3.去重<br><code>awk &#39;NF &gt; 1 &amp;&amp; $(NF-1) !~ /}/ &amp;&amp; !a[$(NF-1)]++   {print $(NF-1)}&#39; action_log_2018-12-03.log &gt; 12-03.log</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正则表达式</span><br><span class=\"line\">AWK 可以方便高效地处理正则表达式。大量复杂的任务都可以由极其简单的正则表达式来解决。每一个精通命令行的人都知道正则表达式真正的威力所在。</span><br><span class=\"line\"></span><br><span class=\"line\">这一章将着重讲解标准正则表达式的使用方法。</span><br><span class=\"line\"></span><br><span class=\"line\">点（Dot）</span><br><span class=\"line\">点字符（.）可以匹配除了行结束字符的所有字符。比如下面的便子就可以匹配 fin, fun, fan 等等。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;cat\\nbat\\nfun\\nfin\\nfan&quot; | awk &apos;/f.n/&apos;</span><br><span class=\"line\">执行上面命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">fun</span><br><span class=\"line\">fin</span><br><span class=\"line\">fan</span><br><span class=\"line\">行开始</span><br><span class=\"line\">行开始符(^)匹配一行的开始。下面的示例将输出所有以字符串 The 开始的行。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;This\\nThat\\nThere\\nTheir\\nthese&quot; | awk &apos;/^The/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">There</span><br><span class=\"line\">Their</span><br><span class=\"line\">行结束</span><br><span class=\"line\">行结束符($)匹配一行的结束。下面的例子中将输出所有以字符 n 结束的行：</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;knif\\nknow\\nfun\\nfin\\nfan\\nnine&quot; | awk &apos;/n$/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">fun</span><br><span class=\"line\">fin</span><br><span class=\"line\">fan</span><br><span class=\"line\">匹配字符集</span><br><span class=\"line\">匹配字符集用于匹配集合（由方括号表示）中的一个字符。如下例子中，匹配 Call 与 Tall 而不会匹配 Ball。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;Call\\nTall\\nBall&quot; | awk &apos;/[CT]all/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">fun</span><br><span class=\"line\">fin</span><br><span class=\"line\">fan</span><br><span class=\"line\">排除集</span><br><span class=\"line\">正则匹配时会排除集合中的字符。如下例子中只会输出 Ball。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;Call\\nTall\\nBall&quot; | awk &apos;/[^CT]all/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">Ball</span><br><span class=\"line\">或</span><br><span class=\"line\">竖线(|)允许正则表达式实现逻辑或运算. 下面例子将会输出 Ball 与 Call 。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;Call\\nTall\\nBall\\nSmall\\nShall&quot; | awk &apos;/Call|Ball/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">Call</span><br><span class=\"line\">Ball</span><br><span class=\"line\">最多出现一次</span><br><span class=\"line\">该符号( ？)前面的字符不出现或者出现一次。如下示例匹配 Colour 与 Color。 使用 ? 使得 u 变成了可选字符 。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;Colour\\nColor&quot; | awk &apos;/Colou?r/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">Colour</span><br><span class=\"line\">Color</span><br><span class=\"line\">出现零次或多次</span><br><span class=\"line\">该符号(＊) 允许其前的字符出现多次或者不出现。如下示例将匹配 ca，cat, catt 等等。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;ca\\ncat\\ncatt&quot; | awk &apos;/cat*/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">ca</span><br><span class=\"line\">cat</span><br><span class=\"line\">catt</span><br><span class=\"line\">出现一次或多次</span><br><span class=\"line\">该符号(+)使得其前的字符出现一次或者多次。下面的例子会匹配一个 2 或者多个连续的 2。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;111\\n22\\n123\\n234\\n456\\n222&quot;  | awk &apos;/2+/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">22</span><br><span class=\"line\">123</span><br><span class=\"line\">234</span><br><span class=\"line\">222</span><br><span class=\"line\">分组</span><br><span class=\"line\">括号用于分组而字符 | 用于提供多种选择。如下的正则表达式会匹配所有包含 Apple Juice 或 Aplle Cake 的行。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;Apple Juice\\nApple Pie\\nApple Tart\\nApple Cake&quot; | awk &apos;/Apple (Juice|Cake)/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">Apple Juice</span><br><span class=\"line\">Apple Cake</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>awk &#39;{if($4==&quot;check#10007_100&quot; &amp;&amp; $9==&quot;47002&quot;) print $0}&#39; action_log_2019-03-15.log &gt; 10007.log</code></p>\n<p>1.分隔符<br><code>awk -F, &#39;{print $1}&#39; tt</code><br><code>awk &#39;BEGIN{FS=&quot;,&quot;} /2/ {print $1}&#39; tt</code></p>\n<p>2.正则匹配<br> <code>awk &#39;BEGIN{FS=&quot;,&quot;} $2 ~ /2/ {print $2}&#39; tt</code><br> <code>awk &#39;BEGIN{FS=&quot;,&quot;} $2 !~ /2/ {print $2}&#39; tt</code></p>\n<p>3.去重<br><code>awk &#39;NF &gt; 1 &amp;&amp; $(NF-1) !~ /}/ &amp;&amp; !a[$(NF-1)]++   {print $(NF-1)}&#39; action_log_2018-12-03.log &gt; 12-03.log</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正则表达式</span><br><span class=\"line\">AWK 可以方便高效地处理正则表达式。大量复杂的任务都可以由极其简单的正则表达式来解决。每一个精通命令行的人都知道正则表达式真正的威力所在。</span><br><span class=\"line\"></span><br><span class=\"line\">这一章将着重讲解标准正则表达式的使用方法。</span><br><span class=\"line\"></span><br><span class=\"line\">点（Dot）</span><br><span class=\"line\">点字符（.）可以匹配除了行结束字符的所有字符。比如下面的便子就可以匹配 fin, fun, fan 等等。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;cat\\nbat\\nfun\\nfin\\nfan&quot; | awk &apos;/f.n/&apos;</span><br><span class=\"line\">执行上面命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">fun</span><br><span class=\"line\">fin</span><br><span class=\"line\">fan</span><br><span class=\"line\">行开始</span><br><span class=\"line\">行开始符(^)匹配一行的开始。下面的示例将输出所有以字符串 The 开始的行。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;This\\nThat\\nThere\\nTheir\\nthese&quot; | awk &apos;/^The/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">There</span><br><span class=\"line\">Their</span><br><span class=\"line\">行结束</span><br><span class=\"line\">行结束符($)匹配一行的结束。下面的例子中将输出所有以字符 n 结束的行：</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;knif\\nknow\\nfun\\nfin\\nfan\\nnine&quot; | awk &apos;/n$/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">fun</span><br><span class=\"line\">fin</span><br><span class=\"line\">fan</span><br><span class=\"line\">匹配字符集</span><br><span class=\"line\">匹配字符集用于匹配集合（由方括号表示）中的一个字符。如下例子中，匹配 Call 与 Tall 而不会匹配 Ball。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;Call\\nTall\\nBall&quot; | awk &apos;/[CT]all/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">fun</span><br><span class=\"line\">fin</span><br><span class=\"line\">fan</span><br><span class=\"line\">排除集</span><br><span class=\"line\">正则匹配时会排除集合中的字符。如下例子中只会输出 Ball。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;Call\\nTall\\nBall&quot; | awk &apos;/[^CT]all/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">Ball</span><br><span class=\"line\">或</span><br><span class=\"line\">竖线(|)允许正则表达式实现逻辑或运算. 下面例子将会输出 Ball 与 Call 。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;Call\\nTall\\nBall\\nSmall\\nShall&quot; | awk &apos;/Call|Ball/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">Call</span><br><span class=\"line\">Ball</span><br><span class=\"line\">最多出现一次</span><br><span class=\"line\">该符号( ？)前面的字符不出现或者出现一次。如下示例匹配 Colour 与 Color。 使用 ? 使得 u 变成了可选字符 。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;Colour\\nColor&quot; | awk &apos;/Colou?r/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">Colour</span><br><span class=\"line\">Color</span><br><span class=\"line\">出现零次或多次</span><br><span class=\"line\">该符号(＊) 允许其前的字符出现多次或者不出现。如下示例将匹配 ca，cat, catt 等等。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;ca\\ncat\\ncatt&quot; | awk &apos;/cat*/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">ca</span><br><span class=\"line\">cat</span><br><span class=\"line\">catt</span><br><span class=\"line\">出现一次或多次</span><br><span class=\"line\">该符号(+)使得其前的字符出现一次或者多次。下面的例子会匹配一个 2 或者多个连续的 2。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;111\\n22\\n123\\n234\\n456\\n222&quot;  | awk &apos;/2+/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">22</span><br><span class=\"line\">123</span><br><span class=\"line\">234</span><br><span class=\"line\">222</span><br><span class=\"line\">分组</span><br><span class=\"line\">括号用于分组而字符 | 用于提供多种选择。如下的正则表达式会匹配所有包含 Apple Juice 或 Aplle Cake 的行。</span><br><span class=\"line\"></span><br><span class=\"line\">[jerry]$ echo -e &quot;Apple Juice\\nApple Pie\\nApple Tart\\nApple Cake&quot; | awk &apos;/Apple (Juice|Cake)/&apos;</span><br><span class=\"line\">执行上面的命令可以得到如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">Apple Juice</span><br><span class=\"line\">Apple Cake</span><br></pre></td></tr></table></figure>\n"},{"title":"SVN常用命令","_content":"\n 1. svn checkout(co)\n`svn co svn://new.svn.playcrab-inc.com/kos/Paytest`\n\n2.查看远程地址\n`svn info`\n\n3.svn update(up)\n","source":"_posts/SVN常用命令.md","raw":"---\ntitle: SVN常用命令\ncategories :\n- 技术\ntags :\n- svn\n---\n\n 1. svn checkout(co)\n`svn co svn://new.svn.playcrab-inc.com/kos/Paytest`\n\n2.查看远程地址\n`svn info`\n\n3.svn update(up)\n","slug":"SVN常用命令","published":1,"date":"2019-05-21T02:36:43.919Z","updated":"2019-05-21T02:36:43.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbsa003cm74zc5hdd9eo","content":"<ol>\n<li>svn checkout(co)<br><code>svn co svn://new.svn.playcrab-inc.com/kos/Paytest</code></li>\n</ol>\n<p>2.查看远程地址<br><code>svn info</code></p>\n<p>3.svn update(up)</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>svn checkout(co)<br><code>svn co svn://new.svn.playcrab-inc.com/kos/Paytest</code></li>\n</ol>\n<p>2.查看远程地址<br><code>svn info</code></p>\n<p>3.svn update(up)</p>\n"},{"title":"find","_content":"```\n#名称为 a*.log 的文件\n playcrab@shenpeng  ~/Desktop/log  find . -iname a\\*.log\n./a.log\n./action-countVIVO.log\n./action-countTencent.log\n./action-countHuawei.log\n./action-countXiaoMi.log\n./action-count2.log\n./aplay.log\n./action-count.log\n./action-countOPPO.log\n\n#类型为目录的文件\n playcrab@shenpeng  ~/Desktop/log  find . -type d\n.\n./role\n./test\n./2018-11-29log\n./retain\n```\n\n\n\n\n","source":"_posts/find.md","raw":"---\ntitle: find\ncategories :\n- 技术\ntags :\n- linux\n---\n```\n#名称为 a*.log 的文件\n playcrab@shenpeng  ~/Desktop/log  find . -iname a\\*.log\n./a.log\n./action-countVIVO.log\n./action-countTencent.log\n./action-countHuawei.log\n./action-countXiaoMi.log\n./action-count2.log\n./aplay.log\n./action-count.log\n./action-countOPPO.log\n\n#类型为目录的文件\n playcrab@shenpeng  ~/Desktop/log  find . -type d\n.\n./role\n./test\n./2018-11-29log\n./retain\n```\n\n\n\n\n","slug":"find","published":1,"date":"2019-05-21T02:36:43.920Z","updated":"2019-05-21T02:36:43.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbsc003gm74zjzqa3mga","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#名称为 a*.log 的文件</span><br><span class=\"line\"> playcrab@shenpeng  ~/Desktop/log  find . -iname a\\*.log</span><br><span class=\"line\">./a.log</span><br><span class=\"line\">./action-countVIVO.log</span><br><span class=\"line\">./action-countTencent.log</span><br><span class=\"line\">./action-countHuawei.log</span><br><span class=\"line\">./action-countXiaoMi.log</span><br><span class=\"line\">./action-count2.log</span><br><span class=\"line\">./aplay.log</span><br><span class=\"line\">./action-count.log</span><br><span class=\"line\">./action-countOPPO.log</span><br><span class=\"line\"></span><br><span class=\"line\">#类型为目录的文件</span><br><span class=\"line\"> playcrab@shenpeng  ~/Desktop/log  find . -type d</span><br><span class=\"line\">.</span><br><span class=\"line\">./role</span><br><span class=\"line\">./test</span><br><span class=\"line\">./2018-11-29log</span><br><span class=\"line\">./retain</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#名称为 a*.log 的文件</span><br><span class=\"line\"> playcrab@shenpeng  ~/Desktop/log  find . -iname a\\*.log</span><br><span class=\"line\">./a.log</span><br><span class=\"line\">./action-countVIVO.log</span><br><span class=\"line\">./action-countTencent.log</span><br><span class=\"line\">./action-countHuawei.log</span><br><span class=\"line\">./action-countXiaoMi.log</span><br><span class=\"line\">./action-count2.log</span><br><span class=\"line\">./aplay.log</span><br><span class=\"line\">./action-count.log</span><br><span class=\"line\">./action-countOPPO.log</span><br><span class=\"line\"></span><br><span class=\"line\">#类型为目录的文件</span><br><span class=\"line\"> playcrab@shenpeng  ~/Desktop/log  find . -type d</span><br><span class=\"line\">.</span><br><span class=\"line\">./role</span><br><span class=\"line\">./test</span><br><span class=\"line\">./2018-11-29log</span><br><span class=\"line\">./retain</span><br></pre></td></tr></table></figure>\n"},{"title":"git的一些操作","_content":"\n#### 要添加一个新的功能\n1.本地新建分支 \n```\ngit checkout  -b brMissionDel\n```\n2.修改完代码后add并commit然后\n```\ngit push --set-upstream origin brMissionDel\n```\n3.测试通过后\n切到这分支merge\n\n删除本地\ngit branch -d brMissionDel\n\n删除远程\ngit push origin :brMissionDel\n\n\n##### 查看本地未提交的commit\n` git cherry -v`\n```\n playcrab@shenpeng  ~/code/JavaCode/shenpeng.github.io   master  git cherry -v\n+ 0c1a2f367db2cf47476c0167cb0e5d3846903a2d add logic\n+ 695246c3de14265ee7efe6423cf6736425648e88 add logic 2\n playcrab@shenpeng  ~/code/JavaCode/shenpeng.github.io   master  git  show 0c1a2f367db2cf47476c0167cb0e5d3846903a2d\n```\n\n##### git撤销合并\nhttp://blog.psjay.com/posts/git-revert-merge-commit/\n`git revert -m 1 e55d0543e96b22d9cecce2dcb7eeae1a9cb53edf `\n\n合并时也可以`git merge --abort`\n\n##### git stash\n```\ngit stash\ngit stash list \ngit stash pop\n```\n\n##### git 查看本地未提交commit\n`git cherry -v`\n\n","source":"_posts/git的一些操作.md","raw":"---\ntitle: git的一些操作\ncategories :\n- 技术\ntags :\n- git\n---\n\n#### 要添加一个新的功能\n1.本地新建分支 \n```\ngit checkout  -b brMissionDel\n```\n2.修改完代码后add并commit然后\n```\ngit push --set-upstream origin brMissionDel\n```\n3.测试通过后\n切到这分支merge\n\n删除本地\ngit branch -d brMissionDel\n\n删除远程\ngit push origin :brMissionDel\n\n\n##### 查看本地未提交的commit\n` git cherry -v`\n```\n playcrab@shenpeng  ~/code/JavaCode/shenpeng.github.io   master  git cherry -v\n+ 0c1a2f367db2cf47476c0167cb0e5d3846903a2d add logic\n+ 695246c3de14265ee7efe6423cf6736425648e88 add logic 2\n playcrab@shenpeng  ~/code/JavaCode/shenpeng.github.io   master  git  show 0c1a2f367db2cf47476c0167cb0e5d3846903a2d\n```\n\n##### git撤销合并\nhttp://blog.psjay.com/posts/git-revert-merge-commit/\n`git revert -m 1 e55d0543e96b22d9cecce2dcb7eeae1a9cb53edf `\n\n合并时也可以`git merge --abort`\n\n##### git stash\n```\ngit stash\ngit stash list \ngit stash pop\n```\n\n##### git 查看本地未提交commit\n`git cherry -v`\n\n","slug":"git的一些操作","published":1,"date":"2019-05-21T02:36:43.920Z","updated":"2019-05-21T02:36:43.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbse003jm74zmq98qlqc","content":"<h4 id=\"要添加一个新的功能\"><a href=\"#要添加一个新的功能\" class=\"headerlink\" title=\"要添加一个新的功能\"></a>要添加一个新的功能</h4><p>1.本地新建分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout  -b brMissionDel</span><br></pre></td></tr></table></figure></p>\n<p>2.修改完代码后add并commit然后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin brMissionDel</span><br></pre></td></tr></table></figure></p>\n<p>3.测试通过后<br>切到这分支merge</p>\n<p>删除本地<br>git branch -d brMissionDel</p>\n<p>删除远程<br>git push origin :brMissionDel</p>\n<h5 id=\"查看本地未提交的commit\"><a href=\"#查看本地未提交的commit\" class=\"headerlink\" title=\"查看本地未提交的commit\"></a>查看本地未提交的commit</h5><p><code>git cherry -v</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> playcrab@shenpeng  ~/code/JavaCode/shenpeng.github.io   master  git cherry -v</span><br><span class=\"line\">+ 0c1a2f367db2cf47476c0167cb0e5d3846903a2d add logic</span><br><span class=\"line\">+ 695246c3de14265ee7efe6423cf6736425648e88 add logic 2</span><br><span class=\"line\"> playcrab@shenpeng  ~/code/JavaCode/shenpeng.github.io   master  git  show 0c1a2f367db2cf47476c0167cb0e5d3846903a2d</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"git撤销合并\"><a href=\"#git撤销合并\" class=\"headerlink\" title=\"git撤销合并\"></a>git撤销合并</h5><p><a href=\"http://blog.psjay.com/posts/git-revert-merge-commit/\" target=\"_blank\" rel=\"noopener\">http://blog.psjay.com/posts/git-revert-merge-commit/</a><br><code>git revert -m 1 e55d0543e96b22d9cecce2dcb7eeae1a9cb53edf</code></p>\n<p>合并时也可以<code>git merge --abort</code></p>\n<h5 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br><span class=\"line\">git stash list </span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<h5 id=\"git-查看本地未提交commit\"><a href=\"#git-查看本地未提交commit\" class=\"headerlink\" title=\"git 查看本地未提交commit\"></a>git 查看本地未提交commit</h5><p><code>git cherry -v</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"要添加一个新的功能\"><a href=\"#要添加一个新的功能\" class=\"headerlink\" title=\"要添加一个新的功能\"></a>要添加一个新的功能</h4><p>1.本地新建分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout  -b brMissionDel</span><br></pre></td></tr></table></figure></p>\n<p>2.修改完代码后add并commit然后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin brMissionDel</span><br></pre></td></tr></table></figure></p>\n<p>3.测试通过后<br>切到这分支merge</p>\n<p>删除本地<br>git branch -d brMissionDel</p>\n<p>删除远程<br>git push origin :brMissionDel</p>\n<h5 id=\"查看本地未提交的commit\"><a href=\"#查看本地未提交的commit\" class=\"headerlink\" title=\"查看本地未提交的commit\"></a>查看本地未提交的commit</h5><p><code>git cherry -v</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> playcrab@shenpeng  ~/code/JavaCode/shenpeng.github.io   master  git cherry -v</span><br><span class=\"line\">+ 0c1a2f367db2cf47476c0167cb0e5d3846903a2d add logic</span><br><span class=\"line\">+ 695246c3de14265ee7efe6423cf6736425648e88 add logic 2</span><br><span class=\"line\"> playcrab@shenpeng  ~/code/JavaCode/shenpeng.github.io   master  git  show 0c1a2f367db2cf47476c0167cb0e5d3846903a2d</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"git撤销合并\"><a href=\"#git撤销合并\" class=\"headerlink\" title=\"git撤销合并\"></a>git撤销合并</h5><p><a href=\"http://blog.psjay.com/posts/git-revert-merge-commit/\" target=\"_blank\" rel=\"noopener\">http://blog.psjay.com/posts/git-revert-merge-commit/</a><br><code>git revert -m 1 e55d0543e96b22d9cecce2dcb7eeae1a9cb53edf</code></p>\n<p>合并时也可以<code>git merge --abort</code></p>\n<h5 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br><span class=\"line\">git stash list </span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<h5 id=\"git-查看本地未提交commit\"><a href=\"#git-查看本地未提交commit\" class=\"headerlink\" title=\"git 查看本地未提交commit\"></a>git 查看本地未提交commit</h5><p><code>git cherry -v</code></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-05-11T11:33:07.754Z","updated":"2019-05-11T11:33:07.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbsg003nm74zxe1l2rtj","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"jinja 配置文件渲染模板","_content":"\n##### 通过meta.yaml里的配置文件,渲染模板文件gs.tpl生成gs.json\n - meta.yaml配置文件内容如下:\n```\nsecs:\n - id: 1\n   user: user1\n   pwd: pwd1\n   info:\n       gender: male\n\n - id: 2\n   user: user2\n   pwd: pwd2\n   info:\n       gender: female\n```\n - gs.tpl模板文件内容:\n```\n{\n    {%-  for sec in cfg.secs    %}\n    \"{{sec.id}}\":{\n        \"user\":\"{{sec.user}}\",\n        \"pwd\":\"{{sec.pwd}}\",\n        \"info\":\"{{sec.info}}\"\n    }\n    {%- endfor %}\n}\n```\n - 最终生成的gs.json文件:\n```\n{\n    \"1\":{\n        \"user\":\"user1\",\n        \"pwd\":\"pwd1\",\n        \"info\":\"{'gender': 'male'}\"\n    }\n    \"2\":{\n        \"user\":\"user2\",\n        \"pwd\":\"pwd2\",\n        \"info\":\"{'gender': 'female'}\"\n    }\n}\n```\n - python代码:\n```\n#!/usr/bin/python\n#. -*- coding: UTF-8 -*-\n#读取meta.yaml  并且渲染gs.tpl\n\nimport ConfigParser\nimport os\nimport yaml\nfrom jinja2 import Template\nfrom jinja2 import Environment\nfrom jinja2 import FileSystemLoader\n\n#os.chdir() 方法用于改变当前工作目录到指定的路径。\n#os.getcwd()  获取文件路径\n#对于本例,文件都在同一文件夹下,下面这行代码其实没意义\nos.chdir(os.getcwd())\n\nyamlpath = 'meta.yaml'\nconfig = yaml.load(file(yamlpath,'r'))\n\nenv = Environment( loader = FileSystemLoader(os.getcwd()))\ntemplate = env.get_template('gs.tpl')\nresult =   template.render(cfg=config)\n\nfp = open('gs.json','w')\nfp.write(result)\n```\n","source":"_posts/jinja配置文件渲染模板.md","raw":"---\ntitle: jinja 配置文件渲染模板\ncategories :\n- 技术\ntags :\n- python\n- jinja\n---\n\n##### 通过meta.yaml里的配置文件,渲染模板文件gs.tpl生成gs.json\n - meta.yaml配置文件内容如下:\n```\nsecs:\n - id: 1\n   user: user1\n   pwd: pwd1\n   info:\n       gender: male\n\n - id: 2\n   user: user2\n   pwd: pwd2\n   info:\n       gender: female\n```\n - gs.tpl模板文件内容:\n```\n{\n    {%-  for sec in cfg.secs    %}\n    \"{{sec.id}}\":{\n        \"user\":\"{{sec.user}}\",\n        \"pwd\":\"{{sec.pwd}}\",\n        \"info\":\"{{sec.info}}\"\n    }\n    {%- endfor %}\n}\n```\n - 最终生成的gs.json文件:\n```\n{\n    \"1\":{\n        \"user\":\"user1\",\n        \"pwd\":\"pwd1\",\n        \"info\":\"{'gender': 'male'}\"\n    }\n    \"2\":{\n        \"user\":\"user2\",\n        \"pwd\":\"pwd2\",\n        \"info\":\"{'gender': 'female'}\"\n    }\n}\n```\n - python代码:\n```\n#!/usr/bin/python\n#. -*- coding: UTF-8 -*-\n#读取meta.yaml  并且渲染gs.tpl\n\nimport ConfigParser\nimport os\nimport yaml\nfrom jinja2 import Template\nfrom jinja2 import Environment\nfrom jinja2 import FileSystemLoader\n\n#os.chdir() 方法用于改变当前工作目录到指定的路径。\n#os.getcwd()  获取文件路径\n#对于本例,文件都在同一文件夹下,下面这行代码其实没意义\nos.chdir(os.getcwd())\n\nyamlpath = 'meta.yaml'\nconfig = yaml.load(file(yamlpath,'r'))\n\nenv = Environment( loader = FileSystemLoader(os.getcwd()))\ntemplate = env.get_template('gs.tpl')\nresult =   template.render(cfg=config)\n\nfp = open('gs.json','w')\nfp.write(result)\n```\n","slug":"jinja配置文件渲染模板","published":1,"date":"2019-05-21T02:36:43.921Z","updated":"2019-05-21T02:36:43.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbsi003qm74zlotnjxp1","content":"<h5 id=\"通过meta-yaml里的配置文件-渲染模板文件gs-tpl生成gs-json\"><a href=\"#通过meta-yaml里的配置文件-渲染模板文件gs-tpl生成gs-json\" class=\"headerlink\" title=\"通过meta.yaml里的配置文件,渲染模板文件gs.tpl生成gs.json\"></a>通过meta.yaml里的配置文件,渲染模板文件gs.tpl生成gs.json</h5><ul>\n<li><p>meta.yaml配置文件内容如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">secs:</span><br><span class=\"line\"> - id: 1</span><br><span class=\"line\">   user: user1</span><br><span class=\"line\">   pwd: pwd1</span><br><span class=\"line\">   info:</span><br><span class=\"line\">       gender: male</span><br><span class=\"line\"></span><br><span class=\"line\"> - id: 2</span><br><span class=\"line\">   user: user2</span><br><span class=\"line\">   pwd: pwd2</span><br><span class=\"line\">   info:</span><br><span class=\"line\">       gender: female</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gs.tpl模板文件内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &#123;%-  for sec in cfg.secs    %&#125;</span><br><span class=\"line\">    &quot;&#123;&#123;sec.id&#125;&#125;&quot;:&#123;</span><br><span class=\"line\">        &quot;user&quot;:&quot;&#123;&#123;sec.user&#125;&#125;&quot;,</span><br><span class=\"line\">        &quot;pwd&quot;:&quot;&#123;&#123;sec.pwd&#125;&#125;&quot;,</span><br><span class=\"line\">        &quot;info&quot;:&quot;&#123;&#123;sec.info&#125;&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;%- endfor %&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最终生成的gs.json文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;1&quot;:&#123;</span><br><span class=\"line\">        &quot;user&quot;:&quot;user1&quot;,</span><br><span class=\"line\">        &quot;pwd&quot;:&quot;pwd1&quot;,</span><br><span class=\"line\">        &quot;info&quot;:&quot;&#123;&apos;gender&apos;: &apos;male&apos;&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &quot;2&quot;:&#123;</span><br><span class=\"line\">        &quot;user&quot;:&quot;user2&quot;,</span><br><span class=\"line\">        &quot;pwd&quot;:&quot;pwd2&quot;,</span><br><span class=\"line\">        &quot;info&quot;:&quot;&#123;&apos;gender&apos;: &apos;female&apos;&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>python代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">#. -*- coding: UTF-8 -*-</span><br><span class=\"line\">#读取meta.yaml  并且渲染gs.tpl</span><br><span class=\"line\"></span><br><span class=\"line\">import ConfigParser</span><br><span class=\"line\">import os</span><br><span class=\"line\">import yaml</span><br><span class=\"line\">from jinja2 import Template</span><br><span class=\"line\">from jinja2 import Environment</span><br><span class=\"line\">from jinja2 import FileSystemLoader</span><br><span class=\"line\"></span><br><span class=\"line\">#os.chdir() 方法用于改变当前工作目录到指定的路径。</span><br><span class=\"line\">#os.getcwd()  获取文件路径</span><br><span class=\"line\">#对于本例,文件都在同一文件夹下,下面这行代码其实没意义</span><br><span class=\"line\">os.chdir(os.getcwd())</span><br><span class=\"line\"></span><br><span class=\"line\">yamlpath = &apos;meta.yaml&apos;</span><br><span class=\"line\">config = yaml.load(file(yamlpath,&apos;r&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">env = Environment( loader = FileSystemLoader(os.getcwd()))</span><br><span class=\"line\">template = env.get_template(&apos;gs.tpl&apos;)</span><br><span class=\"line\">result =   template.render(cfg=config)</span><br><span class=\"line\"></span><br><span class=\"line\">fp = open(&apos;gs.json&apos;,&apos;w&apos;)</span><br><span class=\"line\">fp.write(result)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"通过meta-yaml里的配置文件-渲染模板文件gs-tpl生成gs-json\"><a href=\"#通过meta-yaml里的配置文件-渲染模板文件gs-tpl生成gs-json\" class=\"headerlink\" title=\"通过meta.yaml里的配置文件,渲染模板文件gs.tpl生成gs.json\"></a>通过meta.yaml里的配置文件,渲染模板文件gs.tpl生成gs.json</h5><ul>\n<li><p>meta.yaml配置文件内容如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">secs:</span><br><span class=\"line\"> - id: 1</span><br><span class=\"line\">   user: user1</span><br><span class=\"line\">   pwd: pwd1</span><br><span class=\"line\">   info:</span><br><span class=\"line\">       gender: male</span><br><span class=\"line\"></span><br><span class=\"line\"> - id: 2</span><br><span class=\"line\">   user: user2</span><br><span class=\"line\">   pwd: pwd2</span><br><span class=\"line\">   info:</span><br><span class=\"line\">       gender: female</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gs.tpl模板文件内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &#123;%-  for sec in cfg.secs    %&#125;</span><br><span class=\"line\">    &quot;&#123;&#123;sec.id&#125;&#125;&quot;:&#123;</span><br><span class=\"line\">        &quot;user&quot;:&quot;&#123;&#123;sec.user&#125;&#125;&quot;,</span><br><span class=\"line\">        &quot;pwd&quot;:&quot;&#123;&#123;sec.pwd&#125;&#125;&quot;,</span><br><span class=\"line\">        &quot;info&quot;:&quot;&#123;&#123;sec.info&#125;&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;%- endfor %&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最终生成的gs.json文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;1&quot;:&#123;</span><br><span class=\"line\">        &quot;user&quot;:&quot;user1&quot;,</span><br><span class=\"line\">        &quot;pwd&quot;:&quot;pwd1&quot;,</span><br><span class=\"line\">        &quot;info&quot;:&quot;&#123;&apos;gender&apos;: &apos;male&apos;&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &quot;2&quot;:&#123;</span><br><span class=\"line\">        &quot;user&quot;:&quot;user2&quot;,</span><br><span class=\"line\">        &quot;pwd&quot;:&quot;pwd2&quot;,</span><br><span class=\"line\">        &quot;info&quot;:&quot;&#123;&apos;gender&apos;: &apos;female&apos;&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>python代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">#. -*- coding: UTF-8 -*-</span><br><span class=\"line\">#读取meta.yaml  并且渲染gs.tpl</span><br><span class=\"line\"></span><br><span class=\"line\">import ConfigParser</span><br><span class=\"line\">import os</span><br><span class=\"line\">import yaml</span><br><span class=\"line\">from jinja2 import Template</span><br><span class=\"line\">from jinja2 import Environment</span><br><span class=\"line\">from jinja2 import FileSystemLoader</span><br><span class=\"line\"></span><br><span class=\"line\">#os.chdir() 方法用于改变当前工作目录到指定的路径。</span><br><span class=\"line\">#os.getcwd()  获取文件路径</span><br><span class=\"line\">#对于本例,文件都在同一文件夹下,下面这行代码其实没意义</span><br><span class=\"line\">os.chdir(os.getcwd())</span><br><span class=\"line\"></span><br><span class=\"line\">yamlpath = &apos;meta.yaml&apos;</span><br><span class=\"line\">config = yaml.load(file(yamlpath,&apos;r&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">env = Environment( loader = FileSystemLoader(os.getcwd()))</span><br><span class=\"line\">template = env.get_template(&apos;gs.tpl&apos;)</span><br><span class=\"line\">result =   template.render(cfg=config)</span><br><span class=\"line\"></span><br><span class=\"line\">fp = open(&apos;gs.json&apos;,&apos;w&apos;)</span><br><span class=\"line\">fp.write(result)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"idea方法模板,显示参数和返回值类型","_content":"\n之前配置的自定义模板方法参数和返回值类型一直显示不出来,如下:\n```\n/**\n     * 通过怪物类型和属性基础值计算最终值\n     *\n     * @param\n     * @return\n     * @Author: shenpeng\n     * @Date: 2019/1/14\n     */\n     private Map<String, Integer> getASHSfinByCfg(Map<String, Double> baseVals, String type,\n            TKEquipEnemyType enemyType) {\n```\n是由于idea的模板设置时以`/**`开头,修改模板为\n```\n**\n * \n * \n * @param $params$\n * @return $returns$\n * @Author: shenpeng\n * @Date: $date$ \n */ \n```\n之后,快捷键还是设置为`cmt`,但是用的时候用`/cmt`把开头缺少的`/`补上就行了.\n结果如下:\n```\n/**\n     * \n     * \n     * @param [baseVals, type, enemyType]\n     * @return java.util.Map<java.lang.String,java.lang.Integer>\n     * @Author: shenpeng\n     * @Date: 2019-02-26 \n     */ \n```\n\n\n\n\n","source":"_posts/idea方法模板,显示参数和返回值类型.md","raw":"---\ntitle: idea方法模板,显示参数和返回值类型\ncategories :\n- 技术\ntags :\n- Java\n- idea\n---\n\n之前配置的自定义模板方法参数和返回值类型一直显示不出来,如下:\n```\n/**\n     * 通过怪物类型和属性基础值计算最终值\n     *\n     * @param\n     * @return\n     * @Author: shenpeng\n     * @Date: 2019/1/14\n     */\n     private Map<String, Integer> getASHSfinByCfg(Map<String, Double> baseVals, String type,\n            TKEquipEnemyType enemyType) {\n```\n是由于idea的模板设置时以`/**`开头,修改模板为\n```\n**\n * \n * \n * @param $params$\n * @return $returns$\n * @Author: shenpeng\n * @Date: $date$ \n */ \n```\n之后,快捷键还是设置为`cmt`,但是用的时候用`/cmt`把开头缺少的`/`补上就行了.\n结果如下:\n```\n/**\n     * \n     * \n     * @param [baseVals, type, enemyType]\n     * @return java.util.Map<java.lang.String,java.lang.Integer>\n     * @Author: shenpeng\n     * @Date: 2019-02-26 \n     */ \n```\n\n\n\n\n","slug":"idea方法模板,显示参数和返回值类型","published":1,"date":"2019-05-11T11:33:08.208Z","updated":"2019-05-11T11:33:08.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbsk003um74zy540v5rh","content":"<p>之前配置的自定义模板方法参数和返回值类型一直显示不出来,如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * 通过怪物类型和属性基础值计算最终值</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @Author: shenpeng</span><br><span class=\"line\">     * @Date: 2019/1/14</span><br><span class=\"line\">     */</span><br><span class=\"line\">     private Map&lt;String, Integer&gt; getASHSfinByCfg(Map&lt;String, Double&gt; baseVals, String type,</span><br><span class=\"line\">            TKEquipEnemyType enemyType) &#123;</span><br></pre></td></tr></table></figure></p>\n<p>是由于idea的模板设置时以<code>/**</code>开头,修改模板为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @param $params$</span><br><span class=\"line\"> * @return $returns$</span><br><span class=\"line\"> * @Author: shenpeng</span><br><span class=\"line\"> * @Date: $date$ </span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure></p>\n<p>之后,快捷键还是设置为<code>cmt</code>,但是用的时候用<code>/cmt</code>把开头缺少的<code>/</code>补上就行了.<br>结果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param [baseVals, type, enemyType]</span><br><span class=\"line\">     * @return java.util.Map&lt;java.lang.String,java.lang.Integer&gt;</span><br><span class=\"line\">     * @Author: shenpeng</span><br><span class=\"line\">     * @Date: 2019-02-26 </span><br><span class=\"line\">     */</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前配置的自定义模板方法参数和返回值类型一直显示不出来,如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * 通过怪物类型和属性基础值计算最终值</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @Author: shenpeng</span><br><span class=\"line\">     * @Date: 2019/1/14</span><br><span class=\"line\">     */</span><br><span class=\"line\">     private Map&lt;String, Integer&gt; getASHSfinByCfg(Map&lt;String, Double&gt; baseVals, String type,</span><br><span class=\"line\">            TKEquipEnemyType enemyType) &#123;</span><br></pre></td></tr></table></figure></p>\n<p>是由于idea的模板设置时以<code>/**</code>开头,修改模板为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @param $params$</span><br><span class=\"line\"> * @return $returns$</span><br><span class=\"line\"> * @Author: shenpeng</span><br><span class=\"line\"> * @Date: $date$ </span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure></p>\n<p>之后,快捷键还是设置为<code>cmt</code>,但是用的时候用<code>/cmt</code>把开头缺少的<code>/</code>补上就行了.<br>结果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param [baseVals, type, enemyType]</span><br><span class=\"line\">     * @return java.util.Map&lt;java.lang.String,java.lang.Integer&gt;</span><br><span class=\"line\">     * @Author: shenpeng</span><br><span class=\"line\">     * @Date: 2019-02-26 </span><br><span class=\"line\">     */</span><br></pre></td></tr></table></figure></p>\n"},{"title":"mdPage","date":"2019-01-08T12:23:56.000Z","_content":"\n###1\nnew markdown page\n\t\tsd \n\t\t\t\tsd\n```\nsdsd\n```\t\nhtthub.com\t\t\t\n","source":"_posts/mdPage.md","raw":"---\ntitle: mdPage\ndate: 2019-01-08 20:23:56\ntags:\n---\n\n###1\nnew markdown page\n\t\tsd \n\t\t\t\tsd\n```\nsdsd\n```\t\nhtthub.com\t\t\t\n","slug":"mdPage","published":1,"updated":"2019-05-11T11:33:08.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbsn003xm74zp2ir5g43","content":"<p>###1<br>new markdown page<br>        sd<br>                sd</p>\n<pre><code>sdsd\n</code></pre><p>htthub.com            </p>\n","site":{"data":{}},"excerpt":"","more":"<p>###1<br>new markdown page<br>        sd<br>                sd</p>\n<pre><code>sdsd\n</code></pre><p>htthub.com            </p>\n"},{"title":"mina 中的IoEvent","_content":"\nIoEvent中\n```\n    public void run() {\n        fire();\n    }\n```\n他里面的run()方法回一直调用fire方法,IoFilterEvent继承了IoEvent,\n每个IoFilterEvent和session绑定:\n```\npublic IoFilterEvent(NextFilter nextFilter, IoEventType type, IoSession session, Object parameter) {\n        super(type, session, parameter);\n\n        if (nextFilter == null) {\n            throw new IllegalArgumentException(\"nextFilter must not be null\");\n        }\n\n        this.nextFilter = nextFilter;\n    }\n```\nfire()方法如下:\n```\n    @Override\n    public void fire() {\n        IoSession session = getSession();\n        NextFilter nextFilter = getNextFilter();\n        IoEventType type = getType();\n\n        if (DEBUG) {\n            LOGGER.debug(\"Firing a {} event for session {}\", type, session.getId());\n        }\n\n        switch (type) {\n        case MESSAGE_RECEIVED:\n            Object parameter = getParameter();\n            nextFilter.messageReceived(session, parameter);\n            break;\n\n        case MESSAGE_SENT:\n            WriteRequest writeRequest = (WriteRequest) getParameter();\n            nextFilter.messageSent(session, writeRequest);\n            break;\n\n        case WRITE:\n            writeRequest = (WriteRequest) getParameter();\n            nextFilter.filterWrite(session, writeRequest);\n            break;\n\n        case CLOSE:\n            nextFilter.filterClose(session);\n            break;\n\n        case EXCEPTION_CAUGHT:\n            Throwable throwable = (Throwable) getParameter();\n            nextFilter.exceptionCaught(session, throwable);\n            break;\n\n        case SESSION_IDLE:\n            nextFilter.sessionIdle(session, (IdleStatus) getParameter());\n            break;\n\n        case SESSION_OPENED:\n            nextFilter.sessionOpened(session);\n            break;\n\n        case SESSION_CREATED:\n            nextFilter.sessionCreated(session);\n            break;\n\n        case SESSION_CLOSED:\n            nextFilter.sessionClosed(session);\n            break;\n\n        default:\n            throw new IllegalArgumentException(\"Unknown event type: \" + type);\n        }\n\n        if (DEBUG) {\n            LOGGER.debug(\"Event {} has been fired for session {}\", type, session.getId());\n        }\n    }\n```\n所以,每当一个session产生事件时,都会触发相应IoEventType类型的处理事件.\n\n\n\n\n\n------\n\n同样在AbstractPollingIoProcessor的Processor.run()中\n循环里面有 notifyIdleSessions(currentTime);方法\n调用:\n```\n public static void notifyIdleSession(IoSession session, long currentTime) {\n        notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.BOTH_IDLE),\n                IdleStatus.BOTH_IDLE, Math.max(session.getLastIoTime(), session.getLastIdleTime(IdleStatus.BOTH_IDLE)));\n\n        notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.READER_IDLE),\n                IdleStatus.READER_IDLE,\n                Math.max(session.getLastReadTime(), session.getLastIdleTime(IdleStatus.READER_IDLE)));\n\n        notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.WRITER_IDLE),\n                IdleStatus.WRITER_IDLE,\n                Math.max(session.getLastWriteTime(), session.getLastIdleTime(IdleStatus.WRITER_IDLE)));\n\n        notifyWriteTimeout(session, currentTime);\n    }\n```\n","source":"_posts/mina 中的IoEvent.md","raw":"---\ntitle:  mina 中的IoEvent\ncategories :\n- 技术\ntags :\n- Java\n- mina\n---\n\nIoEvent中\n```\n    public void run() {\n        fire();\n    }\n```\n他里面的run()方法回一直调用fire方法,IoFilterEvent继承了IoEvent,\n每个IoFilterEvent和session绑定:\n```\npublic IoFilterEvent(NextFilter nextFilter, IoEventType type, IoSession session, Object parameter) {\n        super(type, session, parameter);\n\n        if (nextFilter == null) {\n            throw new IllegalArgumentException(\"nextFilter must not be null\");\n        }\n\n        this.nextFilter = nextFilter;\n    }\n```\nfire()方法如下:\n```\n    @Override\n    public void fire() {\n        IoSession session = getSession();\n        NextFilter nextFilter = getNextFilter();\n        IoEventType type = getType();\n\n        if (DEBUG) {\n            LOGGER.debug(\"Firing a {} event for session {}\", type, session.getId());\n        }\n\n        switch (type) {\n        case MESSAGE_RECEIVED:\n            Object parameter = getParameter();\n            nextFilter.messageReceived(session, parameter);\n            break;\n\n        case MESSAGE_SENT:\n            WriteRequest writeRequest = (WriteRequest) getParameter();\n            nextFilter.messageSent(session, writeRequest);\n            break;\n\n        case WRITE:\n            writeRequest = (WriteRequest) getParameter();\n            nextFilter.filterWrite(session, writeRequest);\n            break;\n\n        case CLOSE:\n            nextFilter.filterClose(session);\n            break;\n\n        case EXCEPTION_CAUGHT:\n            Throwable throwable = (Throwable) getParameter();\n            nextFilter.exceptionCaught(session, throwable);\n            break;\n\n        case SESSION_IDLE:\n            nextFilter.sessionIdle(session, (IdleStatus) getParameter());\n            break;\n\n        case SESSION_OPENED:\n            nextFilter.sessionOpened(session);\n            break;\n\n        case SESSION_CREATED:\n            nextFilter.sessionCreated(session);\n            break;\n\n        case SESSION_CLOSED:\n            nextFilter.sessionClosed(session);\n            break;\n\n        default:\n            throw new IllegalArgumentException(\"Unknown event type: \" + type);\n        }\n\n        if (DEBUG) {\n            LOGGER.debug(\"Event {} has been fired for session {}\", type, session.getId());\n        }\n    }\n```\n所以,每当一个session产生事件时,都会触发相应IoEventType类型的处理事件.\n\n\n\n\n\n------\n\n同样在AbstractPollingIoProcessor的Processor.run()中\n循环里面有 notifyIdleSessions(currentTime);方法\n调用:\n```\n public static void notifyIdleSession(IoSession session, long currentTime) {\n        notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.BOTH_IDLE),\n                IdleStatus.BOTH_IDLE, Math.max(session.getLastIoTime(), session.getLastIdleTime(IdleStatus.BOTH_IDLE)));\n\n        notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.READER_IDLE),\n                IdleStatus.READER_IDLE,\n                Math.max(session.getLastReadTime(), session.getLastIdleTime(IdleStatus.READER_IDLE)));\n\n        notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.WRITER_IDLE),\n                IdleStatus.WRITER_IDLE,\n                Math.max(session.getLastWriteTime(), session.getLastIdleTime(IdleStatus.WRITER_IDLE)));\n\n        notifyWriteTimeout(session, currentTime);\n    }\n```\n","slug":"mina 中的IoEvent","published":1,"date":"2019-05-21T02:36:43.921Z","updated":"2019-05-21T02:36:43.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbsp0040m74zfwld1cgm","content":"<p>IoEvent中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void run() &#123;</span><br><span class=\"line\">    fire();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>他里面的run()方法回一直调用fire方法,IoFilterEvent继承了IoEvent,<br>每个IoFilterEvent和session绑定:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public IoFilterEvent(NextFilter nextFilter, IoEventType type, IoSession session, Object parameter) &#123;</span><br><span class=\"line\">        super(type, session, parameter);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (nextFilter == null) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;nextFilter must not be null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.nextFilter = nextFilter;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>fire()方法如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void fire() &#123;</span><br><span class=\"line\">    IoSession session = getSession();</span><br><span class=\"line\">    NextFilter nextFilter = getNextFilter();</span><br><span class=\"line\">    IoEventType type = getType();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (DEBUG) &#123;</span><br><span class=\"line\">        LOGGER.debug(&quot;Firing a &#123;&#125; event for session &#123;&#125;&quot;, type, session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    switch (type) &#123;</span><br><span class=\"line\">    case MESSAGE_RECEIVED:</span><br><span class=\"line\">        Object parameter = getParameter();</span><br><span class=\"line\">        nextFilter.messageReceived(session, parameter);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case MESSAGE_SENT:</span><br><span class=\"line\">        WriteRequest writeRequest = (WriteRequest) getParameter();</span><br><span class=\"line\">        nextFilter.messageSent(session, writeRequest);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case WRITE:</span><br><span class=\"line\">        writeRequest = (WriteRequest) getParameter();</span><br><span class=\"line\">        nextFilter.filterWrite(session, writeRequest);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case CLOSE:</span><br><span class=\"line\">        nextFilter.filterClose(session);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case EXCEPTION_CAUGHT:</span><br><span class=\"line\">        Throwable throwable = (Throwable) getParameter();</span><br><span class=\"line\">        nextFilter.exceptionCaught(session, throwable);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case SESSION_IDLE:</span><br><span class=\"line\">        nextFilter.sessionIdle(session, (IdleStatus) getParameter());</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case SESSION_OPENED:</span><br><span class=\"line\">        nextFilter.sessionOpened(session);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case SESSION_CREATED:</span><br><span class=\"line\">        nextFilter.sessionCreated(session);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case SESSION_CLOSED:</span><br><span class=\"line\">        nextFilter.sessionClosed(session);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    default:</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Unknown event type: &quot; + type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (DEBUG) &#123;</span><br><span class=\"line\">        LOGGER.debug(&quot;Event &#123;&#125; has been fired for session &#123;&#125;&quot;, type, session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以,每当一个session产生事件时,都会触发相应IoEventType类型的处理事件.</p>\n<hr>\n<p>同样在AbstractPollingIoProcessor的Processor.run()中<br>循环里面有 notifyIdleSessions(currentTime);方法<br>调用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void notifyIdleSession(IoSession session, long currentTime) &#123;</span><br><span class=\"line\">       notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.BOTH_IDLE),</span><br><span class=\"line\">               IdleStatus.BOTH_IDLE, Math.max(session.getLastIoTime(), session.getLastIdleTime(IdleStatus.BOTH_IDLE)));</span><br><span class=\"line\"></span><br><span class=\"line\">       notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.READER_IDLE),</span><br><span class=\"line\">               IdleStatus.READER_IDLE,</span><br><span class=\"line\">               Math.max(session.getLastReadTime(), session.getLastIdleTime(IdleStatus.READER_IDLE)));</span><br><span class=\"line\"></span><br><span class=\"line\">       notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.WRITER_IDLE),</span><br><span class=\"line\">               IdleStatus.WRITER_IDLE,</span><br><span class=\"line\">               Math.max(session.getLastWriteTime(), session.getLastIdleTime(IdleStatus.WRITER_IDLE)));</span><br><span class=\"line\"></span><br><span class=\"line\">       notifyWriteTimeout(session, currentTime);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>IoEvent中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void run() &#123;</span><br><span class=\"line\">    fire();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>他里面的run()方法回一直调用fire方法,IoFilterEvent继承了IoEvent,<br>每个IoFilterEvent和session绑定:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public IoFilterEvent(NextFilter nextFilter, IoEventType type, IoSession session, Object parameter) &#123;</span><br><span class=\"line\">        super(type, session, parameter);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (nextFilter == null) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;nextFilter must not be null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.nextFilter = nextFilter;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>fire()方法如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void fire() &#123;</span><br><span class=\"line\">    IoSession session = getSession();</span><br><span class=\"line\">    NextFilter nextFilter = getNextFilter();</span><br><span class=\"line\">    IoEventType type = getType();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (DEBUG) &#123;</span><br><span class=\"line\">        LOGGER.debug(&quot;Firing a &#123;&#125; event for session &#123;&#125;&quot;, type, session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    switch (type) &#123;</span><br><span class=\"line\">    case MESSAGE_RECEIVED:</span><br><span class=\"line\">        Object parameter = getParameter();</span><br><span class=\"line\">        nextFilter.messageReceived(session, parameter);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case MESSAGE_SENT:</span><br><span class=\"line\">        WriteRequest writeRequest = (WriteRequest) getParameter();</span><br><span class=\"line\">        nextFilter.messageSent(session, writeRequest);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case WRITE:</span><br><span class=\"line\">        writeRequest = (WriteRequest) getParameter();</span><br><span class=\"line\">        nextFilter.filterWrite(session, writeRequest);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case CLOSE:</span><br><span class=\"line\">        nextFilter.filterClose(session);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case EXCEPTION_CAUGHT:</span><br><span class=\"line\">        Throwable throwable = (Throwable) getParameter();</span><br><span class=\"line\">        nextFilter.exceptionCaught(session, throwable);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case SESSION_IDLE:</span><br><span class=\"line\">        nextFilter.sessionIdle(session, (IdleStatus) getParameter());</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case SESSION_OPENED:</span><br><span class=\"line\">        nextFilter.sessionOpened(session);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case SESSION_CREATED:</span><br><span class=\"line\">        nextFilter.sessionCreated(session);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    case SESSION_CLOSED:</span><br><span class=\"line\">        nextFilter.sessionClosed(session);</span><br><span class=\"line\">        break;</span><br><span class=\"line\"></span><br><span class=\"line\">    default:</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Unknown event type: &quot; + type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (DEBUG) &#123;</span><br><span class=\"line\">        LOGGER.debug(&quot;Event &#123;&#125; has been fired for session &#123;&#125;&quot;, type, session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以,每当一个session产生事件时,都会触发相应IoEventType类型的处理事件.</p>\n<hr>\n<p>同样在AbstractPollingIoProcessor的Processor.run()中<br>循环里面有 notifyIdleSessions(currentTime);方法<br>调用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void notifyIdleSession(IoSession session, long currentTime) &#123;</span><br><span class=\"line\">       notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.BOTH_IDLE),</span><br><span class=\"line\">               IdleStatus.BOTH_IDLE, Math.max(session.getLastIoTime(), session.getLastIdleTime(IdleStatus.BOTH_IDLE)));</span><br><span class=\"line\"></span><br><span class=\"line\">       notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.READER_IDLE),</span><br><span class=\"line\">               IdleStatus.READER_IDLE,</span><br><span class=\"line\">               Math.max(session.getLastReadTime(), session.getLastIdleTime(IdleStatus.READER_IDLE)));</span><br><span class=\"line\"></span><br><span class=\"line\">       notifyIdleSession0(session, currentTime, session.getConfig().getIdleTimeInMillis(IdleStatus.WRITER_IDLE),</span><br><span class=\"line\">               IdleStatus.WRITER_IDLE,</span><br><span class=\"line\">               Math.max(session.getLastWriteTime(), session.getLastIdleTime(IdleStatus.WRITER_IDLE)));</span><br><span class=\"line\"></span><br><span class=\"line\">       notifyWriteTimeout(session, currentTime);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"php连mysql","_content":"\n从官网下载mysal并配置环境变量后\n```\n ✘ playcrab@shenpeng  ~  mysql -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\n```\n此时用php连mysql\n```\n<?php\n$servername=\"127.0.0.1\";\n$username=\"root\";\n$pwd=\"12345678\";\n$conn = new mysqli($servername,$username,$pwd);\nif ($conn->connect_error){\n    die( \"连接失败: \".$conn->connect_error);\n}\necho \"连接成功\";\n?>\n```\n会报错:\n```\nWarning: mysqli::__construct(): (HY000/2054): The server requested authentication method unknown to the client in /Users/playcrab/phpcode/PhpTest/src/MysqlConnect.php on line 11\n连接失败: The server requested authentication method unknown to the client\n```\n发生这种错误，是由于MySQL8默认使用了新的密码验证插件：caching_sha2_password，而之前的PHP版本中所带的mysqlnd无法支持这种验证。\n如果不能升级PHP，可以在MySQL 8中创建（或修改）使用caching_sha2_password插件的账户，使之使用mysql_native_password，这样先前版本的PHP就可以连接使用了。\n\n在CREATE USER时，使用`IDENTIFIED WITH xxx_plugin BY 'password'`，比如：\n```\nCREATE USER 'native'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password!2#4';\n```\n使用ALTER USER修改已有账户的验证插件：\n```\nALTER USER 'native'@'localhost' IDENTIFIED WITH mysql_native_password\n```\n或\n```\nALTER USER 'native'@'localhost' IDENTIFIED WITH mysql_native_password BY 'new_password';\n```\n采用前一种方式，账户的密码将被清除；BY子句将为账户设置新的密码。\n\n/etc/my.cnf配置文件中，有一行：\n```\n# default-authentication-plugin=mysql_native_password\n```\n请删除注释符号“#”并重新启动mysqld使之生效，此后创建的账户均默认使用`mysql_native_password`。\n\n如果您完成MySQL Server的安装之后，在没有启动过mysqld服务的情况下修改/etc/my.cnf配置，那么启动mysqld之后创建的'root'@'localhost'账户也是使用mysql_native_password插件的。\n\n参考来源:https://www.cnblogs.com/cndavidwang/p/9357684.html\n\n------\n\nservername填`localhost`时,还会报错:\n```\nWarning: mysqli::__construct(): (HY000/2002): No such file or directory in /Users/playcrab/phpcode/PhpTest/src/MysqlConnect.php on line 11\n连接失败: No such file or directory\n```\n\n问题出现的原因：\n\n当主机填写为localhost时MySQL会采用 unix domain socket连接，当主机填写为127.0.0.1时MySQL会采用TCP/IP的方式连接。使用Unix socket的连接比TCP/IP的连接更加快速与安全。这是MySQL连接的特性，可以参考官方文档的说明4.2.2. Connecting to the MySQL Server：\n```\nOn Unix, MySQL programs treat the host name localhost specially, in a way that is \nlikely different from what you expect compared to other network-based programs. \nFor connections to localhost, MySQL programs attempt to connect to the local server \nby using a Unix socket file. This occurs even if a --port or -P option is given to \nspecify a port number. To ensure that the client makes a TCP/IP connection to the \nlocal server, use --host or -h to specify a host name value of 127.0.0.1, or the IP \naddress or name of the local server. You can also specify the connection protocol \nexplicitly, even for localhost, by using the --protocol=TCP option.\n```\n这个问题有以下几种解决方法：\n\n1.使用TCP/IP代替Unix socket。即在连接的时候将localhost换成127.0.0.1。\n\n2.修改MySQL的配置文件my.cnf，指定mysql.socket的位置：\n/var/lib/mysql/mysql.sock (你的mysql.socket路径)。\n\n3.直接在php建立连接的时候指定my.socket的位置（官方文档：mysqli_connect）。比如：\n`$db = new MySQLi('localhost', 'root', 'root', 'my_db', '3306', '/var/run/mysqld/mysqld.sock')`\n\n参考:https://segmentfault.com/q/1010000000328531\n","source":"_posts/php连mysql.md","raw":"---\ntitle: php连mysql\ncategories :\n- 技术\ntags :\n- PHP\n- Mysql\n---\n\n从官网下载mysal并配置环境变量后\n```\n ✘ playcrab@shenpeng  ~  mysql -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\n```\n此时用php连mysql\n```\n<?php\n$servername=\"127.0.0.1\";\n$username=\"root\";\n$pwd=\"12345678\";\n$conn = new mysqli($servername,$username,$pwd);\nif ($conn->connect_error){\n    die( \"连接失败: \".$conn->connect_error);\n}\necho \"连接成功\";\n?>\n```\n会报错:\n```\nWarning: mysqli::__construct(): (HY000/2054): The server requested authentication method unknown to the client in /Users/playcrab/phpcode/PhpTest/src/MysqlConnect.php on line 11\n连接失败: The server requested authentication method unknown to the client\n```\n发生这种错误，是由于MySQL8默认使用了新的密码验证插件：caching_sha2_password，而之前的PHP版本中所带的mysqlnd无法支持这种验证。\n如果不能升级PHP，可以在MySQL 8中创建（或修改）使用caching_sha2_password插件的账户，使之使用mysql_native_password，这样先前版本的PHP就可以连接使用了。\n\n在CREATE USER时，使用`IDENTIFIED WITH xxx_plugin BY 'password'`，比如：\n```\nCREATE USER 'native'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password!2#4';\n```\n使用ALTER USER修改已有账户的验证插件：\n```\nALTER USER 'native'@'localhost' IDENTIFIED WITH mysql_native_password\n```\n或\n```\nALTER USER 'native'@'localhost' IDENTIFIED WITH mysql_native_password BY 'new_password';\n```\n采用前一种方式，账户的密码将被清除；BY子句将为账户设置新的密码。\n\n/etc/my.cnf配置文件中，有一行：\n```\n# default-authentication-plugin=mysql_native_password\n```\n请删除注释符号“#”并重新启动mysqld使之生效，此后创建的账户均默认使用`mysql_native_password`。\n\n如果您完成MySQL Server的安装之后，在没有启动过mysqld服务的情况下修改/etc/my.cnf配置，那么启动mysqld之后创建的'root'@'localhost'账户也是使用mysql_native_password插件的。\n\n参考来源:https://www.cnblogs.com/cndavidwang/p/9357684.html\n\n------\n\nservername填`localhost`时,还会报错:\n```\nWarning: mysqli::__construct(): (HY000/2002): No such file or directory in /Users/playcrab/phpcode/PhpTest/src/MysqlConnect.php on line 11\n连接失败: No such file or directory\n```\n\n问题出现的原因：\n\n当主机填写为localhost时MySQL会采用 unix domain socket连接，当主机填写为127.0.0.1时MySQL会采用TCP/IP的方式连接。使用Unix socket的连接比TCP/IP的连接更加快速与安全。这是MySQL连接的特性，可以参考官方文档的说明4.2.2. Connecting to the MySQL Server：\n```\nOn Unix, MySQL programs treat the host name localhost specially, in a way that is \nlikely different from what you expect compared to other network-based programs. \nFor connections to localhost, MySQL programs attempt to connect to the local server \nby using a Unix socket file. This occurs even if a --port or -P option is given to \nspecify a port number. To ensure that the client makes a TCP/IP connection to the \nlocal server, use --host or -h to specify a host name value of 127.0.0.1, or the IP \naddress or name of the local server. You can also specify the connection protocol \nexplicitly, even for localhost, by using the --protocol=TCP option.\n```\n这个问题有以下几种解决方法：\n\n1.使用TCP/IP代替Unix socket。即在连接的时候将localhost换成127.0.0.1。\n\n2.修改MySQL的配置文件my.cnf，指定mysql.socket的位置：\n/var/lib/mysql/mysql.sock (你的mysql.socket路径)。\n\n3.直接在php建立连接的时候指定my.socket的位置（官方文档：mysqli_connect）。比如：\n`$db = new MySQLi('localhost', 'root', 'root', 'my_db', '3306', '/var/run/mysqld/mysqld.sock')`\n\n参考:https://segmentfault.com/q/1010000000328531\n","slug":"php连mysql","published":1,"date":"2019-05-21T02:36:43.923Z","updated":"2019-05-21T02:36:43.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbsr0043m74z01q58uc7","content":"<p>从官网下载mysal并配置环境变量后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ✘ playcrab@shenpeng  ~  mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br></pre></td></tr></table></figure></p>\n<p>此时用php连mysql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$servername=&quot;127.0.0.1&quot;;</span><br><span class=\"line\">$username=&quot;root&quot;;</span><br><span class=\"line\">$pwd=&quot;12345678&quot;;</span><br><span class=\"line\">$conn = new mysqli($servername,$username,$pwd);</span><br><span class=\"line\">if ($conn-&gt;connect_error)&#123;</span><br><span class=\"line\">    die( &quot;连接失败: &quot;.$conn-&gt;connect_error);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &quot;连接成功&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>会报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: mysqli::__construct(): (HY000/2054): The server requested authentication method unknown to the client in /Users/playcrab/phpcode/PhpTest/src/MysqlConnect.php on line 11</span><br><span class=\"line\">连接失败: The server requested authentication method unknown to the client</span><br></pre></td></tr></table></figure></p>\n<p>发生这种错误，是由于MySQL8默认使用了新的密码验证插件：caching_sha2_password，而之前的PHP版本中所带的mysqlnd无法支持这种验证。<br>如果不能升级PHP，可以在MySQL 8中创建（或修改）使用caching_sha2_password插件的账户，使之使用mysql_native_password，这样先前版本的PHP就可以连接使用了。</p>\n<p>在CREATE USER时，使用<code>IDENTIFIED WITH xxx_plugin BY &#39;password&#39;</code>，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &apos;native&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password!2#4&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>使用ALTER USER修改已有账户的验证插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &apos;native&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password</span><br></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &apos;native&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;new_password&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>采用前一种方式，账户的密码将被清除；BY子句将为账户设置新的密码。</p>\n<p>/etc/my.cnf配置文件中，有一行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure></p>\n<p>请删除注释符号“#”并重新启动mysqld使之生效，此后创建的账户均默认使用<code>mysql_native_password</code>。</p>\n<p>如果您完成MySQL Server的安装之后，在没有启动过mysqld服务的情况下修改/etc/my.cnf配置，那么启动mysqld之后创建的‘root‘@’localhost’账户也是使用mysql_native_password插件的。</p>\n<p>参考来源:<a href=\"https://www.cnblogs.com/cndavidwang/p/9357684.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cndavidwang/p/9357684.html</a></p>\n<hr>\n<p>servername填<code>localhost</code>时,还会报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: mysqli::__construct(): (HY000/2002): No such file or directory in /Users/playcrab/phpcode/PhpTest/src/MysqlConnect.php on line 11</span><br><span class=\"line\">连接失败: No such file or directory</span><br></pre></td></tr></table></figure></p>\n<p>问题出现的原因：</p>\n<p>当主机填写为localhost时MySQL会采用 unix domain socket连接，当主机填写为127.0.0.1时MySQL会采用TCP/IP的方式连接。使用Unix socket的连接比TCP/IP的连接更加快速与安全。这是MySQL连接的特性，可以参考官方文档的说明4.2.2. Connecting to the MySQL Server：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On Unix, MySQL programs treat the host name localhost specially, in a way that is </span><br><span class=\"line\">likely different from what you expect compared to other network-based programs. </span><br><span class=\"line\">For connections to localhost, MySQL programs attempt to connect to the local server </span><br><span class=\"line\">by using a Unix socket file. This occurs even if a --port or -P option is given to </span><br><span class=\"line\">specify a port number. To ensure that the client makes a TCP/IP connection to the </span><br><span class=\"line\">local server, use --host or -h to specify a host name value of 127.0.0.1, or the IP </span><br><span class=\"line\">address or name of the local server. You can also specify the connection protocol </span><br><span class=\"line\">explicitly, even for localhost, by using the --protocol=TCP option.</span><br></pre></td></tr></table></figure></p>\n<p>这个问题有以下几种解决方法：</p>\n<p>1.使用TCP/IP代替Unix socket。即在连接的时候将localhost换成127.0.0.1。</p>\n<p>2.修改MySQL的配置文件my.cnf，指定mysql.socket的位置：<br>/var/lib/mysql/mysql.sock (你的mysql.socket路径)。</p>\n<p>3.直接在php建立连接的时候指定my.socket的位置（官方文档：mysqli_connect）。比如：<br><code>$db = new MySQLi(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;, &#39;my_db&#39;, &#39;3306&#39;, &#39;/var/run/mysqld/mysqld.sock&#39;)</code></p>\n<p>参考:<a href=\"https://segmentfault.com/q/1010000000328531\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000000328531</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>从官网下载mysal并配置环境变量后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ✘ playcrab@shenpeng  ~  mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br></pre></td></tr></table></figure></p>\n<p>此时用php连mysql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$servername=&quot;127.0.0.1&quot;;</span><br><span class=\"line\">$username=&quot;root&quot;;</span><br><span class=\"line\">$pwd=&quot;12345678&quot;;</span><br><span class=\"line\">$conn = new mysqli($servername,$username,$pwd);</span><br><span class=\"line\">if ($conn-&gt;connect_error)&#123;</span><br><span class=\"line\">    die( &quot;连接失败: &quot;.$conn-&gt;connect_error);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &quot;连接成功&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>会报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: mysqli::__construct(): (HY000/2054): The server requested authentication method unknown to the client in /Users/playcrab/phpcode/PhpTest/src/MysqlConnect.php on line 11</span><br><span class=\"line\">连接失败: The server requested authentication method unknown to the client</span><br></pre></td></tr></table></figure></p>\n<p>发生这种错误，是由于MySQL8默认使用了新的密码验证插件：caching_sha2_password，而之前的PHP版本中所带的mysqlnd无法支持这种验证。<br>如果不能升级PHP，可以在MySQL 8中创建（或修改）使用caching_sha2_password插件的账户，使之使用mysql_native_password，这样先前版本的PHP就可以连接使用了。</p>\n<p>在CREATE USER时，使用<code>IDENTIFIED WITH xxx_plugin BY &#39;password&#39;</code>，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &apos;native&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password!2#4&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>使用ALTER USER修改已有账户的验证插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &apos;native&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password</span><br></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &apos;native&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;new_password&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>采用前一种方式，账户的密码将被清除；BY子句将为账户设置新的密码。</p>\n<p>/etc/my.cnf配置文件中，有一行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure></p>\n<p>请删除注释符号“#”并重新启动mysqld使之生效，此后创建的账户均默认使用<code>mysql_native_password</code>。</p>\n<p>如果您完成MySQL Server的安装之后，在没有启动过mysqld服务的情况下修改/etc/my.cnf配置，那么启动mysqld之后创建的‘root‘@’localhost’账户也是使用mysql_native_password插件的。</p>\n<p>参考来源:<a href=\"https://www.cnblogs.com/cndavidwang/p/9357684.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cndavidwang/p/9357684.html</a></p>\n<hr>\n<p>servername填<code>localhost</code>时,还会报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: mysqli::__construct(): (HY000/2002): No such file or directory in /Users/playcrab/phpcode/PhpTest/src/MysqlConnect.php on line 11</span><br><span class=\"line\">连接失败: No such file or directory</span><br></pre></td></tr></table></figure></p>\n<p>问题出现的原因：</p>\n<p>当主机填写为localhost时MySQL会采用 unix domain socket连接，当主机填写为127.0.0.1时MySQL会采用TCP/IP的方式连接。使用Unix socket的连接比TCP/IP的连接更加快速与安全。这是MySQL连接的特性，可以参考官方文档的说明4.2.2. Connecting to the MySQL Server：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On Unix, MySQL programs treat the host name localhost specially, in a way that is </span><br><span class=\"line\">likely different from what you expect compared to other network-based programs. </span><br><span class=\"line\">For connections to localhost, MySQL programs attempt to connect to the local server </span><br><span class=\"line\">by using a Unix socket file. This occurs even if a --port or -P option is given to </span><br><span class=\"line\">specify a port number. To ensure that the client makes a TCP/IP connection to the </span><br><span class=\"line\">local server, use --host or -h to specify a host name value of 127.0.0.1, or the IP </span><br><span class=\"line\">address or name of the local server. You can also specify the connection protocol </span><br><span class=\"line\">explicitly, even for localhost, by using the --protocol=TCP option.</span><br></pre></td></tr></table></figure></p>\n<p>这个问题有以下几种解决方法：</p>\n<p>1.使用TCP/IP代替Unix socket。即在连接的时候将localhost换成127.0.0.1。</p>\n<p>2.修改MySQL的配置文件my.cnf，指定mysql.socket的位置：<br>/var/lib/mysql/mysql.sock (你的mysql.socket路径)。</p>\n<p>3.直接在php建立连接的时候指定my.socket的位置（官方文档：mysqli_connect）。比如：<br><code>$db = new MySQLi(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;, &#39;my_db&#39;, &#39;3306&#39;, &#39;/var/run/mysqld/mysqld.sock&#39;)</code></p>\n<p>参考:<a href=\"https://segmentfault.com/q/1010000000328531\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000000328531</a></p>\n"},{"title":"php执行shell命令","_content":"\n\nPHP提供共了多个专门的执行外部命令的函数：system()，exec()，passthru()。\n 1. system()\n　　原型：string system (string command [, int return_var])\n　　system()函数很其它语言中的差不多，它执行给定的命令，输出和返回结果。第二个参数是可选的，用来得到命令执行后的状态码。\n　　例子：\n　　\n　　system(\"/usr/local/bin/webalizer/webalizer\");\n　　?> \n 2. exec()\n　　原型：string exec (string command [, string array [, int return_var]])\n　 　exec()函数与system()类似，也执行给定的命令，但不输出结果，而是返回结果的最后一行。虽然它只返回命令结果的最后一行，但用第二个参数 array可以得到完整的结果，方法是把结果逐行追加到array的结尾处。所以如果array不是空的，在调用之前最好用unset()最它清掉。只有 指定了第二个参数时，才可以用第三个参数，用来取得命令执行的状态码。\n　　例子：\n　　\n　　exec(\"/bin/ls -l\");\n　　exec(\"/bin/ls -l\",  $res);\n　  \\#$res是一个数据，每个元素代表结果的一行\n　　exec(\"/bin/ls -l\", $res, $rc);\n　　#$rc的值是命令/bin/ls -l的状态码。成功的情况下通常是0\n　　?>\n 3. passthru()\n　　原型：void passthru (string command [, int return_var])\n　 　passthru()只调用命令，不返回任何结果，但把命令的运行结果原样地直接输出到标准输出设备上。所以passthru()函数经常用来调用象 pbmplus（Unix下的一个处理图片的工具，输出二进制的原始图片的流）这样的程序。同样它也可以得到命令执行的状态码。\n　　例子：\n　　\n　　header(\"Content-type: image/gif\");\n　　passthru(\"./ppmtogif hunte.ppm\");\n　　?>\n\n.....\n\nshell_exec函数:\n```\n$cmd = \"curl -d \\\"data=%7b%22action%22%3a%22reload%22%7d\\\" http://10.2.145.23:62001/battle/admin\";\n$resp = shell_exec($cmd);\n$json = json_decode($resp);\necho $json->code;\n```\n\n`json_decode()`能够将json字符串解析为json对象\n","source":"_posts/php执行shell命令.md","raw":"---\ntitle: php执行shell命令\ncategories :\n- 技术\ntags :\n- PHP\n- linux\n---\n\n\nPHP提供共了多个专门的执行外部命令的函数：system()，exec()，passthru()。\n 1. system()\n　　原型：string system (string command [, int return_var])\n　　system()函数很其它语言中的差不多，它执行给定的命令，输出和返回结果。第二个参数是可选的，用来得到命令执行后的状态码。\n　　例子：\n　　\n　　system(\"/usr/local/bin/webalizer/webalizer\");\n　　?> \n 2. exec()\n　　原型：string exec (string command [, string array [, int return_var]])\n　 　exec()函数与system()类似，也执行给定的命令，但不输出结果，而是返回结果的最后一行。虽然它只返回命令结果的最后一行，但用第二个参数 array可以得到完整的结果，方法是把结果逐行追加到array的结尾处。所以如果array不是空的，在调用之前最好用unset()最它清掉。只有 指定了第二个参数时，才可以用第三个参数，用来取得命令执行的状态码。\n　　例子：\n　　\n　　exec(\"/bin/ls -l\");\n　　exec(\"/bin/ls -l\",  $res);\n　  \\#$res是一个数据，每个元素代表结果的一行\n　　exec(\"/bin/ls -l\", $res, $rc);\n　　#$rc的值是命令/bin/ls -l的状态码。成功的情况下通常是0\n　　?>\n 3. passthru()\n　　原型：void passthru (string command [, int return_var])\n　 　passthru()只调用命令，不返回任何结果，但把命令的运行结果原样地直接输出到标准输出设备上。所以passthru()函数经常用来调用象 pbmplus（Unix下的一个处理图片的工具，输出二进制的原始图片的流）这样的程序。同样它也可以得到命令执行的状态码。\n　　例子：\n　　\n　　header(\"Content-type: image/gif\");\n　　passthru(\"./ppmtogif hunte.ppm\");\n　　?>\n\n.....\n\nshell_exec函数:\n```\n$cmd = \"curl -d \\\"data=%7b%22action%22%3a%22reload%22%7d\\\" http://10.2.145.23:62001/battle/admin\";\n$resp = shell_exec($cmd);\n$json = json_decode($resp);\necho $json->code;\n```\n\n`json_decode()`能够将json字符串解析为json对象\n","slug":"php执行shell命令","published":1,"date":"2019-05-21T02:36:43.922Z","updated":"2019-05-21T02:36:43.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbsu0047m74zy9vqm9di","content":"<p>PHP提供共了多个专门的执行外部命令的函数：system()，exec()，passthru()。</p>\n<ol>\n<li>system()<br>　　原型：string system (string command [, int return_var])<br>　　system()函数很其它语言中的差不多，它执行给定的命令，输出和返回结果。第二个参数是可选的，用来得到命令执行后的状态码。<br>　　例子：<br>　　<br>　　system(“/usr/local/bin/webalizer/webalizer”);<br>　　?&gt; </li>\n<li>exec()<br>　　原型：string exec (string command [, string array [, int return_var]])<br>　 　exec()函数与system()类似，也执行给定的命令，但不输出结果，而是返回结果的最后一行。虽然它只返回命令结果的最后一行，但用第二个参数 array可以得到完整的结果，方法是把结果逐行追加到array的结尾处。所以如果array不是空的，在调用之前最好用unset()最它清掉。只有 指定了第二个参数时，才可以用第三个参数，用来取得命令执行的状态码。<br>　　例子：<br>　　<br>　　exec(“/bin/ls -l”);<br>　　exec(“/bin/ls -l”,  $res);<br>　  #$res是一个数据，每个元素代表结果的一行<br>　　exec(“/bin/ls -l”, $res, $rc);<br>　　#$rc的值是命令/bin/ls -l的状态码。成功的情况下通常是0<br>　　?&gt;</li>\n<li>passthru()<br>　　原型：void passthru (string command [, int return_var])<br>　 　passthru()只调用命令，不返回任何结果，但把命令的运行结果原样地直接输出到标准输出设备上。所以passthru()函数经常用来调用象 pbmplus（Unix下的一个处理图片的工具，输出二进制的原始图片的流）这样的程序。同样它也可以得到命令执行的状态码。<br>　　例子：<br>　　<br>　　header(“Content-type: image/gif”);<br>　　passthru(“./ppmtogif hunte.ppm”);<br>　　?&gt;</li>\n</ol>\n<p>…..</p>\n<p>shell_exec函数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cmd = &quot;curl -d \\&quot;data=%7b%22action%22%3a%22reload%22%7d\\&quot; http://10.2.145.23:62001/battle/admin&quot;;</span><br><span class=\"line\">$resp = shell_exec($cmd);</span><br><span class=\"line\">$json = json_decode($resp);</span><br><span class=\"line\">echo $json-&gt;code;</span><br></pre></td></tr></table></figure></p>\n<p><code>json_decode()</code>能够将json字符串解析为json对象</p>\n","site":{"data":{}},"excerpt":"","more":"<p>PHP提供共了多个专门的执行外部命令的函数：system()，exec()，passthru()。</p>\n<ol>\n<li>system()<br>　　原型：string system (string command [, int return_var])<br>　　system()函数很其它语言中的差不多，它执行给定的命令，输出和返回结果。第二个参数是可选的，用来得到命令执行后的状态码。<br>　　例子：<br>　　<br>　　system(“/usr/local/bin/webalizer/webalizer”);<br>　　?&gt; </li>\n<li>exec()<br>　　原型：string exec (string command [, string array [, int return_var]])<br>　 　exec()函数与system()类似，也执行给定的命令，但不输出结果，而是返回结果的最后一行。虽然它只返回命令结果的最后一行，但用第二个参数 array可以得到完整的结果，方法是把结果逐行追加到array的结尾处。所以如果array不是空的，在调用之前最好用unset()最它清掉。只有 指定了第二个参数时，才可以用第三个参数，用来取得命令执行的状态码。<br>　　例子：<br>　　<br>　　exec(“/bin/ls -l”);<br>　　exec(“/bin/ls -l”,  $res);<br>　  #$res是一个数据，每个元素代表结果的一行<br>　　exec(“/bin/ls -l”, $res, $rc);<br>　　#$rc的值是命令/bin/ls -l的状态码。成功的情况下通常是0<br>　　?&gt;</li>\n<li>passthru()<br>　　原型：void passthru (string command [, int return_var])<br>　 　passthru()只调用命令，不返回任何结果，但把命令的运行结果原样地直接输出到标准输出设备上。所以passthru()函数经常用来调用象 pbmplus（Unix下的一个处理图片的工具，输出二进制的原始图片的流）这样的程序。同样它也可以得到命令执行的状态码。<br>　　例子：<br>　　<br>　　header(“Content-type: image/gif”);<br>　　passthru(“./ppmtogif hunte.ppm”);<br>　　?&gt;</li>\n</ol>\n<p>…..</p>\n<p>shell_exec函数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cmd = &quot;curl -d \\&quot;data=%7b%22action%22%3a%22reload%22%7d\\&quot; http://10.2.145.23:62001/battle/admin&quot;;</span><br><span class=\"line\">$resp = shell_exec($cmd);</span><br><span class=\"line\">$json = json_decode($resp);</span><br><span class=\"line\">echo $json-&gt;code;</span><br></pre></td></tr></table></figure></p>\n<p><code>json_decode()</code>能够将json字符串解析为json对象</p>\n"},{"_content":"my new page\n\n","source":"_posts/newPage.md","raw":"my new page\n\n","slug":"newPage","published":1,"date":"2019-05-11T11:33:08.207Z","updated":"2019-05-11T11:33:08.207Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbsx0049m74zpa6po8fn","content":"<p>my new page</p>\n","site":{"data":{}},"excerpt":"","more":"<p>my new page</p>\n"},{"title":"wget apt-get等的关系","_content":"\n#### wget\nwget类似于迅雷，是一种下载工具，\n\n通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载，并可以使用HTTP代理\n\n 名字是World Wide Web”与“get”的结合。\n\n \n\n \n#### yum\nyum是redhat, centos 系统下的软件安装方式，基于Linux，\n\n         全称为 Yellow dog Updater, Modified，\n\n         是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器\n\n         基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。\n\n \n#### rpm\nrpm:  软件管理;   redhat的软件格式 rpm     r=redhat  p=package   m=management\n\n             用于安装 卸载 .rpm软件\n\n \n\n \n\n#### 串联下：\n\n   使用wget下载一个 rpm包, 然后用 rpm -ivh  xxx.rpm  安装这个软件，嫌麻烦的话，就\n\n   可以直接用  yum  install  sqoop   来自动下载和安装依赖的rpm软件。\n\n \n\n \n\nap-get是ubuntu下的一个软件安装方式，它是基于debain。\n\n\n\n\n","source":"_posts/wget apt-get等的关系.md","raw":"---\ntitle: wget apt-get等的关系\ncategories :\n- 技术\ntags :\n- linux\n---\n\n#### wget\nwget类似于迅雷，是一种下载工具，\n\n通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载，并可以使用HTTP代理\n\n 名字是World Wide Web”与“get”的结合。\n\n \n\n \n#### yum\nyum是redhat, centos 系统下的软件安装方式，基于Linux，\n\n         全称为 Yellow dog Updater, Modified，\n\n         是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器\n\n         基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。\n\n \n#### rpm\nrpm:  软件管理;   redhat的软件格式 rpm     r=redhat  p=package   m=management\n\n             用于安装 卸载 .rpm软件\n\n \n\n \n\n#### 串联下：\n\n   使用wget下载一个 rpm包, 然后用 rpm -ivh  xxx.rpm  安装这个软件，嫌麻烦的话，就\n\n   可以直接用  yum  install  sqoop   来自动下载和安装依赖的rpm软件。\n\n \n\n \n\nap-get是ubuntu下的一个软件安装方式，它是基于debain。\n\n\n\n\n","slug":"wget apt-get等的关系","published":1,"date":"2019-05-21T02:36:43.925Z","updated":"2019-05-21T02:36:43.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbt0004dm74z8taqunl9","content":"<h4 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h4><p>wget类似于迅雷，是一种下载工具，</p>\n<p>通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载，并可以使用HTTP代理</p>\n<p> 名字是World Wide Web”与“get”的结合。</p>\n<h4 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h4><p>yum是redhat, centos 系统下的软件安装方式，基于Linux，</p>\n<pre><code>全称为 Yellow dog Updater, Modified，\n\n是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器\n\n基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。\n</code></pre><h4 id=\"rpm\"><a href=\"#rpm\" class=\"headerlink\" title=\"rpm\"></a>rpm</h4><p>rpm:  软件管理;   redhat的软件格式 rpm     r=redhat  p=package   m=management</p>\n<pre><code>用于安装 卸载 .rpm软件\n</code></pre><h4 id=\"串联下：\"><a href=\"#串联下：\" class=\"headerlink\" title=\"串联下：\"></a>串联下：</h4><p>   使用wget下载一个 rpm包, 然后用 rpm -ivh  xxx.rpm  安装这个软件，嫌麻烦的话，就</p>\n<p>   可以直接用  yum  install  sqoop   来自动下载和安装依赖的rpm软件。</p>\n<p>ap-get是ubuntu下的一个软件安装方式，它是基于debain。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h4><p>wget类似于迅雷，是一种下载工具，</p>\n<p>通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载，并可以使用HTTP代理</p>\n<p> 名字是World Wide Web”与“get”的结合。</p>\n<h4 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h4><p>yum是redhat, centos 系统下的软件安装方式，基于Linux，</p>\n<pre><code>全称为 Yellow dog Updater, Modified，\n\n是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器\n\n基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。\n</code></pre><h4 id=\"rpm\"><a href=\"#rpm\" class=\"headerlink\" title=\"rpm\"></a>rpm</h4><p>rpm:  软件管理;   redhat的软件格式 rpm     r=redhat  p=package   m=management</p>\n<pre><code>用于安装 卸载 .rpm软件\n</code></pre><h4 id=\"串联下：\"><a href=\"#串联下：\" class=\"headerlink\" title=\"串联下：\"></a>串联下：</h4><p>   使用wget下载一个 rpm包, 然后用 rpm -ivh  xxx.rpm  安装这个软件，嫌麻烦的话，就</p>\n<p>   可以直接用  yum  install  sqoop   来自动下载和安装依赖的rpm软件。</p>\n<p>ap-get是ubuntu下的一个软件安装方式，它是基于debain。</p>\n"},{"title":"函数式接口","_content":"\nJava的函数式接口主要有4类:\n```\nFunction: 接收参数，并返回结果，主要方法 R apply(T t)\n\nConsumer: 接收参数，无返回结果, 主要方法为 void accept(T t)\n\nSupplier: 不接收参数，但返回结构，主要方法为 T get()\n\nPredicate: 接收参数，返回boolean值，主要方法为 boolean test(T t)\n```\n用法如下:\n```\npublic static void main(String[] args) {\n        //Function\n        Function<Integer, String> toString = (a) -> {\n            System.out.println(\"toString\");\n            return a.toString();\n        };\n        Function<String, Boolean> print = (a) -> {\n            System.out.println(a);\n            return true;\n        };\n\n        toString.andThen(print).apply(123);\n\n        Function.identity().apply(123);\n\n        //Predicate\n        Predicate<Integer> greater = (a) -> {\n            return a > 10;\n        };\n\n        Predicate<Integer> smaller = (a) -> {\n            return a > 10;\n        };\n\n        greater.and(smaller).test(123);\n\n        //Consumer\n        Consumer<Integer> consumer = (a) -> {\n            System.out.println(a);\n        };\n\n        Consumer<Integer> printDouble = (a) -> {\n            System.out.println(a + a);\n        };\n\n        consumer.andThen(printDouble).accept(1);\n\n        //Supplier\n        Supplier<Integer> one = () -> {\n            return 1;\n        };\n\n        Supplier<Integer> two = () -> {\n            return 2;\n        };\n        System.out.println(one.get());\n        System.out.println(two.get());\n\n    }\n```\n\n\n\n","source":"_posts/函数式接口.md","raw":"---\ntitle:  函数式接口\ncategories :\n- 技术\ntags :\n- Java\n---\n\nJava的函数式接口主要有4类:\n```\nFunction: 接收参数，并返回结果，主要方法 R apply(T t)\n\nConsumer: 接收参数，无返回结果, 主要方法为 void accept(T t)\n\nSupplier: 不接收参数，但返回结构，主要方法为 T get()\n\nPredicate: 接收参数，返回boolean值，主要方法为 boolean test(T t)\n```\n用法如下:\n```\npublic static void main(String[] args) {\n        //Function\n        Function<Integer, String> toString = (a) -> {\n            System.out.println(\"toString\");\n            return a.toString();\n        };\n        Function<String, Boolean> print = (a) -> {\n            System.out.println(a);\n            return true;\n        };\n\n        toString.andThen(print).apply(123);\n\n        Function.identity().apply(123);\n\n        //Predicate\n        Predicate<Integer> greater = (a) -> {\n            return a > 10;\n        };\n\n        Predicate<Integer> smaller = (a) -> {\n            return a > 10;\n        };\n\n        greater.and(smaller).test(123);\n\n        //Consumer\n        Consumer<Integer> consumer = (a) -> {\n            System.out.println(a);\n        };\n\n        Consumer<Integer> printDouble = (a) -> {\n            System.out.println(a + a);\n        };\n\n        consumer.andThen(printDouble).accept(1);\n\n        //Supplier\n        Supplier<Integer> one = () -> {\n            return 1;\n        };\n\n        Supplier<Integer> two = () -> {\n            return 2;\n        };\n        System.out.println(one.get());\n        System.out.println(two.get());\n\n    }\n```\n\n\n\n","slug":"函数式接口","published":1,"date":"2019-05-11T11:33:08.206Z","updated":"2019-05-11T11:33:08.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbt1004gm74z7gragmku","content":"<p>Java的函数式接口主要有4类:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function: 接收参数，并返回结果，主要方法 R apply(T t)</span><br><span class=\"line\"></span><br><span class=\"line\">Consumer: 接收参数，无返回结果, 主要方法为 void accept(T t)</span><br><span class=\"line\"></span><br><span class=\"line\">Supplier: 不接收参数，但返回结构，主要方法为 T get()</span><br><span class=\"line\"></span><br><span class=\"line\">Predicate: 接收参数，返回boolean值，主要方法为 boolean test(T t)</span><br></pre></td></tr></table></figure></p>\n<p>用法如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        //Function</span><br><span class=\"line\">        Function&lt;Integer, String&gt; toString = (a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(&quot;toString&quot;);</span><br><span class=\"line\">            return a.toString();</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Function&lt;String, Boolean&gt; print = (a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        toString.andThen(print).apply(123);</span><br><span class=\"line\"></span><br><span class=\"line\">        Function.identity().apply(123);</span><br><span class=\"line\"></span><br><span class=\"line\">        //Predicate</span><br><span class=\"line\">        Predicate&lt;Integer&gt; greater = (a) -&gt; &#123;</span><br><span class=\"line\">            return a &gt; 10;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Predicate&lt;Integer&gt; smaller = (a) -&gt; &#123;</span><br><span class=\"line\">            return a &gt; 10;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        greater.and(smaller).test(123);</span><br><span class=\"line\"></span><br><span class=\"line\">        //Consumer</span><br><span class=\"line\">        Consumer&lt;Integer&gt; consumer = (a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;Integer&gt; printDouble = (a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(a + a);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.andThen(printDouble).accept(1);</span><br><span class=\"line\"></span><br><span class=\"line\">        //Supplier</span><br><span class=\"line\">        Supplier&lt;Integer&gt; one = () -&gt; &#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Supplier&lt;Integer&gt; two = () -&gt; &#123;</span><br><span class=\"line\">            return 2;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(one.get());</span><br><span class=\"line\">        System.out.println(two.get());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Java的函数式接口主要有4类:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function: 接收参数，并返回结果，主要方法 R apply(T t)</span><br><span class=\"line\"></span><br><span class=\"line\">Consumer: 接收参数，无返回结果, 主要方法为 void accept(T t)</span><br><span class=\"line\"></span><br><span class=\"line\">Supplier: 不接收参数，但返回结构，主要方法为 T get()</span><br><span class=\"line\"></span><br><span class=\"line\">Predicate: 接收参数，返回boolean值，主要方法为 boolean test(T t)</span><br></pre></td></tr></table></figure></p>\n<p>用法如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        //Function</span><br><span class=\"line\">        Function&lt;Integer, String&gt; toString = (a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(&quot;toString&quot;);</span><br><span class=\"line\">            return a.toString();</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Function&lt;String, Boolean&gt; print = (a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        toString.andThen(print).apply(123);</span><br><span class=\"line\"></span><br><span class=\"line\">        Function.identity().apply(123);</span><br><span class=\"line\"></span><br><span class=\"line\">        //Predicate</span><br><span class=\"line\">        Predicate&lt;Integer&gt; greater = (a) -&gt; &#123;</span><br><span class=\"line\">            return a &gt; 10;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Predicate&lt;Integer&gt; smaller = (a) -&gt; &#123;</span><br><span class=\"line\">            return a &gt; 10;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        greater.and(smaller).test(123);</span><br><span class=\"line\"></span><br><span class=\"line\">        //Consumer</span><br><span class=\"line\">        Consumer&lt;Integer&gt; consumer = (a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;Integer&gt; printDouble = (a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(a + a);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.andThen(printDouble).accept(1);</span><br><span class=\"line\"></span><br><span class=\"line\">        //Supplier</span><br><span class=\"line\">        Supplier&lt;Integer&gt; one = () -&gt; &#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Supplier&lt;Integer&gt; two = () -&gt; &#123;</span><br><span class=\"line\">            return 2;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(one.get());</span><br><span class=\"line\">        System.out.println(two.get());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"文章标题","date":"2019-04-13T08:40:59.000Z","_content":"\nhello \n","source":"_posts/文章标题.md","raw":"---\ntitle: 文章标题\ndate: 2019-04-13 16:40:59\ntags: hexo hello\n---\n\nhello \n","slug":"文章标题","published":1,"updated":"2019-05-11T11:33:08.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbt3004km74zkjv0kzck","content":"<p>hello </p>\n","site":{"data":{}},"excerpt":"","more":"<p>hello </p>\n"},{"title":"启动apache时报错","_content":"\n```\nplaycrab@shenpeng  /etc/apache2  sudo apachectl restart\nAH00558: httpd: Could not reliably determine the server's fully qualified domain name, using shenpeng.local. Set the 'ServerName' directive globally to suppress this message\n```\n查看网上解决方案\nhttps://apple.stackexchange.com/questions/280099/apache-on-macos-sierra-ah00557-httpd-apr-sockaddr-info-get-failed-for-macbo\n\n```\nIt's because you have two different installations of Apache - the one that came with the system and the one you installed yourself.\n                                      – Allan May 26 '17 at 14:06\n```\n\n","source":"_posts/启动apache时报错.md","raw":"---\ntitle: 启动apache时报错\ncategories :\n- 技术\ntags :\n- PHP\n---\n\n```\nplaycrab@shenpeng  /etc/apache2  sudo apachectl restart\nAH00558: httpd: Could not reliably determine the server's fully qualified domain name, using shenpeng.local. Set the 'ServerName' directive globally to suppress this message\n```\n查看网上解决方案\nhttps://apple.stackexchange.com/questions/280099/apache-on-macos-sierra-ah00557-httpd-apr-sockaddr-info-get-failed-for-macbo\n\n```\nIt's because you have two different installations of Apache - the one that came with the system and the one you installed yourself.\n                                      – Allan May 26 '17 at 14:06\n```\n\n","slug":"启动apache时报错","published":1,"date":"2019-05-21T02:36:43.925Z","updated":"2019-05-21T02:36:43.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbt5004mm74zfz3705q5","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">playcrab@shenpeng  /etc/apache2  sudo apachectl restart</span><br><span class=\"line\">AH00558: httpd: Could not reliably determine the server&apos;s fully qualified domain name, using shenpeng.local. Set the &apos;ServerName&apos; directive globally to suppress this message</span><br></pre></td></tr></table></figure>\n<p>查看网上解决方案<br><a href=\"https://apple.stackexchange.com/questions/280099/apache-on-macos-sierra-ah00557-httpd-apr-sockaddr-info-get-failed-for-macbo\" target=\"_blank\" rel=\"noopener\">https://apple.stackexchange.com/questions/280099/apache-on-macos-sierra-ah00557-httpd-apr-sockaddr-info-get-failed-for-macbo</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It&apos;s because you have two different installations of Apache - the one that came with the system and the one you installed yourself.</span><br><span class=\"line\">                                      – Allan May 26 &apos;17 at 14:06</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">playcrab@shenpeng  /etc/apache2  sudo apachectl restart</span><br><span class=\"line\">AH00558: httpd: Could not reliably determine the server&apos;s fully qualified domain name, using shenpeng.local. Set the &apos;ServerName&apos; directive globally to suppress this message</span><br></pre></td></tr></table></figure>\n<p>查看网上解决方案<br><a href=\"https://apple.stackexchange.com/questions/280099/apache-on-macos-sierra-ah00557-httpd-apr-sockaddr-info-get-failed-for-macbo\" target=\"_blank\" rel=\"noopener\">https://apple.stackexchange.com/questions/280099/apache-on-macos-sierra-ah00557-httpd-apr-sockaddr-info-get-failed-for-macbo</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It&apos;s because you have two different installations of Apache - the one that came with the system and the one you installed yourself.</span><br><span class=\"line\">                                      – Allan May 26 &apos;17 at 14:06</span><br></pre></td></tr></table></figure>\n"},{"title":"最简单的搭梯子方法","_content":"  首先,去Vultr官网购买了vps服务器.$3.5每月,但实际上是按小时收费,用完后destroy服务器应该会停止计费.\n    购买成功后,可以看到服务器的地址,用户名(root),密码等信息\n    在item2中连接服务器 ssh root@10.001.001.001 即可\n    进入服务器后,运行\n    \n```\n     wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev.sh && bash shadowsocks-libev.sh\n\n```\n来安装ss.\n    然后可以看到提示,按照提示输入  1 回车 开始安装ss.\n    然后就是设置ssh密码、端口和加密方式\n    之后点击回车,等ss安装成功就可以看到ss的配置信息,在客户端中输入即可.\n````\n Shadowsocks Server Management Script\n www.banwagongzw.com & vultrcn.com\n 1.Shadowsocks Server Install\n 2.Shadowsocks Server Uninstall\n 3.Shadowsocks Server Update\n 4.Shadowsocks Server Start\n 5.Shadowsocks Server Stop\n 6.Shadowsocks Server Restart\n 7.Shadowsocks Config Status\n 8.Shadowsocks Config Modify\nNot installed\nPlease Enter the Number:1\n[Info] Start set shadowsocks's config information...\n[Info] Wherever you are not sure, just press Enter to continue.\nPlease enter shadowsocks's password\n[Default is Number1433223]:123qwe\nShadowsocks's Password: 123qwe\nPlease enter shadowsocks's port (1~65535)\n[Default is 9184]:443\nShadowsocks's Port: 443\nPlease select shadowsocks's stream cipher\n1) aes-256-gcm\n2) aes-256-ctr\n3) aes-256-cfb\n4) chacha20-ietf-poly1305\n5) chacha20-ietf\n6) chacha20\n7) rc4-md5\n[Default is aes-256-gcm]:3\nShadowsocks's Streamcipher: aes-256-cfb\nPress Enter to continue...or Press Ctrl+C to cancel\n````\n","source":"_posts/最简单的搭梯子方法.md","raw":"---\ntitle: 最简单的搭梯子方法\ncategories:\n- 技术\ntags:\n- 梯子\n- linux\n\n---\n  首先,去Vultr官网购买了vps服务器.$3.5每月,但实际上是按小时收费,用完后destroy服务器应该会停止计费.\n    购买成功后,可以看到服务器的地址,用户名(root),密码等信息\n    在item2中连接服务器 ssh root@10.001.001.001 即可\n    进入服务器后,运行\n    \n```\n     wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev.sh && bash shadowsocks-libev.sh\n\n```\n来安装ss.\n    然后可以看到提示,按照提示输入  1 回车 开始安装ss.\n    然后就是设置ssh密码、端口和加密方式\n    之后点击回车,等ss安装成功就可以看到ss的配置信息,在客户端中输入即可.\n````\n Shadowsocks Server Management Script\n www.banwagongzw.com & vultrcn.com\n 1.Shadowsocks Server Install\n 2.Shadowsocks Server Uninstall\n 3.Shadowsocks Server Update\n 4.Shadowsocks Server Start\n 5.Shadowsocks Server Stop\n 6.Shadowsocks Server Restart\n 7.Shadowsocks Config Status\n 8.Shadowsocks Config Modify\nNot installed\nPlease Enter the Number:1\n[Info] Start set shadowsocks's config information...\n[Info] Wherever you are not sure, just press Enter to continue.\nPlease enter shadowsocks's password\n[Default is Number1433223]:123qwe\nShadowsocks's Password: 123qwe\nPlease enter shadowsocks's port (1~65535)\n[Default is 9184]:443\nShadowsocks's Port: 443\nPlease select shadowsocks's stream cipher\n1) aes-256-gcm\n2) aes-256-ctr\n3) aes-256-cfb\n4) chacha20-ietf-poly1305\n5) chacha20-ietf\n6) chacha20\n7) rc4-md5\n[Default is aes-256-gcm]:3\nShadowsocks's Streamcipher: aes-256-cfb\nPress Enter to continue...or Press Ctrl+C to cancel\n````\n","slug":"最简单的搭梯子方法","published":1,"date":"2019-05-21T02:36:43.926Z","updated":"2019-05-21T02:36:43.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbt8004qm74zrl6xst26","content":"<p>  首先,去Vultr官网购买了vps服务器.$3.5每月,但实际上是按小时收费,用完后destroy服务器应该会停止计费.<br>    购买成功后,可以看到服务器的地址,用户名(root),密码等信息<br>    在item2中连接服务器 ssh <a href=\"mailto:root@10.001.001.001\" target=\"_blank\" rel=\"noopener\">root@10.001.001.001</a> 即可<br>    进入服务器后,运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev.sh &amp;&amp; bash shadowsocks-libev.sh</span><br></pre></td></tr></table></figure>\n<p>来安装ss.<br>    然后可以看到提示,按照提示输入  1 回车 开始安装ss.<br>    然后就是设置ssh密码、端口和加密方式<br>    之后点击回车,等ss安装成功就可以看到ss的配置信息,在客户端中输入即可.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Shadowsocks Server Management Script</span><br><span class=\"line\"> www.banwagongzw.com &amp; vultrcn.com</span><br><span class=\"line\"> 1.Shadowsocks Server Install</span><br><span class=\"line\"> 2.Shadowsocks Server Uninstall</span><br><span class=\"line\"> 3.Shadowsocks Server Update</span><br><span class=\"line\"> 4.Shadowsocks Server Start</span><br><span class=\"line\"> 5.Shadowsocks Server Stop</span><br><span class=\"line\"> 6.Shadowsocks Server Restart</span><br><span class=\"line\"> 7.Shadowsocks Config Status</span><br><span class=\"line\"> 8.Shadowsocks Config Modify</span><br><span class=\"line\">Not installed</span><br><span class=\"line\">Please Enter the Number:1</span><br><span class=\"line\">[Info] Start set shadowsocks&apos;s config information...</span><br><span class=\"line\">[Info] Wherever you are not sure, just press Enter to continue.</span><br><span class=\"line\">Please enter shadowsocks&apos;s password</span><br><span class=\"line\">[Default is Number1433223]:123qwe</span><br><span class=\"line\">Shadowsocks&apos;s Password: 123qwe</span><br><span class=\"line\">Please enter shadowsocks&apos;s port (1~65535)</span><br><span class=\"line\">[Default is 9184]:443</span><br><span class=\"line\">Shadowsocks&apos;s Port: 443</span><br><span class=\"line\">Please select shadowsocks&apos;s stream cipher</span><br><span class=\"line\">1) aes-256-gcm</span><br><span class=\"line\">2) aes-256-ctr</span><br><span class=\"line\">3) aes-256-cfb</span><br><span class=\"line\">4) chacha20-ietf-poly1305</span><br><span class=\"line\">5) chacha20-ietf</span><br><span class=\"line\">6) chacha20</span><br><span class=\"line\">7) rc4-md5</span><br><span class=\"line\">[Default is aes-256-gcm]:3</span><br><span class=\"line\">Shadowsocks&apos;s Streamcipher: aes-256-cfb</span><br><span class=\"line\">Press Enter to continue...or Press Ctrl+C to cancel</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>  首先,去Vultr官网购买了vps服务器.$3.5每月,但实际上是按小时收费,用完后destroy服务器应该会停止计费.<br>    购买成功后,可以看到服务器的地址,用户名(root),密码等信息<br>    在item2中连接服务器 ssh <a href=\"mailto:root@10.001.001.001\" target=\"_blank\" rel=\"noopener\">root@10.001.001.001</a> 即可<br>    进入服务器后,运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev.sh &amp;&amp; bash shadowsocks-libev.sh</span><br></pre></td></tr></table></figure>\n<p>来安装ss.<br>    然后可以看到提示,按照提示输入  1 回车 开始安装ss.<br>    然后就是设置ssh密码、端口和加密方式<br>    之后点击回车,等ss安装成功就可以看到ss的配置信息,在客户端中输入即可.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Shadowsocks Server Management Script</span><br><span class=\"line\"> www.banwagongzw.com &amp; vultrcn.com</span><br><span class=\"line\"> 1.Shadowsocks Server Install</span><br><span class=\"line\"> 2.Shadowsocks Server Uninstall</span><br><span class=\"line\"> 3.Shadowsocks Server Update</span><br><span class=\"line\"> 4.Shadowsocks Server Start</span><br><span class=\"line\"> 5.Shadowsocks Server Stop</span><br><span class=\"line\"> 6.Shadowsocks Server Restart</span><br><span class=\"line\"> 7.Shadowsocks Config Status</span><br><span class=\"line\"> 8.Shadowsocks Config Modify</span><br><span class=\"line\">Not installed</span><br><span class=\"line\">Please Enter the Number:1</span><br><span class=\"line\">[Info] Start set shadowsocks&apos;s config information...</span><br><span class=\"line\">[Info] Wherever you are not sure, just press Enter to continue.</span><br><span class=\"line\">Please enter shadowsocks&apos;s password</span><br><span class=\"line\">[Default is Number1433223]:123qwe</span><br><span class=\"line\">Shadowsocks&apos;s Password: 123qwe</span><br><span class=\"line\">Please enter shadowsocks&apos;s port (1~65535)</span><br><span class=\"line\">[Default is 9184]:443</span><br><span class=\"line\">Shadowsocks&apos;s Port: 443</span><br><span class=\"line\">Please select shadowsocks&apos;s stream cipher</span><br><span class=\"line\">1) aes-256-gcm</span><br><span class=\"line\">2) aes-256-ctr</span><br><span class=\"line\">3) aes-256-cfb</span><br><span class=\"line\">4) chacha20-ietf-poly1305</span><br><span class=\"line\">5) chacha20-ietf</span><br><span class=\"line\">6) chacha20</span><br><span class=\"line\">7) rc4-md5</span><br><span class=\"line\">[Default is aes-256-gcm]:3</span><br><span class=\"line\">Shadowsocks&apos;s Streamcipher: aes-256-cfb</span><br><span class=\"line\">Press Enter to continue...or Press Ctrl+C to cancel</span><br></pre></td></tr></table></figure></p>\n"},{"title":"梯子KCP加速","_content":"####下载\n首先是下载工具,服务器端和客户端的版本最好一样.\n客户端:https://github.com/xtaci/kcptun/releases\n服务器:\n`mkdir kcptun`\n` cd kcptun`\n\n`wget https://github.com/xtaci/kcptun/releases/download/v20170904/kcptun-linux-amd64-20170904.tar.gz`\n\n`tar zxvf kcptun-linux-amd64-20170904.tar.gz`\n\n`rm -f kcptun-linux-amd64-20170904.tar.gz`\n\n####服务端开启kcptun\n```\n[root@vultr kcptun]# ./server_linux_amd64 -l :4001 -t 127.0.0.1:8381 -key password1 --mode \"fast2\" --log 4001.log &\n[1] 10723\n[root@vultr kcptun]# tail -100f 4001.log\n```\n####客户端\n如果ss可以支持kcptun,那么不用下载别的客户端了,直接在ss上配置.\n地址端口是服务器kcptun的地址和端口,加密类型和mode别填错了.\n\n如果不支持,需要下载和服务器相同版本的kcptun客户端.\n在客户端可执行文件的同一文件夹里新建client.json\n```\n{\n\t\"localaddr\": \"127.0.0.1:4001\",\n\t\"remoteaddr\": \"45.32.125.148:4001\",\n\t\"key\": \"password1\",\n\t\"crypt\": \"aes\",\n\t\"mode\": \"fast2\",\n\t\"conn\": 1,\n\t\"mtu\": 1350,\n\t\"sndwnd\": 512,\n\t\"rcvwnd\": 512,\n\t\"nocomp\": false\n}\n```\n新建start.sh\n```\nclient_darwin_amd64 -c client.json\n```\n双击start.sh\n或者`client_windows_amd64.exe -c client.json`\n","source":"_posts/梯子KCP加速.md","raw":"---\ntitle: 梯子KCP加速\ncategories:\n- 技术\ntags:\n- 梯子\n- linux\n\n---\n####下载\n首先是下载工具,服务器端和客户端的版本最好一样.\n客户端:https://github.com/xtaci/kcptun/releases\n服务器:\n`mkdir kcptun`\n` cd kcptun`\n\n`wget https://github.com/xtaci/kcptun/releases/download/v20170904/kcptun-linux-amd64-20170904.tar.gz`\n\n`tar zxvf kcptun-linux-amd64-20170904.tar.gz`\n\n`rm -f kcptun-linux-amd64-20170904.tar.gz`\n\n####服务端开启kcptun\n```\n[root@vultr kcptun]# ./server_linux_amd64 -l :4001 -t 127.0.0.1:8381 -key password1 --mode \"fast2\" --log 4001.log &\n[1] 10723\n[root@vultr kcptun]# tail -100f 4001.log\n```\n####客户端\n如果ss可以支持kcptun,那么不用下载别的客户端了,直接在ss上配置.\n地址端口是服务器kcptun的地址和端口,加密类型和mode别填错了.\n\n如果不支持,需要下载和服务器相同版本的kcptun客户端.\n在客户端可执行文件的同一文件夹里新建client.json\n```\n{\n\t\"localaddr\": \"127.0.0.1:4001\",\n\t\"remoteaddr\": \"45.32.125.148:4001\",\n\t\"key\": \"password1\",\n\t\"crypt\": \"aes\",\n\t\"mode\": \"fast2\",\n\t\"conn\": 1,\n\t\"mtu\": 1350,\n\t\"sndwnd\": 512,\n\t\"rcvwnd\": 512,\n\t\"nocomp\": false\n}\n```\n新建start.sh\n```\nclient_darwin_amd64 -c client.json\n```\n双击start.sh\n或者`client_windows_amd64.exe -c client.json`\n","slug":"梯子KCP加速","published":1,"date":"2019-05-21T02:36:43.927Z","updated":"2019-05-21T02:36:43.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbta004tm74zat2j9zh5","content":"<p>####下载<br>首先是下载工具,服务器端和客户端的版本最好一样.<br>客户端:<a href=\"https://github.com/xtaci/kcptun/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/xtaci/kcptun/releases</a><br>服务器:<br><code>mkdir kcptun</code><br><code>cd kcptun</code></p>\n<p><code>wget https://github.com/xtaci/kcptun/releases/download/v20170904/kcptun-linux-amd64-20170904.tar.gz</code></p>\n<p><code>tar zxvf kcptun-linux-amd64-20170904.tar.gz</code></p>\n<p><code>rm -f kcptun-linux-amd64-20170904.tar.gz</code></p>\n<p>####服务端开启kcptun<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr kcptun]# ./server_linux_amd64 -l :4001 -t 127.0.0.1:8381 -key password1 --mode &quot;fast2&quot; --log 4001.log &amp;</span><br><span class=\"line\">[1] 10723</span><br><span class=\"line\">[root@vultr kcptun]# tail -100f 4001.log</span><br></pre></td></tr></table></figure></p>\n<p>####客户端<br>如果ss可以支持kcptun,那么不用下载别的客户端了,直接在ss上配置.<br>地址端口是服务器kcptun的地址和端口,加密类型和mode别填错了.</p>\n<p>如果不支持,需要下载和服务器相同版本的kcptun客户端.<br>在客户端可执行文件的同一文件夹里新建client.json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;localaddr&quot;: &quot;127.0.0.1:4001&quot;,</span><br><span class=\"line\">\t&quot;remoteaddr&quot;: &quot;45.32.125.148:4001&quot;,</span><br><span class=\"line\">\t&quot;key&quot;: &quot;password1&quot;,</span><br><span class=\"line\">\t&quot;crypt&quot;: &quot;aes&quot;,</span><br><span class=\"line\">\t&quot;mode&quot;: &quot;fast2&quot;,</span><br><span class=\"line\">\t&quot;conn&quot;: 1,</span><br><span class=\"line\">\t&quot;mtu&quot;: 1350,</span><br><span class=\"line\">\t&quot;sndwnd&quot;: 512,</span><br><span class=\"line\">\t&quot;rcvwnd&quot;: 512,</span><br><span class=\"line\">\t&quot;nocomp&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>新建start.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client_darwin_amd64 -c client.json</span><br></pre></td></tr></table></figure></p>\n<p>双击start.sh<br>或者<code>client_windows_amd64.exe -c client.json</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>####下载<br>首先是下载工具,服务器端和客户端的版本最好一样.<br>客户端:<a href=\"https://github.com/xtaci/kcptun/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/xtaci/kcptun/releases</a><br>服务器:<br><code>mkdir kcptun</code><br><code>cd kcptun</code></p>\n<p><code>wget https://github.com/xtaci/kcptun/releases/download/v20170904/kcptun-linux-amd64-20170904.tar.gz</code></p>\n<p><code>tar zxvf kcptun-linux-amd64-20170904.tar.gz</code></p>\n<p><code>rm -f kcptun-linux-amd64-20170904.tar.gz</code></p>\n<p>####服务端开启kcptun<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr kcptun]# ./server_linux_amd64 -l :4001 -t 127.0.0.1:8381 -key password1 --mode &quot;fast2&quot; --log 4001.log &amp;</span><br><span class=\"line\">[1] 10723</span><br><span class=\"line\">[root@vultr kcptun]# tail -100f 4001.log</span><br></pre></td></tr></table></figure></p>\n<p>####客户端<br>如果ss可以支持kcptun,那么不用下载别的客户端了,直接在ss上配置.<br>地址端口是服务器kcptun的地址和端口,加密类型和mode别填错了.</p>\n<p>如果不支持,需要下载和服务器相同版本的kcptun客户端.<br>在客户端可执行文件的同一文件夹里新建client.json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;localaddr&quot;: &quot;127.0.0.1:4001&quot;,</span><br><span class=\"line\">\t&quot;remoteaddr&quot;: &quot;45.32.125.148:4001&quot;,</span><br><span class=\"line\">\t&quot;key&quot;: &quot;password1&quot;,</span><br><span class=\"line\">\t&quot;crypt&quot;: &quot;aes&quot;,</span><br><span class=\"line\">\t&quot;mode&quot;: &quot;fast2&quot;,</span><br><span class=\"line\">\t&quot;conn&quot;: 1,</span><br><span class=\"line\">\t&quot;mtu&quot;: 1350,</span><br><span class=\"line\">\t&quot;sndwnd&quot;: 512,</span><br><span class=\"line\">\t&quot;rcvwnd&quot;: 512,</span><br><span class=\"line\">\t&quot;nocomp&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>新建start.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client_darwin_amd64 -c client.json</span><br></pre></td></tr></table></figure></p>\n<p>双击start.sh<br>或者<code>client_windows_amd64.exe -c client.json</code></p>\n"},{"title":"百度云不限速","_content":"\n来源:https://blog.csdn.net/Deft_MKJing/article/details/82561564\n\n\n第一步：下载所需工具：（①②步我放在同一个文件夹，可一起下载，链接失效请留言）\n\n工具地址：链接: https://pan.baidu.com/s/1raicYzM 密码: ve3n\n\n①下载Aria2GUI主程序，完成Aria2GUI的安装\n\n②下载chrome插件包，解压后随便放到一个地方(以后勿删除)\n\n第二步：配置Chrome浏览器\n\n\n\n①：打开Chrome浏览器，点击右上角三个点，然后更多工具，然后扩展程序，随后将第一步②中解压后的整个chrome文件夹拖入Chrome浏览器界面，即可完成插件的安装。\n\n第三步：下载你网盘里想下载的内容\n\n①：打开第一步①中安装好的Aria2GUI\n\n②：找到你要下载的东西，分享（无密码分享），然后会获得一个分享链接，复制这个链接，新建浏览器窗口打开，浏览器会提示”初始化完成“，界面中会多了一个”导出下载“选项，鼠标移动到这个选项上，点击ARIA2 RPC选项（请看注意部分）。\n\n注意：（如果提示请先勾选需要下载的文件，勾选后导出下载按钮不见了的话；刷新浏览器，在页面尚未加载完时勾选文件或者文件夹，浏览器加载完以后，文件还会是勾选状态，而导出下载按钮不会消失，此时问题解决，可进行下一步)\n\n③：随后返回第一步①中安装好的Aria2GUI，点击refresh，可发现任务已经在下载，速度取决于你的网速。\n\n\n\n家里网速慢，最高就这么多了。。。。。。反正是可以操作的 \n\n大神的杰作，留着学习一段时间，仅此而已\n\n \n\n对了，很多时候资源磁力失效无法下载，看看这个，也是神作http://www.lbldy.com/xzxz，有教程怎么操作\n\n\n\n\n","source":"_posts/百度云不限速.md","raw":"---\ntitle: 百度云不限速\ncategories :\n- 技术\ntags :\n- tricks\n---\n\n来源:https://blog.csdn.net/Deft_MKJing/article/details/82561564\n\n\n第一步：下载所需工具：（①②步我放在同一个文件夹，可一起下载，链接失效请留言）\n\n工具地址：链接: https://pan.baidu.com/s/1raicYzM 密码: ve3n\n\n①下载Aria2GUI主程序，完成Aria2GUI的安装\n\n②下载chrome插件包，解压后随便放到一个地方(以后勿删除)\n\n第二步：配置Chrome浏览器\n\n\n\n①：打开Chrome浏览器，点击右上角三个点，然后更多工具，然后扩展程序，随后将第一步②中解压后的整个chrome文件夹拖入Chrome浏览器界面，即可完成插件的安装。\n\n第三步：下载你网盘里想下载的内容\n\n①：打开第一步①中安装好的Aria2GUI\n\n②：找到你要下载的东西，分享（无密码分享），然后会获得一个分享链接，复制这个链接，新建浏览器窗口打开，浏览器会提示”初始化完成“，界面中会多了一个”导出下载“选项，鼠标移动到这个选项上，点击ARIA2 RPC选项（请看注意部分）。\n\n注意：（如果提示请先勾选需要下载的文件，勾选后导出下载按钮不见了的话；刷新浏览器，在页面尚未加载完时勾选文件或者文件夹，浏览器加载完以后，文件还会是勾选状态，而导出下载按钮不会消失，此时问题解决，可进行下一步)\n\n③：随后返回第一步①中安装好的Aria2GUI，点击refresh，可发现任务已经在下载，速度取决于你的网速。\n\n\n\n家里网速慢，最高就这么多了。。。。。。反正是可以操作的 \n\n大神的杰作，留着学习一段时间，仅此而已\n\n \n\n对了，很多时候资源磁力失效无法下载，看看这个，也是神作http://www.lbldy.com/xzxz，有教程怎么操作\n\n\n\n\n","slug":"百度云不限速","published":1,"date":"2019-05-21T02:36:43.930Z","updated":"2019-05-21T02:36:43.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbtd004vm74zz8ovnwml","content":"<p>来源:<a href=\"https://blog.csdn.net/Deft_MKJing/article/details/82561564\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Deft_MKJing/article/details/82561564</a></p>\n<p>第一步：下载所需工具：（①②步我放在同一个文件夹，可一起下载，链接失效请留言）</p>\n<p>工具地址：链接: <a href=\"https://pan.baidu.com/s/1raicYzM\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1raicYzM</a> 密码: ve3n</p>\n<p>①下载Aria2GUI主程序，完成Aria2GUI的安装</p>\n<p>②下载chrome插件包，解压后随便放到一个地方(以后勿删除)</p>\n<p>第二步：配置Chrome浏览器</p>\n<p>①：打开Chrome浏览器，点击右上角三个点，然后更多工具，然后扩展程序，随后将第一步②中解压后的整个chrome文件夹拖入Chrome浏览器界面，即可完成插件的安装。</p>\n<p>第三步：下载你网盘里想下载的内容</p>\n<p>①：打开第一步①中安装好的Aria2GUI</p>\n<p>②：找到你要下载的东西，分享（无密码分享），然后会获得一个分享链接，复制这个链接，新建浏览器窗口打开，浏览器会提示”初始化完成“，界面中会多了一个”导出下载“选项，鼠标移动到这个选项上，点击ARIA2 RPC选项（请看注意部分）。</p>\n<p>注意：（如果提示请先勾选需要下载的文件，勾选后导出下载按钮不见了的话；刷新浏览器，在页面尚未加载完时勾选文件或者文件夹，浏览器加载完以后，文件还会是勾选状态，而导出下载按钮不会消失，此时问题解决，可进行下一步)</p>\n<p>③：随后返回第一步①中安装好的Aria2GUI，点击refresh，可发现任务已经在下载，速度取决于你的网速。</p>\n<p>家里网速慢，最高就这么多了。。。。。。反正是可以操作的 </p>\n<p>大神的杰作，留着学习一段时间，仅此而已</p>\n<p>对了，很多时候资源磁力失效无法下载，看看这个，也是神作<a href=\"http://www.lbldy.com/xzxz，有教程怎么操作\" target=\"_blank\" rel=\"noopener\">http://www.lbldy.com/xzxz，有教程怎么操作</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>来源:<a href=\"https://blog.csdn.net/Deft_MKJing/article/details/82561564\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Deft_MKJing/article/details/82561564</a></p>\n<p>第一步：下载所需工具：（①②步我放在同一个文件夹，可一起下载，链接失效请留言）</p>\n<p>工具地址：链接: <a href=\"https://pan.baidu.com/s/1raicYzM\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1raicYzM</a> 密码: ve3n</p>\n<p>①下载Aria2GUI主程序，完成Aria2GUI的安装</p>\n<p>②下载chrome插件包，解压后随便放到一个地方(以后勿删除)</p>\n<p>第二步：配置Chrome浏览器</p>\n<p>①：打开Chrome浏览器，点击右上角三个点，然后更多工具，然后扩展程序，随后将第一步②中解压后的整个chrome文件夹拖入Chrome浏览器界面，即可完成插件的安装。</p>\n<p>第三步：下载你网盘里想下载的内容</p>\n<p>①：打开第一步①中安装好的Aria2GUI</p>\n<p>②：找到你要下载的东西，分享（无密码分享），然后会获得一个分享链接，复制这个链接，新建浏览器窗口打开，浏览器会提示”初始化完成“，界面中会多了一个”导出下载“选项，鼠标移动到这个选项上，点击ARIA2 RPC选项（请看注意部分）。</p>\n<p>注意：（如果提示请先勾选需要下载的文件，勾选后导出下载按钮不见了的话；刷新浏览器，在页面尚未加载完时勾选文件或者文件夹，浏览器加载完以后，文件还会是勾选状态，而导出下载按钮不会消失，此时问题解决，可进行下一步)</p>\n<p>③：随后返回第一步①中安装好的Aria2GUI，点击refresh，可发现任务已经在下载，速度取决于你的网速。</p>\n<p>家里网速慢，最高就这么多了。。。。。。反正是可以操作的 </p>\n<p>大神的杰作，留着学习一段时间，仅此而已</p>\n<p>对了，很多时候资源磁力失效无法下载，看看这个，也是神作<a href=\"http://www.lbldy.com/xzxz，有教程怎么操作\" target=\"_blank\" rel=\"noopener\">http://www.lbldy.com/xzxz，有教程怎么操作</a></p>\n"},{"title":"梯子开启bbr","_content":"\n##### 什么是BBR?：\n\nTCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。\n\nGoogle提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。\n\nTCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。\n\nBBR解决了两个问题：\n\n在有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。\n\n降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。\nGoogle 在 2016年9月份开源了他们的优化网络拥堵算法BBR，最新版本的 Linux内核(4.9-rc8)中已经集成了该算法。\n\n对于TCP单边加速，并非所有人都很熟悉，不过有另外一个大名鼎鼎的商业软件“锐速”，相信很多人都清楚。特别是对于使用国外服务器或者VPS的人来说，效果更佳。\n\nBBR项目地址：\n\nhttps://github.com/google/bbr\n\n------------\n\n升级内核，第一步首先是升级内核到支持BBR的版本：\n#### 1.yum更新系统版本：\n\nyum update\n\n#### 2.查看系统版本：\n\n[root@server ~]# cat /etc/redhat-release \nCentOS Linux release 7.4.1708 (Core) \n[root@server ~]# \n#### 3.安装elrepo并升级内核：\n\n[root@server ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n[root@server ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n[root@server ~]# yum --enablerepo=elrepo-kernel install kernel-ml -y\n#### 4.更新grub文件并重启系统：\n\n[root@server ~]# egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \\'\nCentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)\nCentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)\nCentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)\nCentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)\nCentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)\n[root@server ~]# grub2-set-default 0\n[root@server ~]# reboot\n#### 5.重启完成后查看内核是否已更换为4.14版本：\n\n[root@server ~]# uname -r\n4.14.14-1.el7.elrepo.x86_64\n[root@server ~]#\n#### 6.开启bbr：\n\n[root@server ~]# vim /etc/sysctl.conf    # 在文件末尾添加如下内容\nnet.core.default_qdisc = fq\nnet.ipv4.tcp_congestion_control = bbr\n#### 7.加载系统参数：\n\n[root@vultr ~]# sysctl -p\nnet.ipv6.conf.all.accept_ra = 2\nnet.ipv6.conf.eth0.accept_ra = 2\nnet.core.default_qdisc = fq\nnet.ipv4.tcp_congestion_control = bbr\n[root@vultr ~]#\n如上，输出了我们添加的那两行配置代表正常。\n\n#### 8.确定bbr已经成功开启：\n\n[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_control\nnet.ipv4.tcp_available_congestion_control = bbr cubic reno\n[root@vultr ~]# lsmod | grep bbr\ntcp_bbr                20480  2 \n[root@vultr ~]# \n输出内容如上，则表示bbr已经成功开启。\n\n\n\n","source":"_posts/梯子开启bbr.md","raw":"---\ntitle: 梯子开启bbr\ncategories:\n- 技术\ntags:\n- 梯子\n- linux\n\n---\n\n##### 什么是BBR?：\n\nTCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。\n\nGoogle提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。\n\nTCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。\n\nBBR解决了两个问题：\n\n在有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。\n\n降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。\nGoogle 在 2016年9月份开源了他们的优化网络拥堵算法BBR，最新版本的 Linux内核(4.9-rc8)中已经集成了该算法。\n\n对于TCP单边加速，并非所有人都很熟悉，不过有另外一个大名鼎鼎的商业软件“锐速”，相信很多人都清楚。特别是对于使用国外服务器或者VPS的人来说，效果更佳。\n\nBBR项目地址：\n\nhttps://github.com/google/bbr\n\n------------\n\n升级内核，第一步首先是升级内核到支持BBR的版本：\n#### 1.yum更新系统版本：\n\nyum update\n\n#### 2.查看系统版本：\n\n[root@server ~]# cat /etc/redhat-release \nCentOS Linux release 7.4.1708 (Core) \n[root@server ~]# \n#### 3.安装elrepo并升级内核：\n\n[root@server ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n[root@server ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n[root@server ~]# yum --enablerepo=elrepo-kernel install kernel-ml -y\n#### 4.更新grub文件并重启系统：\n\n[root@server ~]# egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \\'\nCentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)\nCentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)\nCentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)\nCentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)\nCentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)\n[root@server ~]# grub2-set-default 0\n[root@server ~]# reboot\n#### 5.重启完成后查看内核是否已更换为4.14版本：\n\n[root@server ~]# uname -r\n4.14.14-1.el7.elrepo.x86_64\n[root@server ~]#\n#### 6.开启bbr：\n\n[root@server ~]# vim /etc/sysctl.conf    # 在文件末尾添加如下内容\nnet.core.default_qdisc = fq\nnet.ipv4.tcp_congestion_control = bbr\n#### 7.加载系统参数：\n\n[root@vultr ~]# sysctl -p\nnet.ipv6.conf.all.accept_ra = 2\nnet.ipv6.conf.eth0.accept_ra = 2\nnet.core.default_qdisc = fq\nnet.ipv4.tcp_congestion_control = bbr\n[root@vultr ~]#\n如上，输出了我们添加的那两行配置代表正常。\n\n#### 8.确定bbr已经成功开启：\n\n[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_control\nnet.ipv4.tcp_available_congestion_control = bbr cubic reno\n[root@vultr ~]# lsmod | grep bbr\ntcp_bbr                20480  2 \n[root@vultr ~]# \n输出内容如上，则表示bbr已经成功开启。\n\n\n\n","slug":"梯子开启bbr","published":1,"date":"2019-05-21T02:36:43.929Z","updated":"2019-05-21T02:36:43.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbtg004zm74z9l2cuwla","content":"<h5 id=\"什么是BBR-：\"><a href=\"#什么是BBR-：\" class=\"headerlink\" title=\"什么是BBR?：\"></a>什么是BBR?：</h5><p>TCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。</p>\n<p>Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。</p>\n<p>TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p>\n<p>BBR解决了两个问题：</p>\n<p>在有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</p>\n<p>降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。<br>Google 在 2016年9月份开源了他们的优化网络拥堵算法BBR，最新版本的 Linux内核(4.9-rc8)中已经集成了该算法。</p>\n<p>对于TCP单边加速，并非所有人都很熟悉，不过有另外一个大名鼎鼎的商业软件“锐速”，相信很多人都清楚。特别是对于使用国外服务器或者VPS的人来说，效果更佳。</p>\n<p>BBR项目地址：</p>\n<p><a href=\"https://github.com/google/bbr\" target=\"_blank\" rel=\"noopener\">https://github.com/google/bbr</a></p>\n<hr>\n<p>升级内核，第一步首先是升级内核到支持BBR的版本：</p>\n<h4 id=\"1-yum更新系统版本：\"><a href=\"#1-yum更新系统版本：\" class=\"headerlink\" title=\"1.yum更新系统版本：\"></a>1.yum更新系统版本：</h4><p>yum update</p>\n<h4 id=\"2-查看系统版本：\"><a href=\"#2-查看系统版本：\" class=\"headerlink\" title=\"2.查看系统版本：\"></a>2.查看系统版本：</h4><p>[root@server ~]# cat /etc/redhat-release<br>CentOS Linux release 7.4.1708 (Core)<br>[root@server ~]# </p>\n<h4 id=\"3-安装elrepo并升级内核：\"><a href=\"#3-安装elrepo并升级内核：\" class=\"headerlink\" title=\"3.安装elrepo并升级内核：\"></a>3.安装elrepo并升级内核：</h4><p>[root@server ~]# rpm –import <a href=\"https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\" target=\"_blank\" rel=\"noopener\">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</a><br>[root@server ~]# rpm -Uvh <a href=\"http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\" target=\"_blank\" rel=\"noopener\">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</a><br>[root@server ~]# yum –enablerepo=elrepo-kernel install kernel-ml -y</p>\n<h4 id=\"4-更新grub文件并重启系统：\"><a href=\"#4-更新grub文件并重启系统：\" class=\"headerlink\" title=\"4.更新grub文件并重启系统：\"></a>4.更新grub文件并重启系统：</h4><p>[root@server ~]# egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \\’<br>CentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)<br>CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)<br>CentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)<br>CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)<br>CentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)<br>[root@server ~]# grub2-set-default 0<br>[root@server ~]# reboot</p>\n<h4 id=\"5-重启完成后查看内核是否已更换为4-14版本：\"><a href=\"#5-重启完成后查看内核是否已更换为4-14版本：\" class=\"headerlink\" title=\"5.重启完成后查看内核是否已更换为4.14版本：\"></a>5.重启完成后查看内核是否已更换为4.14版本：</h4><p>[root@server ~]# uname -r<br>4.14.14-1.el7.elrepo.x86_64<br>[root@server ~]#</p>\n<h4 id=\"6-开启bbr：\"><a href=\"#6-开启bbr：\" class=\"headerlink\" title=\"6.开启bbr：\"></a>6.开启bbr：</h4><p>[root@server ~]# vim /etc/sysctl.conf    # 在文件末尾添加如下内容<br>net.core.default_qdisc = fq<br>net.ipv4.tcp_congestion_control = bbr</p>\n<h4 id=\"7-加载系统参数：\"><a href=\"#7-加载系统参数：\" class=\"headerlink\" title=\"7.加载系统参数：\"></a>7.加载系统参数：</h4><p>[root@vultr ~]# sysctl -p<br>net.ipv6.conf.all.accept_ra = 2<br>net.ipv6.conf.eth0.accept_ra = 2<br>net.core.default_qdisc = fq<br>net.ipv4.tcp_congestion_control = bbr<br>[root@vultr ~]#<br>如上，输出了我们添加的那两行配置代表正常。</p>\n<h4 id=\"8-确定bbr已经成功开启：\"><a href=\"#8-确定bbr已经成功开启：\" class=\"headerlink\" title=\"8.确定bbr已经成功开启：\"></a>8.确定bbr已经成功开启：</h4><p>[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_control<br>net.ipv4.tcp_available_congestion_control = bbr cubic reno<br>[root@vultr ~]# lsmod | grep bbr<br>tcp_bbr                20480  2<br>[root@vultr ~]#<br>输出内容如上，则表示bbr已经成功开启。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"什么是BBR-：\"><a href=\"#什么是BBR-：\" class=\"headerlink\" title=\"什么是BBR?：\"></a>什么是BBR?：</h5><p>TCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。</p>\n<p>Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。</p>\n<p>TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p>\n<p>BBR解决了两个问题：</p>\n<p>在有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</p>\n<p>降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。<br>Google 在 2016年9月份开源了他们的优化网络拥堵算法BBR，最新版本的 Linux内核(4.9-rc8)中已经集成了该算法。</p>\n<p>对于TCP单边加速，并非所有人都很熟悉，不过有另外一个大名鼎鼎的商业软件“锐速”，相信很多人都清楚。特别是对于使用国外服务器或者VPS的人来说，效果更佳。</p>\n<p>BBR项目地址：</p>\n<p><a href=\"https://github.com/google/bbr\" target=\"_blank\" rel=\"noopener\">https://github.com/google/bbr</a></p>\n<hr>\n<p>升级内核，第一步首先是升级内核到支持BBR的版本：</p>\n<h4 id=\"1-yum更新系统版本：\"><a href=\"#1-yum更新系统版本：\" class=\"headerlink\" title=\"1.yum更新系统版本：\"></a>1.yum更新系统版本：</h4><p>yum update</p>\n<h4 id=\"2-查看系统版本：\"><a href=\"#2-查看系统版本：\" class=\"headerlink\" title=\"2.查看系统版本：\"></a>2.查看系统版本：</h4><p>[root@server ~]# cat /etc/redhat-release<br>CentOS Linux release 7.4.1708 (Core)<br>[root@server ~]# </p>\n<h4 id=\"3-安装elrepo并升级内核：\"><a href=\"#3-安装elrepo并升级内核：\" class=\"headerlink\" title=\"3.安装elrepo并升级内核：\"></a>3.安装elrepo并升级内核：</h4><p>[root@server ~]# rpm –import <a href=\"https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\" target=\"_blank\" rel=\"noopener\">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</a><br>[root@server ~]# rpm -Uvh <a href=\"http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\" target=\"_blank\" rel=\"noopener\">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</a><br>[root@server ~]# yum –enablerepo=elrepo-kernel install kernel-ml -y</p>\n<h4 id=\"4-更新grub文件并重启系统：\"><a href=\"#4-更新grub文件并重启系统：\" class=\"headerlink\" title=\"4.更新grub文件并重启系统：\"></a>4.更新grub文件并重启系统：</h4><p>[root@server ~]# egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \\’<br>CentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)<br>CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)<br>CentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)<br>CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)<br>CentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)<br>[root@server ~]# grub2-set-default 0<br>[root@server ~]# reboot</p>\n<h4 id=\"5-重启完成后查看内核是否已更换为4-14版本：\"><a href=\"#5-重启完成后查看内核是否已更换为4-14版本：\" class=\"headerlink\" title=\"5.重启完成后查看内核是否已更换为4.14版本：\"></a>5.重启完成后查看内核是否已更换为4.14版本：</h4><p>[root@server ~]# uname -r<br>4.14.14-1.el7.elrepo.x86_64<br>[root@server ~]#</p>\n<h4 id=\"6-开启bbr：\"><a href=\"#6-开启bbr：\" class=\"headerlink\" title=\"6.开启bbr：\"></a>6.开启bbr：</h4><p>[root@server ~]# vim /etc/sysctl.conf    # 在文件末尾添加如下内容<br>net.core.default_qdisc = fq<br>net.ipv4.tcp_congestion_control = bbr</p>\n<h4 id=\"7-加载系统参数：\"><a href=\"#7-加载系统参数：\" class=\"headerlink\" title=\"7.加载系统参数：\"></a>7.加载系统参数：</h4><p>[root@vultr ~]# sysctl -p<br>net.ipv6.conf.all.accept_ra = 2<br>net.ipv6.conf.eth0.accept_ra = 2<br>net.core.default_qdisc = fq<br>net.ipv4.tcp_congestion_control = bbr<br>[root@vultr ~]#<br>如上，输出了我们添加的那两行配置代表正常。</p>\n<h4 id=\"8-确定bbr已经成功开启：\"><a href=\"#8-确定bbr已经成功开启：\" class=\"headerlink\" title=\"8.确定bbr已经成功开启：\"></a>8.确定bbr已经成功开启：</h4><p>[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_control<br>net.ipv4.tcp_available_congestion_control = bbr cubic reno<br>[root@vultr ~]# lsmod | grep bbr<br>tcp_bbr                20480  2<br>[root@vultr ~]#<br>输出内容如上，则表示bbr已经成功开启。</p>\n"},{"title":"看梯子的日志","_content":"\n直接用复制粘贴的命令安装后可以成功启动并连接,但有时候看不了日志,得关了后重新启动才能看\n```root@vultr:~# ps aux|grep shadowsocks\nnobody   23931  0.0  1.1  13908  5548 ?        Ss   10:07   0:00 /usr/local/bin/ss-server -v -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks-libev.pid\nroot     24075  0.0  0.1   9164   896 pts/0    S+   10:21   0:00 grep --color=auto shadowsocks\nroot@vultr:~# systemctl stop shadowsocks\nroot@vultr:~# ps aux|grep shadowsocks\nroot     24102  0.0  0.1   9164   896 pts/0    S+   10:22   0:00 grep --color=auto shadowsocks\nroot@vultr:~# systemctl start shadowsocks\nroot@vultr:~# journalctl -u shadowsocks.service -f\n-- Logs begin at Fri 2018-11-02 10:00:24 UTC. --\nNov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: found address name v4 address m.youtube.com\nNov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: found address name v6 address m.youtube.com\nNov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: successfully resolved m.youtube.com\nNov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: remote connected\n```\n\n\n","source":"_posts/看梯子的日志.md","raw":"---\ntitle: 看梯子的日志\ncategories:\n- 技术\ntags:\n- 梯子\n- linux\n---\n\n直接用复制粘贴的命令安装后可以成功启动并连接,但有时候看不了日志,得关了后重新启动才能看\n```root@vultr:~# ps aux|grep shadowsocks\nnobody   23931  0.0  1.1  13908  5548 ?        Ss   10:07   0:00 /usr/local/bin/ss-server -v -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks-libev.pid\nroot     24075  0.0  0.1   9164   896 pts/0    S+   10:21   0:00 grep --color=auto shadowsocks\nroot@vultr:~# systemctl stop shadowsocks\nroot@vultr:~# ps aux|grep shadowsocks\nroot     24102  0.0  0.1   9164   896 pts/0    S+   10:22   0:00 grep --color=auto shadowsocks\nroot@vultr:~# systemctl start shadowsocks\nroot@vultr:~# journalctl -u shadowsocks.service -f\n-- Logs begin at Fri 2018-11-02 10:00:24 UTC. --\nNov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: found address name v4 address m.youtube.com\nNov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: found address name v6 address m.youtube.com\nNov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: successfully resolved m.youtube.com\nNov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: remote connected\n```\n\n\n","slug":"看梯子的日志","published":1,"date":"2019-05-21T02:36:43.931Z","updated":"2019-05-21T02:36:43.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbtj0052m74z1vs3mu4j","content":"<p>直接用复制粘贴的命令安装后可以成功启动并连接,但有时候看不了日志,得关了后重新启动才能看<br><figure class=\"highlight plain\"><figcaption><span>ps aux|grep shadowsocks</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nobody   23931  0.0  1.1  13908  5548 ?        Ss   10:07   0:00 /usr/local/bin/ss-server -v -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks-libev.pid</span><br><span class=\"line\">root     24075  0.0  0.1   9164   896 pts/0    S+   10:21   0:00 grep --color=auto shadowsocks</span><br><span class=\"line\">root@vultr:~# systemctl stop shadowsocks</span><br><span class=\"line\">root@vultr:~# ps aux|grep shadowsocks</span><br><span class=\"line\">root     24102  0.0  0.1   9164   896 pts/0    S+   10:22   0:00 grep --color=auto shadowsocks</span><br><span class=\"line\">root@vultr:~# systemctl start shadowsocks</span><br><span class=\"line\">root@vultr:~# journalctl -u shadowsocks.service -f</span><br><span class=\"line\">-- Logs begin at Fri 2018-11-02 10:00:24 UTC. --</span><br><span class=\"line\">Nov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: found address name v4 address m.youtube.com</span><br><span class=\"line\">Nov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: found address name v6 address m.youtube.com</span><br><span class=\"line\">Nov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: successfully resolved m.youtube.com</span><br><span class=\"line\">Nov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: remote connected</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>直接用复制粘贴的命令安装后可以成功启动并连接,但有时候看不了日志,得关了后重新启动才能看<br><figure class=\"highlight plain\"><figcaption><span>ps aux|grep shadowsocks</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nobody   23931  0.0  1.1  13908  5548 ?        Ss   10:07   0:00 /usr/local/bin/ss-server -v -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks-libev.pid</span><br><span class=\"line\">root     24075  0.0  0.1   9164   896 pts/0    S+   10:21   0:00 grep --color=auto shadowsocks</span><br><span class=\"line\">root@vultr:~# systemctl stop shadowsocks</span><br><span class=\"line\">root@vultr:~# ps aux|grep shadowsocks</span><br><span class=\"line\">root     24102  0.0  0.1   9164   896 pts/0    S+   10:22   0:00 grep --color=auto shadowsocks</span><br><span class=\"line\">root@vultr:~# systemctl start shadowsocks</span><br><span class=\"line\">root@vultr:~# journalctl -u shadowsocks.service -f</span><br><span class=\"line\">-- Logs begin at Fri 2018-11-02 10:00:24 UTC. --</span><br><span class=\"line\">Nov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: found address name v4 address m.youtube.com</span><br><span class=\"line\">Nov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: found address name v6 address m.youtube.com</span><br><span class=\"line\">Nov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: successfully resolved m.youtube.com</span><br><span class=\"line\">Nov 02 10:22:19 vultr.guest /usr/local/bin/ss-server[24117]: remote connected</span><br></pre></td></tr></table></figure></p>\n"},{"title":"线程池","_content":"\n---\n\n## 线程池的创建\n\n创建线程池时最好用`ThreadPoolExecutor`创建,其构造方法:\n```\n  public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             Executors.defaultThreadFactory(), defaultHandler);\n    }\n```\n常见的四种线程池也都是基于`ThreadPoolExecutor`创建的.\n\n### 1.CachedThreadPool\n```\npublic static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>(),\n                                      threadFactory);\n    }\n```\ncorePoolSize为0，maximumPoolSize为Integer.MAX_VALUE可以视为无穷大，workQueue是一个SynchronousQueue。SynchronousQueue可以认为是一个长度限制为0的队列，也就是向这个队列添加任务会永远是已满的状态。\n\n由此可以得出通过该方法创建的线程池并不限制线程数量，每次添加的任务都会直接执行而不会放入workQueue，它的主要提供的功能是线程复用，但不能控制线程数量。\n\n### 2.FixedThreadPool\n\n```\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>());\n    }\n```\n创建一个大小固定为n的线程池\n\n---\n### 3.SingleThreadExecutor()\n```\npublic static ExecutorService newSingleThreadExecutor() {\n        return new FinalizableDelegatedExecutorService\n            (new ThreadPoolExecutor(1, 1,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>()));\n    }\n```\nworkQueue是一个LinkedBlockingQueue<Runnabke>(),也就是认为队列的大小是Integer.MAX_VALUE,因此,可以提交多个任务,但是只能一个一个执行.\n\n---\n### 4.ScheduledThreadPool\n```\n    public static ScheduledExecutorService  newScheduledThreadPool(int corePoolSize) {\n        return new ScheduledThreadPoolExecutor(corePoolSize);\n    }\n    \n    public ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue());\n    }\n```\n![此处输入图片的描述][1]\nDelayedWorkQueue是一个基于堆的数据结构，类似于DelayQueue和PriorityQueue。在执行定时任务的时候，每个任务的执行时间都不同，所以DelayedWorkQueue的工作就是按照执行时间的升序来排列，执行时间距离当前时间越近的任务在队列的前面（注意：这里的顺序并不是绝对的，堆中的排序只保证了子节点的下次执行时间要比父节点的下次执行时间要大，而叶子节点之间并不一定是顺序的)\n\n参考:JDK1.8\nhttps://www.jianshu.com/p/925dba9f5969\nhttps://www.jianshu.com/p/ade771d2c9c0\n\n---\n## 异常处理\n线程池异常处理,虽然可以通过UncaughtExceptionHandler来实现默认的异常处理机制,但是,对于submit方法:\n```\npublic Future<?> submit(Runnable task) {\n    if (task == null) throw new NullPointerException();\n    RunnableFuture<Void> ftask = newTaskFor(task, null);\n    execute(ftask);\n    return ftask;\n}\n```\nsubmit方法在调用execute之前,任务会通过`RunnableFuture<Void> ftask = newTaskFor(task, null);`封装,导致UncaughtExceptionHandler失效.\n所以,还是得在线程里try..cache.\n\n  [1]: https://upload-images.jianshu.io/upload_images/5401975-5b6acf02fe03ce68.png\n","source":"_posts/线程池.md","raw":"---\ntitle: 线程池\ncategories:\n- 技术\ntags:\n- ThreadPool\n- Java\n\n---\n\n---\n\n## 线程池的创建\n\n创建线程池时最好用`ThreadPoolExecutor`创建,其构造方法:\n```\n  public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             Executors.defaultThreadFactory(), defaultHandler);\n    }\n```\n常见的四种线程池也都是基于`ThreadPoolExecutor`创建的.\n\n### 1.CachedThreadPool\n```\npublic static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>(),\n                                      threadFactory);\n    }\n```\ncorePoolSize为0，maximumPoolSize为Integer.MAX_VALUE可以视为无穷大，workQueue是一个SynchronousQueue。SynchronousQueue可以认为是一个长度限制为0的队列，也就是向这个队列添加任务会永远是已满的状态。\n\n由此可以得出通过该方法创建的线程池并不限制线程数量，每次添加的任务都会直接执行而不会放入workQueue，它的主要提供的功能是线程复用，但不能控制线程数量。\n\n### 2.FixedThreadPool\n\n```\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>());\n    }\n```\n创建一个大小固定为n的线程池\n\n---\n### 3.SingleThreadExecutor()\n```\npublic static ExecutorService newSingleThreadExecutor() {\n        return new FinalizableDelegatedExecutorService\n            (new ThreadPoolExecutor(1, 1,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>()));\n    }\n```\nworkQueue是一个LinkedBlockingQueue<Runnabke>(),也就是认为队列的大小是Integer.MAX_VALUE,因此,可以提交多个任务,但是只能一个一个执行.\n\n---\n### 4.ScheduledThreadPool\n```\n    public static ScheduledExecutorService  newScheduledThreadPool(int corePoolSize) {\n        return new ScheduledThreadPoolExecutor(corePoolSize);\n    }\n    \n    public ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue());\n    }\n```\n![此处输入图片的描述][1]\nDelayedWorkQueue是一个基于堆的数据结构，类似于DelayQueue和PriorityQueue。在执行定时任务的时候，每个任务的执行时间都不同，所以DelayedWorkQueue的工作就是按照执行时间的升序来排列，执行时间距离当前时间越近的任务在队列的前面（注意：这里的顺序并不是绝对的，堆中的排序只保证了子节点的下次执行时间要比父节点的下次执行时间要大，而叶子节点之间并不一定是顺序的)\n\n参考:JDK1.8\nhttps://www.jianshu.com/p/925dba9f5969\nhttps://www.jianshu.com/p/ade771d2c9c0\n\n---\n## 异常处理\n线程池异常处理,虽然可以通过UncaughtExceptionHandler来实现默认的异常处理机制,但是,对于submit方法:\n```\npublic Future<?> submit(Runnable task) {\n    if (task == null) throw new NullPointerException();\n    RunnableFuture<Void> ftask = newTaskFor(task, null);\n    execute(ftask);\n    return ftask;\n}\n```\nsubmit方法在调用execute之前,任务会通过`RunnableFuture<Void> ftask = newTaskFor(task, null);`封装,导致UncaughtExceptionHandler失效.\n所以,还是得在线程里try..cache.\n\n  [1]: https://upload-images.jianshu.io/upload_images/5401975-5b6acf02fe03ce68.png\n","slug":"线程池","published":1,"date":"2019-05-11T11:33:08.205Z","updated":"2019-05-11T11:33:08.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbtn0056m74zty047kqm","content":"<hr>\n<h2 id=\"线程池的创建\"><a href=\"#线程池的创建\" class=\"headerlink\" title=\"线程池的创建\"></a>线程池的创建</h2><p>创建线程池时最好用<code>ThreadPoolExecutor</code>创建,其构造方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public ThreadPoolExecutor(int corePoolSize,</span><br><span class=\"line\">                            int maximumPoolSize,</span><br><span class=\"line\">                            long keepAliveTime,</span><br><span class=\"line\">                            TimeUnit unit,</span><br><span class=\"line\">                            BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span><br><span class=\"line\">      this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\">           Executors.defaultThreadFactory(), defaultHandler);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>常见的四种线程池也都是基于<code>ThreadPoolExecutor</code>创建的.</p>\n<h3 id=\"1-CachedThreadPool\"><a href=\"#1-CachedThreadPool\" class=\"headerlink\" title=\"1.CachedThreadPool\"></a>1.CachedThreadPool</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) &#123;</span><br><span class=\"line\">        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br><span class=\"line\">                                      60L, TimeUnit.SECONDS,</span><br><span class=\"line\">                                      new SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                      threadFactory);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>corePoolSize为0，maximumPoolSize为Integer.MAX_VALUE可以视为无穷大，workQueue是一个SynchronousQueue。SynchronousQueue可以认为是一个长度限制为0的队列，也就是向这个队列添加任务会永远是已满的状态。</p>\n<p>由此可以得出通过该方法创建的线程池并不限制线程数量，每次添加的任务都会直接执行而不会放入workQueue，它的主要提供的功能是线程复用，但不能控制线程数量。</p>\n<h3 id=\"2-FixedThreadPool\"><a href=\"#2-FixedThreadPool\" class=\"headerlink\" title=\"2.FixedThreadPool\"></a>2.FixedThreadPool</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span><br><span class=\"line\">        return new ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                      0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                      new LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个大小固定为n的线程池</p>\n<hr>\n<h3 id=\"3-SingleThreadExecutor\"><a href=\"#3-SingleThreadExecutor\" class=\"headerlink\" title=\"3.SingleThreadExecutor()\"></a>3.SingleThreadExecutor()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static ExecutorService newSingleThreadExecutor() &#123;</span><br><span class=\"line\">        return new FinalizableDelegatedExecutorService</span><br><span class=\"line\">            (new ThreadPoolExecutor(1, 1,</span><br><span class=\"line\">                                    0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                    new LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>workQueue是一个LinkedBlockingQueue<runnabke>(),也就是认为队列的大小是Integer.MAX_VALUE,因此,可以提交多个任务,但是只能一个一个执行.</runnabke></p>\n<hr>\n<h3 id=\"4-ScheduledThreadPool\"><a href=\"#4-ScheduledThreadPool\" class=\"headerlink\" title=\"4.ScheduledThreadPool\"></a>4.ScheduledThreadPool</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static ScheduledExecutorService  newScheduledThreadPool(int corePoolSize) &#123;</span><br><span class=\"line\">    return new ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public ScheduledThreadPoolExecutor(int corePoolSize) &#123;</span><br><span class=\"line\">    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,</span><br><span class=\"line\">          new DelayedWorkQueue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5401975-5b6acf02fe03ce68.png\" alt=\"此处输入图片的描述\"><br>DelayedWorkQueue是一个基于堆的数据结构，类似于DelayQueue和PriorityQueue。在执行定时任务的时候，每个任务的执行时间都不同，所以DelayedWorkQueue的工作就是按照执行时间的升序来排列，执行时间距离当前时间越近的任务在队列的前面（注意：这里的顺序并不是绝对的，堆中的排序只保证了子节点的下次执行时间要比父节点的下次执行时间要大，而叶子节点之间并不一定是顺序的)</p>\n<p>参考:JDK1.8<br><a href=\"https://www.jianshu.com/p/925dba9f5969\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/925dba9f5969</a><br><a href=\"https://www.jianshu.com/p/ade771d2c9c0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ade771d2c9c0</a></p>\n<hr>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>线程池异常处理,虽然可以通过UncaughtExceptionHandler来实现默认的异常处理机制,但是,对于submit方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class=\"line\">    if (task == null) throw new NullPointerException();</span><br><span class=\"line\">    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, null);</span><br><span class=\"line\">    execute(ftask);</span><br><span class=\"line\">    return ftask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>submit方法在调用execute之前,任务会通过<code>RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, null);</code>封装,导致UncaughtExceptionHandler失效.<br>所以,还是得在线程里try..cache.</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"线程池的创建\"><a href=\"#线程池的创建\" class=\"headerlink\" title=\"线程池的创建\"></a>线程池的创建</h2><p>创建线程池时最好用<code>ThreadPoolExecutor</code>创建,其构造方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public ThreadPoolExecutor(int corePoolSize,</span><br><span class=\"line\">                            int maximumPoolSize,</span><br><span class=\"line\">                            long keepAliveTime,</span><br><span class=\"line\">                            TimeUnit unit,</span><br><span class=\"line\">                            BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span><br><span class=\"line\">      this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\">           Executors.defaultThreadFactory(), defaultHandler);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>常见的四种线程池也都是基于<code>ThreadPoolExecutor</code>创建的.</p>\n<h3 id=\"1-CachedThreadPool\"><a href=\"#1-CachedThreadPool\" class=\"headerlink\" title=\"1.CachedThreadPool\"></a>1.CachedThreadPool</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) &#123;</span><br><span class=\"line\">        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br><span class=\"line\">                                      60L, TimeUnit.SECONDS,</span><br><span class=\"line\">                                      new SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                      threadFactory);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>corePoolSize为0，maximumPoolSize为Integer.MAX_VALUE可以视为无穷大，workQueue是一个SynchronousQueue。SynchronousQueue可以认为是一个长度限制为0的队列，也就是向这个队列添加任务会永远是已满的状态。</p>\n<p>由此可以得出通过该方法创建的线程池并不限制线程数量，每次添加的任务都会直接执行而不会放入workQueue，它的主要提供的功能是线程复用，但不能控制线程数量。</p>\n<h3 id=\"2-FixedThreadPool\"><a href=\"#2-FixedThreadPool\" class=\"headerlink\" title=\"2.FixedThreadPool\"></a>2.FixedThreadPool</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span><br><span class=\"line\">        return new ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                      0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                      new LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个大小固定为n的线程池</p>\n<hr>\n<h3 id=\"3-SingleThreadExecutor\"><a href=\"#3-SingleThreadExecutor\" class=\"headerlink\" title=\"3.SingleThreadExecutor()\"></a>3.SingleThreadExecutor()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static ExecutorService newSingleThreadExecutor() &#123;</span><br><span class=\"line\">        return new FinalizableDelegatedExecutorService</span><br><span class=\"line\">            (new ThreadPoolExecutor(1, 1,</span><br><span class=\"line\">                                    0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                    new LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>workQueue是一个LinkedBlockingQueue<runnabke>(),也就是认为队列的大小是Integer.MAX_VALUE,因此,可以提交多个任务,但是只能一个一个执行.</runnabke></p>\n<hr>\n<h3 id=\"4-ScheduledThreadPool\"><a href=\"#4-ScheduledThreadPool\" class=\"headerlink\" title=\"4.ScheduledThreadPool\"></a>4.ScheduledThreadPool</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static ScheduledExecutorService  newScheduledThreadPool(int corePoolSize) &#123;</span><br><span class=\"line\">    return new ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public ScheduledThreadPoolExecutor(int corePoolSize) &#123;</span><br><span class=\"line\">    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,</span><br><span class=\"line\">          new DelayedWorkQueue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5401975-5b6acf02fe03ce68.png\" alt=\"此处输入图片的描述\"><br>DelayedWorkQueue是一个基于堆的数据结构，类似于DelayQueue和PriorityQueue。在执行定时任务的时候，每个任务的执行时间都不同，所以DelayedWorkQueue的工作就是按照执行时间的升序来排列，执行时间距离当前时间越近的任务在队列的前面（注意：这里的顺序并不是绝对的，堆中的排序只保证了子节点的下次执行时间要比父节点的下次执行时间要大，而叶子节点之间并不一定是顺序的)</p>\n<p>参考:JDK1.8<br><a href=\"https://www.jianshu.com/p/925dba9f5969\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/925dba9f5969</a><br><a href=\"https://www.jianshu.com/p/ade771d2c9c0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ade771d2c9c0</a></p>\n<hr>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>线程池异常处理,虽然可以通过UncaughtExceptionHandler来实现默认的异常处理机制,但是,对于submit方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class=\"line\">    if (task == null) throw new NullPointerException();</span><br><span class=\"line\">    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, null);</span><br><span class=\"line\">    execute(ftask);</span><br><span class=\"line\">    return ftask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>submit方法在调用execute之前,任务会通过<code>RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, null);</code>封装,导致UncaughtExceptionHandler失效.<br>所以,还是得在线程里try..cache.</p>\n"},{"title":"翻墙过程中遇到的问题","_content":"\n在destroy服务器后,又购买了同一个ip的服务器,使用相同的\nssh root@45.77.42.213\n命令后,提示挺吓人的\n```\n ✘ playcrab@shenpeng  ~  ssh root@45.77.42.213\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the ECDSA key sent by the remote host is\nSHA256:zeSvrx3IMQvopctfr0VxMzxKIm0//Vh6/bCm0xNv5+4.\nPlease contact your system administrator.\nAdd correct host key in /Users/playcrab/.ssh/known_hosts to get rid of this message.\nOffending ECDSA key in /Users/playcrab/.ssh/known_hosts:12\nECDSA host key for 45.77.42.213 has changed and you have requested strict checking.\nHost key verification failed.\n```\n根据https://www.cnblogs.com/huiy/p/6230913.html的解释,远程服务器重装系统了,需要清除当前机器里关于远程服务器的缓存和公钥信息.\n使用命令 \n```\n ✘ playcrab@shenpeng  ~  ssh -keygen -R 45.77.42.213\nBad escape character 'ygen'.\n ✘ playcrab@shenpeng  ~  ssh -key gen -R 45.77.42.213\nBad remote forwarding specification '45.77.42.213'\n ✘ playcrab@shenpeng  ~  ssh -key gen -R \"45.77.42.213\"\nBad remote forwarding specification '45.77.42.213'\n ✘ playcrab@shenpeng  ~  ssh-keygen -R \"45.77.42.213\"\n# Host 45.77.42.213 found: line 12\n/Users/playcrab/.ssh/known_hosts updated.\nOriginal contents retained as /Users/playcrab/.ssh/known_hosts.old\n```\n之后,再重新登录即可\n````\n playcrab@shenpeng  ~  ssh root@45.77.42.213\nThe authenticity of host '45.77.42.213 (45.77.42.213)' can't be established.\nECDSA key fingerprint is SHA256:zeSvrx3IMQvopctfr0VxMzxKIm0//Vh6/bCm0xNv5+4.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '45.77.42.213' (ECDSA) to the list of known hosts.\nroot@45.77.42.213's password:\n````\n","source":"_posts/翻墙过程中遇到的问题.md","raw":"---\ntitle: 翻墙过程中遇到的问题\ncategories:\n- 技术\ntags:\n- 梯子\n- linux\n\n---\n\n在destroy服务器后,又购买了同一个ip的服务器,使用相同的\nssh root@45.77.42.213\n命令后,提示挺吓人的\n```\n ✘ playcrab@shenpeng  ~  ssh root@45.77.42.213\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the ECDSA key sent by the remote host is\nSHA256:zeSvrx3IMQvopctfr0VxMzxKIm0//Vh6/bCm0xNv5+4.\nPlease contact your system administrator.\nAdd correct host key in /Users/playcrab/.ssh/known_hosts to get rid of this message.\nOffending ECDSA key in /Users/playcrab/.ssh/known_hosts:12\nECDSA host key for 45.77.42.213 has changed and you have requested strict checking.\nHost key verification failed.\n```\n根据https://www.cnblogs.com/huiy/p/6230913.html的解释,远程服务器重装系统了,需要清除当前机器里关于远程服务器的缓存和公钥信息.\n使用命令 \n```\n ✘ playcrab@shenpeng  ~  ssh -keygen -R 45.77.42.213\nBad escape character 'ygen'.\n ✘ playcrab@shenpeng  ~  ssh -key gen -R 45.77.42.213\nBad remote forwarding specification '45.77.42.213'\n ✘ playcrab@shenpeng  ~  ssh -key gen -R \"45.77.42.213\"\nBad remote forwarding specification '45.77.42.213'\n ✘ playcrab@shenpeng  ~  ssh-keygen -R \"45.77.42.213\"\n# Host 45.77.42.213 found: line 12\n/Users/playcrab/.ssh/known_hosts updated.\nOriginal contents retained as /Users/playcrab/.ssh/known_hosts.old\n```\n之后,再重新登录即可\n````\n playcrab@shenpeng  ~  ssh root@45.77.42.213\nThe authenticity of host '45.77.42.213 (45.77.42.213)' can't be established.\nECDSA key fingerprint is SHA256:zeSvrx3IMQvopctfr0VxMzxKIm0//Vh6/bCm0xNv5+4.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '45.77.42.213' (ECDSA) to the list of known hosts.\nroot@45.77.42.213's password:\n````\n","slug":"翻墙过程中遇到的问题","published":1,"date":"2019-05-21T02:36:43.933Z","updated":"2019-05-21T02:36:43.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbto0059m74zau994mbb","content":"<p>在destroy服务器后,又购买了同一个ip的服务器,使用相同的<br>ssh <a href=\"mailto:root@45.77.42.213\" target=\"_blank\" rel=\"noopener\">root@45.77.42.213</a><br>命令后,提示挺吓人的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ✘ playcrab@shenpeng  ~  ssh root@45.77.42.213</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class=\"line\">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class=\"line\">It is also possible that a host key has just been changed.</span><br><span class=\"line\">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class=\"line\">SHA256:zeSvrx3IMQvopctfr0VxMzxKIm0//Vh6/bCm0xNv5+4.</span><br><span class=\"line\">Please contact your system administrator.</span><br><span class=\"line\">Add correct host key in /Users/playcrab/.ssh/known_hosts to get rid of this message.</span><br><span class=\"line\">Offending ECDSA key in /Users/playcrab/.ssh/known_hosts:12</span><br><span class=\"line\">ECDSA host key for 45.77.42.213 has changed and you have requested strict checking.</span><br><span class=\"line\">Host key verification failed.</span><br></pre></td></tr></table></figure></p>\n<p>根据<a href=\"https://www.cnblogs.com/huiy/p/6230913.html的解释,远程服务器重装系统了,需要清除当前机器里关于远程服务器的缓存和公钥信息\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/huiy/p/6230913.html的解释,远程服务器重装系统了,需要清除当前机器里关于远程服务器的缓存和公钥信息</a>.<br>使用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ✘ playcrab@shenpeng  ~  ssh -keygen -R 45.77.42.213</span><br><span class=\"line\">Bad escape character &apos;ygen&apos;.</span><br><span class=\"line\"> ✘ playcrab@shenpeng  ~  ssh -key gen -R 45.77.42.213</span><br><span class=\"line\">Bad remote forwarding specification &apos;45.77.42.213&apos;</span><br><span class=\"line\"> ✘ playcrab@shenpeng  ~  ssh -key gen -R &quot;45.77.42.213&quot;</span><br><span class=\"line\">Bad remote forwarding specification &apos;45.77.42.213&apos;</span><br><span class=\"line\"> ✘ playcrab@shenpeng  ~  ssh-keygen -R &quot;45.77.42.213&quot;</span><br><span class=\"line\"># Host 45.77.42.213 found: line 12</span><br><span class=\"line\">/Users/playcrab/.ssh/known_hosts updated.</span><br><span class=\"line\">Original contents retained as /Users/playcrab/.ssh/known_hosts.old</span><br></pre></td></tr></table></figure></p>\n<p>之后,再重新登录即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> playcrab@shenpeng  ~  ssh root@45.77.42.213</span><br><span class=\"line\">The authenticity of host &apos;45.77.42.213 (45.77.42.213)&apos; can&apos;t be established.</span><br><span class=\"line\">ECDSA key fingerprint is SHA256:zeSvrx3IMQvopctfr0VxMzxKIm0//Vh6/bCm0xNv5+4.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class=\"line\">Warning: Permanently added &apos;45.77.42.213&apos; (ECDSA) to the list of known hosts.</span><br><span class=\"line\">root@45.77.42.213&apos;s password:</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在destroy服务器后,又购买了同一个ip的服务器,使用相同的<br>ssh <a href=\"mailto:root@45.77.42.213\" target=\"_blank\" rel=\"noopener\">root@45.77.42.213</a><br>命令后,提示挺吓人的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ✘ playcrab@shenpeng  ~  ssh root@45.77.42.213</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class=\"line\">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class=\"line\">It is also possible that a host key has just been changed.</span><br><span class=\"line\">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class=\"line\">SHA256:zeSvrx3IMQvopctfr0VxMzxKIm0//Vh6/bCm0xNv5+4.</span><br><span class=\"line\">Please contact your system administrator.</span><br><span class=\"line\">Add correct host key in /Users/playcrab/.ssh/known_hosts to get rid of this message.</span><br><span class=\"line\">Offending ECDSA key in /Users/playcrab/.ssh/known_hosts:12</span><br><span class=\"line\">ECDSA host key for 45.77.42.213 has changed and you have requested strict checking.</span><br><span class=\"line\">Host key verification failed.</span><br></pre></td></tr></table></figure></p>\n<p>根据<a href=\"https://www.cnblogs.com/huiy/p/6230913.html的解释,远程服务器重装系统了,需要清除当前机器里关于远程服务器的缓存和公钥信息\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/huiy/p/6230913.html的解释,远程服务器重装系统了,需要清除当前机器里关于远程服务器的缓存和公钥信息</a>.<br>使用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ✘ playcrab@shenpeng  ~  ssh -keygen -R 45.77.42.213</span><br><span class=\"line\">Bad escape character &apos;ygen&apos;.</span><br><span class=\"line\"> ✘ playcrab@shenpeng  ~  ssh -key gen -R 45.77.42.213</span><br><span class=\"line\">Bad remote forwarding specification &apos;45.77.42.213&apos;</span><br><span class=\"line\"> ✘ playcrab@shenpeng  ~  ssh -key gen -R &quot;45.77.42.213&quot;</span><br><span class=\"line\">Bad remote forwarding specification &apos;45.77.42.213&apos;</span><br><span class=\"line\"> ✘ playcrab@shenpeng  ~  ssh-keygen -R &quot;45.77.42.213&quot;</span><br><span class=\"line\"># Host 45.77.42.213 found: line 12</span><br><span class=\"line\">/Users/playcrab/.ssh/known_hosts updated.</span><br><span class=\"line\">Original contents retained as /Users/playcrab/.ssh/known_hosts.old</span><br></pre></td></tr></table></figure></p>\n<p>之后,再重新登录即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> playcrab@shenpeng  ~  ssh root@45.77.42.213</span><br><span class=\"line\">The authenticity of host &apos;45.77.42.213 (45.77.42.213)&apos; can&apos;t be established.</span><br><span class=\"line\">ECDSA key fingerprint is SHA256:zeSvrx3IMQvopctfr0VxMzxKIm0//Vh6/bCm0xNv5+4.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class=\"line\">Warning: Permanently added &apos;45.77.42.213&apos; (ECDSA) to the list of known hosts.</span><br><span class=\"line\">root@45.77.42.213&apos;s password:</span><br></pre></td></tr></table></figure></p>\n"},{"title":"线程池2","_content":"\n\n### 1.创建线程池\n```\n /**\n         * cachedThreadPool\n         */\n        ExecutorService cachedThreadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60,\n                TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n                new NamedThreadFactory(\"CachedThread\"), new ThreadPoolExecutor.AbortPolicy());\n                \n        int cpuNum = Runtime.getRuntime().availableProcessors();\n\n        /**\n         * fixedThreadPool\n         */\n        ExecutorService fixedThreadPool = new ThreadPoolExecutor(cpuNum + 1, cpuNum + 1, 0,\n                TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(),\n                new NamedThreadFactory(\"FixedThread\"), new ThreadPoolExecutor.AbortPolicy());\n\n        /**\n         * singleThreadPool\n         */\n        ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.NANOSECONDS,\n                new LinkedBlockingQueue<>(), new NamedThreadFactory(\"SingleThread\"),\n                new ThreadPoolExecutor.AbortPolicy());\n\n        /**\n         * scheduledThreadPool\n         */\n        ExecutorService scheduledThreadPool = new ThreadPoolExecutor(cpuNum + 1, Integer.MAX_VALUE,\n                0, TimeUnit.NANOSECONDS, new DelayQueue(),\n                new NamedThreadFactory(\"ScheduledThread\"), new ThreadPoolExecutor.AbortPolicy());\n\n        ScheduledThreadPoolExecutor scheduledExecutorService = new ScheduledThreadPoolExecutor(2,\n                new NamedThreadFactory(\"schedule\"), new ThreadPoolExecutor.AbortPolicy());\n```\n#### 注意\n`ExecutorService scheduledThreadPool`这种方式创建的线程池时没有`scheduledThreadPool`和`singleThreadPool`方法的.\n\n####scheduleAtFixedRate和scheduleWithFixedDelay区别\n```\n /**\n         * scheduleAtFixedRate 从上一次任务开始执行时 根据period计算下次开始执行时间\n         */\n         scheduledExecutorService.scheduleAtFixedRate(task, 3, 4, TimeUnit.SECONDS);\n        /**\n         * scheduleWithFixedDelay 从上一次任务结束的时候 根据delay计算下次任务开始的执行时间\n         */\n        scheduledExecutorService.scheduleWithFixedDelay(task, 3, 4, TimeUnit.SECONDS);\n```\n#### 异常处理\n```\nstatic class Task implements Runnable {\n\n        @Override\n        public void run() {\n            Thread.currentThread()\n                    .setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n\n                        @Override\n                        public void uncaughtException(Thread t, Throwable e) {\n                            System.out.println(\"exception\");\n                        }\n                    });\n\n            System.out.println(\"---\");\n            System.out.println(1 / 0);\n            System.out.println(Thread.currentThread().getName());\n\n        }\n    }\n```\n在创建线程任务时,最好在线程逻辑里就将异常捕获并处理.\n`在多线程环境中，线程抛出的异常是不能用try….catch捕获的，这样就有可能导致一些问题的出现，比如异常的时候无法回收一些系统资源，或者没有关闭当前的连接等等。`\n```\n try {\n            //singleThreadPool.submit(task);\n            task.run();\n        } catch (Exception e) {\n            System.out.println(11);\n        }\n\n    }\n\n    static class Task implements Runnable {\n\n        @Override\n        public void run() {\n            \n\n            System.out.println(\"---\");\n            System.out.println(1 / 0);\n            System.out.println(Thread.currentThread().getName());\n\n        }\n    }\n```\n这种方式还是会造成线程因为异常而终止.\n#####submit 和 execute \n```\nsingleThreadPool.submit(task);\ntry {\n            singleThreadPool.submit(task);\n\n        } catch (Exception e) {\n            System.out.println(11);\n        }\n```\nsubmit无法捕获异常\n而execute方法可以捕获异常\n\n","source":"_posts/线程池2.md","raw":"---\ntitle: 线程池2\ncategories :\n- 技术\ntags :\n- Java\n- ThreadPool\n---\n\n\n### 1.创建线程池\n```\n /**\n         * cachedThreadPool\n         */\n        ExecutorService cachedThreadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60,\n                TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n                new NamedThreadFactory(\"CachedThread\"), new ThreadPoolExecutor.AbortPolicy());\n                \n        int cpuNum = Runtime.getRuntime().availableProcessors();\n\n        /**\n         * fixedThreadPool\n         */\n        ExecutorService fixedThreadPool = new ThreadPoolExecutor(cpuNum + 1, cpuNum + 1, 0,\n                TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(),\n                new NamedThreadFactory(\"FixedThread\"), new ThreadPoolExecutor.AbortPolicy());\n\n        /**\n         * singleThreadPool\n         */\n        ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.NANOSECONDS,\n                new LinkedBlockingQueue<>(), new NamedThreadFactory(\"SingleThread\"),\n                new ThreadPoolExecutor.AbortPolicy());\n\n        /**\n         * scheduledThreadPool\n         */\n        ExecutorService scheduledThreadPool = new ThreadPoolExecutor(cpuNum + 1, Integer.MAX_VALUE,\n                0, TimeUnit.NANOSECONDS, new DelayQueue(),\n                new NamedThreadFactory(\"ScheduledThread\"), new ThreadPoolExecutor.AbortPolicy());\n\n        ScheduledThreadPoolExecutor scheduledExecutorService = new ScheduledThreadPoolExecutor(2,\n                new NamedThreadFactory(\"schedule\"), new ThreadPoolExecutor.AbortPolicy());\n```\n#### 注意\n`ExecutorService scheduledThreadPool`这种方式创建的线程池时没有`scheduledThreadPool`和`singleThreadPool`方法的.\n\n####scheduleAtFixedRate和scheduleWithFixedDelay区别\n```\n /**\n         * scheduleAtFixedRate 从上一次任务开始执行时 根据period计算下次开始执行时间\n         */\n         scheduledExecutorService.scheduleAtFixedRate(task, 3, 4, TimeUnit.SECONDS);\n        /**\n         * scheduleWithFixedDelay 从上一次任务结束的时候 根据delay计算下次任务开始的执行时间\n         */\n        scheduledExecutorService.scheduleWithFixedDelay(task, 3, 4, TimeUnit.SECONDS);\n```\n#### 异常处理\n```\nstatic class Task implements Runnable {\n\n        @Override\n        public void run() {\n            Thread.currentThread()\n                    .setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n\n                        @Override\n                        public void uncaughtException(Thread t, Throwable e) {\n                            System.out.println(\"exception\");\n                        }\n                    });\n\n            System.out.println(\"---\");\n            System.out.println(1 / 0);\n            System.out.println(Thread.currentThread().getName());\n\n        }\n    }\n```\n在创建线程任务时,最好在线程逻辑里就将异常捕获并处理.\n`在多线程环境中，线程抛出的异常是不能用try….catch捕获的，这样就有可能导致一些问题的出现，比如异常的时候无法回收一些系统资源，或者没有关闭当前的连接等等。`\n```\n try {\n            //singleThreadPool.submit(task);\n            task.run();\n        } catch (Exception e) {\n            System.out.println(11);\n        }\n\n    }\n\n    static class Task implements Runnable {\n\n        @Override\n        public void run() {\n            \n\n            System.out.println(\"---\");\n            System.out.println(1 / 0);\n            System.out.println(Thread.currentThread().getName());\n\n        }\n    }\n```\n这种方式还是会造成线程因为异常而终止.\n#####submit 和 execute \n```\nsingleThreadPool.submit(task);\ntry {\n            singleThreadPool.submit(task);\n\n        } catch (Exception e) {\n            System.out.println(11);\n        }\n```\nsubmit无法捕获异常\n而execute方法可以捕获异常\n\n","slug":"线程池2","published":1,"date":"2019-05-21T02:36:43.932Z","updated":"2019-05-21T02:36:43.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbtq005dm74z2og2ktte","content":"<h3 id=\"1-创建线程池\"><a href=\"#1-创建线程池\" class=\"headerlink\" title=\"1.创建线程池\"></a>1.创建线程池</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">        * cachedThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService cachedThreadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60,</span><br><span class=\"line\">               TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;CachedThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\">               </span><br><span class=\"line\">       int cpuNum = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * fixedThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService fixedThreadPool = new ThreadPoolExecutor(cpuNum + 1, cpuNum + 1, 0,</span><br><span class=\"line\">               TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;FixedThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * singleThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.NANOSECONDS,</span><br><span class=\"line\">               new LinkedBlockingQueue&lt;&gt;(), new NamedThreadFactory(&quot;SingleThread&quot;),</span><br><span class=\"line\">               new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * scheduledThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService scheduledThreadPool = new ThreadPoolExecutor(cpuNum + 1, Integer.MAX_VALUE,</span><br><span class=\"line\">               0, TimeUnit.NANOSECONDS, new DelayQueue(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;ScheduledThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       ScheduledThreadPoolExecutor scheduledExecutorService = new ScheduledThreadPoolExecutor(2,</span><br><span class=\"line\">               new NamedThreadFactory(&quot;schedule&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p><code>ExecutorService scheduledThreadPool</code>这种方式创建的线程池时没有<code>scheduledThreadPool</code>和<code>singleThreadPool</code>方法的.</p>\n<p>####scheduleAtFixedRate和scheduleWithFixedDelay区别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">        * scheduleAtFixedRate 从上一次任务开始执行时 根据period计算下次开始执行时间</span><br><span class=\"line\">        */</span><br><span class=\"line\">        scheduledExecutorService.scheduleAtFixedRate(task, 3, 4, TimeUnit.SECONDS);</span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * scheduleWithFixedDelay 从上一次任务结束的时候 根据delay计算下次任务开始的执行时间</span><br><span class=\"line\">        */</span><br><span class=\"line\">       scheduledExecutorService.scheduleWithFixedDelay(task, 3, 4, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Task implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            Thread.currentThread()</span><br><span class=\"line\">                    .setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        public void uncaughtException(Thread t, Throwable e) &#123;</span><br><span class=\"line\">                            System.out.println(&quot;exception&quot;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(&quot;---&quot;);</span><br><span class=\"line\">            System.out.println(1 / 0);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在创建线程任务时,最好在线程逻辑里就将异常捕获并处理.<br><code>在多线程环境中，线程抛出的异常是不能用try….catch捕获的，这样就有可能导致一些问题的出现，比如异常的时候无法回收一些系统资源，或者没有关闭当前的连接等等。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">           //singleThreadPool.submit(task);</span><br><span class=\"line\">           task.run();</span><br><span class=\"line\">       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">           System.out.println(11);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   static class Task implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public void run() &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">           System.out.println(&quot;---&quot;);</span><br><span class=\"line\">           System.out.println(1 / 0);</span><br><span class=\"line\">           System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式还是会造成线程因为异常而终止.</p>\n<p>#####submit 和 execute<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singleThreadPool.submit(task);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">            singleThreadPool.submit(task);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(11);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>submit无法捕获异常<br>而execute方法可以捕获异常</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-创建线程池\"><a href=\"#1-创建线程池\" class=\"headerlink\" title=\"1.创建线程池\"></a>1.创建线程池</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">        * cachedThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService cachedThreadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60,</span><br><span class=\"line\">               TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;CachedThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\">               </span><br><span class=\"line\">       int cpuNum = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * fixedThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService fixedThreadPool = new ThreadPoolExecutor(cpuNum + 1, cpuNum + 1, 0,</span><br><span class=\"line\">               TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;FixedThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * singleThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.NANOSECONDS,</span><br><span class=\"line\">               new LinkedBlockingQueue&lt;&gt;(), new NamedThreadFactory(&quot;SingleThread&quot;),</span><br><span class=\"line\">               new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * scheduledThreadPool</span><br><span class=\"line\">        */</span><br><span class=\"line\">       ExecutorService scheduledThreadPool = new ThreadPoolExecutor(cpuNum + 1, Integer.MAX_VALUE,</span><br><span class=\"line\">               0, TimeUnit.NANOSECONDS, new DelayQueue(),</span><br><span class=\"line\">               new NamedThreadFactory(&quot;ScheduledThread&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">       ScheduledThreadPoolExecutor scheduledExecutorService = new ScheduledThreadPoolExecutor(2,</span><br><span class=\"line\">               new NamedThreadFactory(&quot;schedule&quot;), new ThreadPoolExecutor.AbortPolicy());</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p><code>ExecutorService scheduledThreadPool</code>这种方式创建的线程池时没有<code>scheduledThreadPool</code>和<code>singleThreadPool</code>方法的.</p>\n<p>####scheduleAtFixedRate和scheduleWithFixedDelay区别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">        * scheduleAtFixedRate 从上一次任务开始执行时 根据period计算下次开始执行时间</span><br><span class=\"line\">        */</span><br><span class=\"line\">        scheduledExecutorService.scheduleAtFixedRate(task, 3, 4, TimeUnit.SECONDS);</span><br><span class=\"line\">       /**</span><br><span class=\"line\">        * scheduleWithFixedDelay 从上一次任务结束的时候 根据delay计算下次任务开始的执行时间</span><br><span class=\"line\">        */</span><br><span class=\"line\">       scheduledExecutorService.scheduleWithFixedDelay(task, 3, 4, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Task implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            Thread.currentThread()</span><br><span class=\"line\">                    .setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        public void uncaughtException(Thread t, Throwable e) &#123;</span><br><span class=\"line\">                            System.out.println(&quot;exception&quot;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(&quot;---&quot;);</span><br><span class=\"line\">            System.out.println(1 / 0);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在创建线程任务时,最好在线程逻辑里就将异常捕获并处理.<br><code>在多线程环境中，线程抛出的异常是不能用try….catch捕获的，这样就有可能导致一些问题的出现，比如异常的时候无法回收一些系统资源，或者没有关闭当前的连接等等。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">           //singleThreadPool.submit(task);</span><br><span class=\"line\">           task.run();</span><br><span class=\"line\">       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">           System.out.println(11);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   static class Task implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public void run() &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">           System.out.println(&quot;---&quot;);</span><br><span class=\"line\">           System.out.println(1 / 0);</span><br><span class=\"line\">           System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式还是会造成线程因为异常而终止.</p>\n<p>#####submit 和 execute<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singleThreadPool.submit(task);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">            singleThreadPool.submit(task);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(11);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>submit无法捕获异常<br>而execute方法可以捕获异常</p>\n"},{"title":"Java Python 速度对比","_content":"\n### 1.循环\nJava  5ms\n```\n  public static void main(String[] args) {\n        long t1 = System.currentTimeMillis();\n        int count = 0;\n        for (int i = 0; i < 100000000; i++) {\n\n        }\n        long t2 = System.currentTimeMillis();\n        System.out.println(t2 - t1);\n    }\n```\n\n\n\npython  12553ms\n```\nwhile i <100000000:\n\ti=i+1\nend = int(round(1000*time.time()))\n```\n\npython循环特别慢\n\n------------\n\n### 2.循环处理字符串(循环次数少个0)\n\nJava 21193ms\n```\nString str = \"20492\\tgame1\\t3\\tgame1#20492_3\\t120\\t0\\t10.2.178.137\\t10.13.4\\t24013\\t\\t\\t{\\\"data\\\":{\\\"rewardList\\\":[{\\\"amount\\\":5,\\\"code\\\":\\\"1\\\",\\\"currencyType\\\":\\\"DIAMOND\\\",\\\"subType\\\":0,\\\"tag\\\":\\\"DIAMOND\\\",\\\"type\\\":\\\"CURRENCY\\\",\\\"typeValue\\\":1},{\\\"amount\\\":1,\\\"code\\\":\\\"it_220001\\\",\\\"itemConfigId\\\":\\\"it_220001\\\",\\\"limit\\\":0,\\\"tag\\\":\\\"it_220001\\\",\\\"type\\\":\\\"ITEM\\\",\\\"typeValue\\\":2},{\\\"amount\\\":1,\\\"code\\\":\\\"it_209101\\\",\\\"itemConfigId\\\":\\\"it_209101\\\",\\\"limit\\\":0,\\\"tag\\\":\\\"it_209101\\\",\\\"type\\\":\\\"ITEM\\\",\\\"typeValue\\\":2}]},\\\"name\\\":\\\"6ZKp6ZWw6Zy45Li75LmU5qOu\\\",\\\"action\\\":\\\"TeamBattleHandler.endBattle\\\",\\\"client\\\":{\\\"isEscape\\\":0,\\\"battleData\\\":{\\\"blockId\\\":\\\"team_001\\\",\\\"scriptVersion\\\":\\\"dev_3\\\",\\\"operate\\\":{\\\"myOps\\\":[[[{\\\"a\\\":[\\\"f1\\\",\\\"e5\\\"],\\\"c\\\":1},{\\\"a\\\":[3,\\\"f1\\\"],\\\"c\\\":2}],[{\\\"a\\\":[\\\"f1\\\",\\\"e5\\\"],\\\"c\\\":1}]]],\\\"enemyOps\\\":[[[{\\\"a\\\":[\\\"e5\\\",\\\"f1\\\"],\\\"c\\\":1},{\\\"a\\\":[3,\\\"e5\\\"],\\\"c\\\":2}]]]},\\\"enemyInfo\\\":{\\\"monsterId\\\":\\\"team_001\\\",\\\"hero\\\":{\\\"5\\\":{\\\"bss\\\":{},\\\"blockdeepen\\\":0.5,\\\"angerbase\\\":1,\\\"hp\\\":12218.0,\\\"cure\\\":1.0,\\\"dp\\\":[\\\"sk_heroNormal_sp\\\"],\\\"uuid\\\":\\\"9F5rOHXh\\\",\\\"anger\\\":1,\\\"speed\\\":1.0,\\\"unhurt\\\":0.0,\\\"drain\\\":0.0,\\\"uncrit\\\":0.0,\\\"unblock\\\":0.0,\\\"dataId\\\":\\\"he_100001\\\",\\\"effecthit\\\":0.0,\\\"defense\\\":0.0,\\\"attack\\\":757.0,\\\"skill\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_n\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_f\\\"}},\\\"skillhurt\\\":0.0,\\\"block\\\":0.05,\\\"id\\\":\\\"he_100001\\\",\\\"angerMax\\\":2,\\\"antihurt\\\":0.0,\\\"sp\\\":{},\\\"critdeepen\\\":1.5,\\\"star\\\":1,\\\"level\\\":31,\\\"dotunhurt\\\":0.0,\\\"speeduprate\\\":0.0,\\\"effectdodge\\\":0.0,\\\"quality\\\":31,\\\"crit\\\":0.05,\\\"dothurt\\\":0.0,\\\"defrate\\\":1.0,\\\"hurt\\\":0.0,\\\"atkrate\\\":1.0,\\\"skillunhurt\\\":0.0}}},\\\"dataVersion\\\":\\\"dev_3\\\",\\\"randomseed\\\":781938,\\\"myInfo\\\":{\\\"hero\\\":{\\\"1\\\":{\\\"bss\\\":{},\\\"blockdeepen\\\":0.5,\\\"hp\\\":44054.0,\\\"fp\\\":{},\\\"cure\\\":1.0,\\\"dp\\\":[\\\"sk_heroNormal_sp\\\"],\\\"uuid\\\":\\\"Ql4JTCrg\\\",\\\"speed\\\":87.0,\\\"unhurt\\\":0.0,\\\"drain\\\":0.0,\\\"uncrit\\\":0.0,\\\"unblock\\\":0.0,\\\"effecthit\\\":0.0,\\\"defense\\\":1796.0,\\\"attack\\\":7442.0,\\\"rankLevel\\\":1,\\\"skill\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_n\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_f\\\"},\\\"3\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_pp\\\"}},\\\"talent\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_1\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_3\\\"},\\\"3\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_4\\\"}},\\\"skillhurt\\\":0.0,\\\"block\\\":0.05,\\\"id\\\":\\\"he_100001\\\",\\\"antihurt\\\":0.0,\\\"sp\\\":{},\\\"critdeepen\\\":1.5,\\\"star\\\":5,\\\"level\\\":120,\\\"dotunhurt\\\":0.0,\\\"speeduprate\\\":0.0,\\\"ep\\\":[],\\\"effectdodge\\\":0.0,\\\"quality\\\":40,\\\"crit\\\":0.17,\\\"dothurt\\\":0.0,\\\"defrate\\\":1.0,\\\"hurt\\\":0.0,\\\"atkrate\\\":1.0,\\\"skillunhurt\\\":0.0}}}},\\\"monsterId\\\":\\\"team_001\\\",\\\"isWin\\\":true},\\\"diff\\\":{\\\"wallet\\\":{\\\"moneys\\\":{\\\"diamond\\\":{\\\"amount\\\":10001035},\\\"challengevolume\\\":{\\\"amount\\\":2}}},\\\"teamBattleInfo\\\":{\\\"battle\\\":false,\\\"monsters\\\":{},\\\"battleCount\\\":1},\\\"record\\\":{\\\"map\\\":{\\\"2008\\\":1,\\\"2016\\\":1,\\\"2025\\\":1,\\\"1010\\\":10001055}},\\\"itemBag\\\":{\\\"items\\\":{\\\"it_209101\\\":{\\\"amount\\\":5002},\\\"it_220001\\\":{\\\"amount\\\":4810}}},\\\"lastRefreshTime\\\":1546839201057,\\\"taskProgress\\\":{\\\"workingTasks\\\":{\\\"Daily_TeamBattleComplete\\\":{\\\"cv\\\":1,\\\"s\\\":\\\"FINISH_NOT_DRAW\\\"}}}},\\\"time\\\":\\\"2019-01-07 13:33:21\\\"}\\tD1497C49EC4756B78E0E1AD0DBFC6E83\\t1546839201\";\n        for (int i = 0; i < 10000000; i++) {\n            if (str.contains(\"it_220001\")) {\n                int index = str.indexOf(\"speeduprate\");\n                String str2 = str.substring(index, index + 10);\n            }\n            if (str.contains(\"_220001\")) {\n                int index = str.indexOf(\"speeduprate\");\n                String str2 = str.substring(index, index + 10);\n            }\n            if (str.contains(\"t_220001\")) {\n                int index = str.indexOf(\"speeduprate\");\n                String str2 = str.substring(index, index + 10);\n            }\n\n        }\n```\n\npython 41043ms\n```\nstrs = \"20492\\tgame1\\t3\\tgame1#20492_3\\t120\\t0\\t10.2.178.137\\t10.13.4\\t24013\\t\\t\\t{\\\"data\\\":{\\\"rewardList\\\":[{\\\"amount\\\":5,\\\"code\\\":\\\"1\\\",\\\"currencyType\\\":\\\"DIAMOND\\\",\\\"subType\\\":0,\\\"tag\\\":\\\"DIAMOND\\\",\\\"type\\\":\\\"CURRENCY\\\",\\\"typeValue\\\":1},{\\\"amount\\\":1,\\\"code\\\":\\\"it_220001\\\",\\\"itemConfigId\\\":\\\"it_220001\\\",\\\"limit\\\":0,\\\"tag\\\":\\\"it_220001\\\",\\\"type\\\":\\\"ITEM\\\",\\\"typeValue\\\":2},{\\\"amount\\\":1,\\\"code\\\":\\\"it_209101\\\",\\\"itemConfigId\\\":\\\"it_209101\\\",\\\"limit\\\":0,\\\"tag\\\":\\\"it_209101\\\",\\\"type\\\":\\\"ITEM\\\",\\\"typeValue\\\":2}]},\\\"name\\\":\\\"6ZKp6ZWw6Zy45Li75LmU5qOu\\\",\\\"action\\\":\\\"TeamBattleHandler.endBattle\\\",\\\"client\\\":{\\\"isEscape\\\":0,\\\"battleData\\\":{\\\"blockId\\\":\\\"team_001\\\",\\\"scriptVersion\\\":\\\"dev_3\\\",\\\"operate\\\":{\\\"myOps\\\":[[[{\\\"a\\\":[\\\"f1\\\",\\\"e5\\\"],\\\"c\\\":1},{\\\"a\\\":[3,\\\"f1\\\"],\\\"c\\\":2}],[{\\\"a\\\":[\\\"f1\\\",\\\"e5\\\"],\\\"c\\\":1}]]],\\\"enemyOps\\\":[[[{\\\"a\\\":[\\\"e5\\\",\\\"f1\\\"],\\\"c\\\":1},{\\\"a\\\":[3,\\\"e5\\\"],\\\"c\\\":2}]]]},\\\"enemyInfo\\\":{\\\"monsterId\\\":\\\"team_001\\\",\\\"hero\\\":{\\\"5\\\":{\\\"bss\\\":{},\\\"blockdeepen\\\":0.5,\\\"angerbase\\\":1,\\\"hp\\\":12218.0,\\\"cure\\\":1.0,\\\"dp\\\":[\\\"sk_heroNormal_sp\\\"],\\\"uuid\\\":\\\"9F5rOHXh\\\",\\\"anger\\\":1,\\\"speed\\\":1.0,\\\"unhurt\\\":0.0,\\\"drain\\\":0.0,\\\"uncrit\\\":0.0,\\\"unblock\\\":0.0,\\\"dataId\\\":\\\"he_100001\\\",\\\"effecthit\\\":0.0,\\\"defense\\\":0.0,\\\"attack\\\":757.0,\\\"skill\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_n\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_f\\\"}},\\\"skillhurt\\\":0.0,\\\"block\\\":0.05,\\\"id\\\":\\\"he_100001\\\",\\\"angerMax\\\":2,\\\"antihurt\\\":0.0,\\\"sp\\\":{},\\\"critdeepen\\\":1.5,\\\"star\\\":1,\\\"level\\\":31,\\\"dotunhurt\\\":0.0,\\\"speeduprate\\\":0.0,\\\"effectdodge\\\":0.0,\\\"quality\\\":31,\\\"crit\\\":0.05,\\\"dothurt\\\":0.0,\\\"defrate\\\":1.0,\\\"hurt\\\":0.0,\\\"atkrate\\\":1.0,\\\"skillunhurt\\\":0.0}}},\\\"dataVersion\\\":\\\"dev_3\\\",\\\"randomseed\\\":781938,\\\"myInfo\\\":{\\\"hero\\\":{\\\"1\\\":{\\\"bss\\\":{},\\\"blockdeepen\\\":0.5,\\\"hp\\\":44054.0,\\\"fp\\\":{},\\\"cure\\\":1.0,\\\"dp\\\":[\\\"sk_heroNormal_sp\\\"],\\\"uuid\\\":\\\"Ql4JTCrg\\\",\\\"speed\\\":87.0,\\\"unhurt\\\":0.0,\\\"drain\\\":0.0,\\\"uncrit\\\":0.0,\\\"unblock\\\":0.0,\\\"effecthit\\\":0.0,\\\"defense\\\":1796.0,\\\"attack\\\":7442.0,\\\"rankLevel\\\":1,\\\"skill\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_n\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_f\\\"},\\\"3\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_pp\\\"}},\\\"talent\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_1\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_3\\\"},\\\"3\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_4\\\"}},\\\"skillhurt\\\":0.0,\\\"block\\\":0.05,\\\"id\\\":\\\"he_100001\\\",\\\"antihurt\\\":0.0,\\\"sp\\\":{},\\\"critdeepen\\\":1.5,\\\"star\\\":5,\\\"level\\\":120,\\\"dotunhurt\\\":0.0,\\\"speeduprate\\\":0.0,\\\"ep\\\":[],\\\"effectdodge\\\":0.0,\\\"quality\\\":40,\\\"crit\\\":0.17,\\\"dothurt\\\":0.0,\\\"defrate\\\":1.0,\\\"hurt\\\":0.0,\\\"atkrate\\\":1.0,\\\"skillunhurt\\\":0.0}}}},\\\"monsterId\\\":\\\"team_001\\\",\\\"isWin\\\":true},\\\"diff\\\":{\\\"wallet\\\":{\\\"moneys\\\":{\\\"diamond\\\":{\\\"amount\\\":10001035},\\\"challengevolume\\\":{\\\"amount\\\":2}}},\\\"teamBattleInfo\\\":{\\\"battle\\\":false,\\\"monsters\\\":{},\\\"battleCount\\\":1},\\\"record\\\":{\\\"map\\\":{\\\"2008\\\":1,\\\"2016\\\":1,\\\"2025\\\":1,\\\"1010\\\":10001055}},\\\"itemBag\\\":{\\\"items\\\":{\\\"it_209101\\\":{\\\"amount\\\":5002},\\\"it_220001\\\":{\\\"amount\\\":4810}}},\\\"lastRefreshTime\\\":1546839201057,\\\"taskProgress\\\":{\\\"workingTasks\\\":{\\\"Daily_TeamBattleComplete\\\":{\\\"cv\\\":1,\\\"s\\\":\\\"FINISH_NOT_DRAW\\\"}}}},\\\"time\\\":\\\"2019-01-07 13:33:21\\\"}\\tD1497C49EC4756B78E0E1AD0DBFC6E83\\t1546839201\"; \ni=0\nwhile i <10000000:\n\ti=i+1\n\tif 'it_220001' in strs:\n\t\tindex = strs.find('speeduprate')\n\t\tstr2 = strs[index:index+10]\n\tif '_220001' in strs:\n\t\tindex = strs.find('speeduprate')\n\t\tstr2 = strs[index:index+10]\n\tif 't_220001' in strs:\n\t\tindex = strs.find('speeduprate')\n\t\tstr2 = strs[index:index+10]\n```\n\npython 字符串处理比java快特别多\n\n--------\n\n### 3.读取文件\n\nJava 228707\n```\nString path = \"/Volumes/macwin/action日志/action_log_2018-12-05.log\";\n        long t1 = System.currentTimeMillis();\n        String str;\n        BufferedReader br = new BufferedReader(new FileReader(path));\n        while ((str = br.readLine()) != null) {\n\n        }\n```\n\npython 228838\n```\npath = \"/Volumes/macwin/action日志/action_log_2018-12-05.log\"\nwith open(path,'r') as f:\n\tfor line in f:\n\t\tpass\n```\n\n-----\n\n### 4.NIO MappedBuffer\n```\n   private static final int LEN = 2047483646;\n\n    public static void main(String[] args) {\n        int line = 0;\n        try {\n\n            FileChannel fc = new FileInputStream(path).getChannel();\n\n            BufferedWriter bw = new BufferedWriter(new FileWriter(path2));\n            long t1 = System.currentTimeMillis();\n            byte[] bs;\n            byte[] temp = new byte[0];\n            String str;\n            Map<String, Integer> map = Maps.newHashMap();\n\n            long prePos = 0;\n\n            int count = (int) (fc.size() / LEN + 1);\n            int offset = LEN;\n            long size = fc.size();\n\n            for (int c = 0; c < count; c++) {\n                prePos += offset;\n                if (size - prePos < LEN) {\n                    offset = (int) (size - prePos - 1);\n                    System.out.println(\"=====\" + offset);\n                }\n                MappedByteBuffer mappedByteBuffer = fc.map(FileChannel.MapMode.READ_ONLY, prePos,\n                        offset);\n                bs = new byte[offset];\n                mappedByteBuffer.get(bs);\n                mappedByteBuffer.clear();\n                int start = 0;\n                for (int i = 0; i < bs.length; i++) {\n                    if (bs[i] == 10) {\n                        byte[] toTemp = new byte[temp.length + i - start];\n                        System.arraycopy(temp, 0, toTemp, 0, temp.length);\n                        System.arraycopy(bs, start, toTemp, temp.length, i - start);\n                        start = i;\n                        temp = new byte[0];\n                        str = new String(toTemp);\n                        line++;\n                        if (line >= 500000) {\n                            throw new RuntimeException();\n                        }\n\n                    }\n                }\n                //将最后不是一行的字符存起来下一次读取的时候用\n                if (start < bs.length - 1) {\n                    temp = new byte[bs.length - 1 - start];\n                    System.arraycopy(bs, start, temp, 0, bs.length - 1 - start);\n                }\n            }\n            long t2 = System.currentTimeMillis();\n            System.out.println(\"\\n\" + (t2 - t1));\n```\n-Xmx2048m -Xms2048m\n无论怎么调缓冲区大小,最快是800000时需要两百多秒读完\n可能是因为得重复将文件映射到内存里\n\n但是,换了个200m的文件,mappedBuffer 一次读fc.size()时1.7秒 ;一次读10000左右时最快1.5秒\nbufferredReader.readline():  1.4~1.7秒\npython 1秒! 偶尔2秒\n\n\n-------\n###Tips:\n\n1.python 的 str in list 数据量大时比较慢\n","source":"_posts/Java Python 速度对比.md","raw":"---\ntitle: Java Python 速度对比\ncategories :\n- 技术\ntags :\n- Java\n- python\n---\n\n### 1.循环\nJava  5ms\n```\n  public static void main(String[] args) {\n        long t1 = System.currentTimeMillis();\n        int count = 0;\n        for (int i = 0; i < 100000000; i++) {\n\n        }\n        long t2 = System.currentTimeMillis();\n        System.out.println(t2 - t1);\n    }\n```\n\n\n\npython  12553ms\n```\nwhile i <100000000:\n\ti=i+1\nend = int(round(1000*time.time()))\n```\n\npython循环特别慢\n\n------------\n\n### 2.循环处理字符串(循环次数少个0)\n\nJava 21193ms\n```\nString str = \"20492\\tgame1\\t3\\tgame1#20492_3\\t120\\t0\\t10.2.178.137\\t10.13.4\\t24013\\t\\t\\t{\\\"data\\\":{\\\"rewardList\\\":[{\\\"amount\\\":5,\\\"code\\\":\\\"1\\\",\\\"currencyType\\\":\\\"DIAMOND\\\",\\\"subType\\\":0,\\\"tag\\\":\\\"DIAMOND\\\",\\\"type\\\":\\\"CURRENCY\\\",\\\"typeValue\\\":1},{\\\"amount\\\":1,\\\"code\\\":\\\"it_220001\\\",\\\"itemConfigId\\\":\\\"it_220001\\\",\\\"limit\\\":0,\\\"tag\\\":\\\"it_220001\\\",\\\"type\\\":\\\"ITEM\\\",\\\"typeValue\\\":2},{\\\"amount\\\":1,\\\"code\\\":\\\"it_209101\\\",\\\"itemConfigId\\\":\\\"it_209101\\\",\\\"limit\\\":0,\\\"tag\\\":\\\"it_209101\\\",\\\"type\\\":\\\"ITEM\\\",\\\"typeValue\\\":2}]},\\\"name\\\":\\\"6ZKp6ZWw6Zy45Li75LmU5qOu\\\",\\\"action\\\":\\\"TeamBattleHandler.endBattle\\\",\\\"client\\\":{\\\"isEscape\\\":0,\\\"battleData\\\":{\\\"blockId\\\":\\\"team_001\\\",\\\"scriptVersion\\\":\\\"dev_3\\\",\\\"operate\\\":{\\\"myOps\\\":[[[{\\\"a\\\":[\\\"f1\\\",\\\"e5\\\"],\\\"c\\\":1},{\\\"a\\\":[3,\\\"f1\\\"],\\\"c\\\":2}],[{\\\"a\\\":[\\\"f1\\\",\\\"e5\\\"],\\\"c\\\":1}]]],\\\"enemyOps\\\":[[[{\\\"a\\\":[\\\"e5\\\",\\\"f1\\\"],\\\"c\\\":1},{\\\"a\\\":[3,\\\"e5\\\"],\\\"c\\\":2}]]]},\\\"enemyInfo\\\":{\\\"monsterId\\\":\\\"team_001\\\",\\\"hero\\\":{\\\"5\\\":{\\\"bss\\\":{},\\\"blockdeepen\\\":0.5,\\\"angerbase\\\":1,\\\"hp\\\":12218.0,\\\"cure\\\":1.0,\\\"dp\\\":[\\\"sk_heroNormal_sp\\\"],\\\"uuid\\\":\\\"9F5rOHXh\\\",\\\"anger\\\":1,\\\"speed\\\":1.0,\\\"unhurt\\\":0.0,\\\"drain\\\":0.0,\\\"uncrit\\\":0.0,\\\"unblock\\\":0.0,\\\"dataId\\\":\\\"he_100001\\\",\\\"effecthit\\\":0.0,\\\"defense\\\":0.0,\\\"attack\\\":757.0,\\\"skill\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_n\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_f\\\"}},\\\"skillhurt\\\":0.0,\\\"block\\\":0.05,\\\"id\\\":\\\"he_100001\\\",\\\"angerMax\\\":2,\\\"antihurt\\\":0.0,\\\"sp\\\":{},\\\"critdeepen\\\":1.5,\\\"star\\\":1,\\\"level\\\":31,\\\"dotunhurt\\\":0.0,\\\"speeduprate\\\":0.0,\\\"effectdodge\\\":0.0,\\\"quality\\\":31,\\\"crit\\\":0.05,\\\"dothurt\\\":0.0,\\\"defrate\\\":1.0,\\\"hurt\\\":0.0,\\\"atkrate\\\":1.0,\\\"skillunhurt\\\":0.0}}},\\\"dataVersion\\\":\\\"dev_3\\\",\\\"randomseed\\\":781938,\\\"myInfo\\\":{\\\"hero\\\":{\\\"1\\\":{\\\"bss\\\":{},\\\"blockdeepen\\\":0.5,\\\"hp\\\":44054.0,\\\"fp\\\":{},\\\"cure\\\":1.0,\\\"dp\\\":[\\\"sk_heroNormal_sp\\\"],\\\"uuid\\\":\\\"Ql4JTCrg\\\",\\\"speed\\\":87.0,\\\"unhurt\\\":0.0,\\\"drain\\\":0.0,\\\"uncrit\\\":0.0,\\\"unblock\\\":0.0,\\\"effecthit\\\":0.0,\\\"defense\\\":1796.0,\\\"attack\\\":7442.0,\\\"rankLevel\\\":1,\\\"skill\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_n\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_f\\\"},\\\"3\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_pp\\\"}},\\\"talent\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_1\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_3\\\"},\\\"3\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_4\\\"}},\\\"skillhurt\\\":0.0,\\\"block\\\":0.05,\\\"id\\\":\\\"he_100001\\\",\\\"antihurt\\\":0.0,\\\"sp\\\":{},\\\"critdeepen\\\":1.5,\\\"star\\\":5,\\\"level\\\":120,\\\"dotunhurt\\\":0.0,\\\"speeduprate\\\":0.0,\\\"ep\\\":[],\\\"effectdodge\\\":0.0,\\\"quality\\\":40,\\\"crit\\\":0.17,\\\"dothurt\\\":0.0,\\\"defrate\\\":1.0,\\\"hurt\\\":0.0,\\\"atkrate\\\":1.0,\\\"skillunhurt\\\":0.0}}}},\\\"monsterId\\\":\\\"team_001\\\",\\\"isWin\\\":true},\\\"diff\\\":{\\\"wallet\\\":{\\\"moneys\\\":{\\\"diamond\\\":{\\\"amount\\\":10001035},\\\"challengevolume\\\":{\\\"amount\\\":2}}},\\\"teamBattleInfo\\\":{\\\"battle\\\":false,\\\"monsters\\\":{},\\\"battleCount\\\":1},\\\"record\\\":{\\\"map\\\":{\\\"2008\\\":1,\\\"2016\\\":1,\\\"2025\\\":1,\\\"1010\\\":10001055}},\\\"itemBag\\\":{\\\"items\\\":{\\\"it_209101\\\":{\\\"amount\\\":5002},\\\"it_220001\\\":{\\\"amount\\\":4810}}},\\\"lastRefreshTime\\\":1546839201057,\\\"taskProgress\\\":{\\\"workingTasks\\\":{\\\"Daily_TeamBattleComplete\\\":{\\\"cv\\\":1,\\\"s\\\":\\\"FINISH_NOT_DRAW\\\"}}}},\\\"time\\\":\\\"2019-01-07 13:33:21\\\"}\\tD1497C49EC4756B78E0E1AD0DBFC6E83\\t1546839201\";\n        for (int i = 0; i < 10000000; i++) {\n            if (str.contains(\"it_220001\")) {\n                int index = str.indexOf(\"speeduprate\");\n                String str2 = str.substring(index, index + 10);\n            }\n            if (str.contains(\"_220001\")) {\n                int index = str.indexOf(\"speeduprate\");\n                String str2 = str.substring(index, index + 10);\n            }\n            if (str.contains(\"t_220001\")) {\n                int index = str.indexOf(\"speeduprate\");\n                String str2 = str.substring(index, index + 10);\n            }\n\n        }\n```\n\npython 41043ms\n```\nstrs = \"20492\\tgame1\\t3\\tgame1#20492_3\\t120\\t0\\t10.2.178.137\\t10.13.4\\t24013\\t\\t\\t{\\\"data\\\":{\\\"rewardList\\\":[{\\\"amount\\\":5,\\\"code\\\":\\\"1\\\",\\\"currencyType\\\":\\\"DIAMOND\\\",\\\"subType\\\":0,\\\"tag\\\":\\\"DIAMOND\\\",\\\"type\\\":\\\"CURRENCY\\\",\\\"typeValue\\\":1},{\\\"amount\\\":1,\\\"code\\\":\\\"it_220001\\\",\\\"itemConfigId\\\":\\\"it_220001\\\",\\\"limit\\\":0,\\\"tag\\\":\\\"it_220001\\\",\\\"type\\\":\\\"ITEM\\\",\\\"typeValue\\\":2},{\\\"amount\\\":1,\\\"code\\\":\\\"it_209101\\\",\\\"itemConfigId\\\":\\\"it_209101\\\",\\\"limit\\\":0,\\\"tag\\\":\\\"it_209101\\\",\\\"type\\\":\\\"ITEM\\\",\\\"typeValue\\\":2}]},\\\"name\\\":\\\"6ZKp6ZWw6Zy45Li75LmU5qOu\\\",\\\"action\\\":\\\"TeamBattleHandler.endBattle\\\",\\\"client\\\":{\\\"isEscape\\\":0,\\\"battleData\\\":{\\\"blockId\\\":\\\"team_001\\\",\\\"scriptVersion\\\":\\\"dev_3\\\",\\\"operate\\\":{\\\"myOps\\\":[[[{\\\"a\\\":[\\\"f1\\\",\\\"e5\\\"],\\\"c\\\":1},{\\\"a\\\":[3,\\\"f1\\\"],\\\"c\\\":2}],[{\\\"a\\\":[\\\"f1\\\",\\\"e5\\\"],\\\"c\\\":1}]]],\\\"enemyOps\\\":[[[{\\\"a\\\":[\\\"e5\\\",\\\"f1\\\"],\\\"c\\\":1},{\\\"a\\\":[3,\\\"e5\\\"],\\\"c\\\":2}]]]},\\\"enemyInfo\\\":{\\\"monsterId\\\":\\\"team_001\\\",\\\"hero\\\":{\\\"5\\\":{\\\"bss\\\":{},\\\"blockdeepen\\\":0.5,\\\"angerbase\\\":1,\\\"hp\\\":12218.0,\\\"cure\\\":1.0,\\\"dp\\\":[\\\"sk_heroNormal_sp\\\"],\\\"uuid\\\":\\\"9F5rOHXh\\\",\\\"anger\\\":1,\\\"speed\\\":1.0,\\\"unhurt\\\":0.0,\\\"drain\\\":0.0,\\\"uncrit\\\":0.0,\\\"unblock\\\":0.0,\\\"dataId\\\":\\\"he_100001\\\",\\\"effecthit\\\":0.0,\\\"defense\\\":0.0,\\\"attack\\\":757.0,\\\"skill\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_n\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_f\\\"}},\\\"skillhurt\\\":0.0,\\\"block\\\":0.05,\\\"id\\\":\\\"he_100001\\\",\\\"angerMax\\\":2,\\\"antihurt\\\":0.0,\\\"sp\\\":{},\\\"critdeepen\\\":1.5,\\\"star\\\":1,\\\"level\\\":31,\\\"dotunhurt\\\":0.0,\\\"speeduprate\\\":0.0,\\\"effectdodge\\\":0.0,\\\"quality\\\":31,\\\"crit\\\":0.05,\\\"dothurt\\\":0.0,\\\"defrate\\\":1.0,\\\"hurt\\\":0.0,\\\"atkrate\\\":1.0,\\\"skillunhurt\\\":0.0}}},\\\"dataVersion\\\":\\\"dev_3\\\",\\\"randomseed\\\":781938,\\\"myInfo\\\":{\\\"hero\\\":{\\\"1\\\":{\\\"bss\\\":{},\\\"blockdeepen\\\":0.5,\\\"hp\\\":44054.0,\\\"fp\\\":{},\\\"cure\\\":1.0,\\\"dp\\\":[\\\"sk_heroNormal_sp\\\"],\\\"uuid\\\":\\\"Ql4JTCrg\\\",\\\"speed\\\":87.0,\\\"unhurt\\\":0.0,\\\"drain\\\":0.0,\\\"uncrit\\\":0.0,\\\"unblock\\\":0.0,\\\"effecthit\\\":0.0,\\\"defense\\\":1796.0,\\\"attack\\\":7442.0,\\\"rankLevel\\\":1,\\\"skill\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_n\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_f\\\"},\\\"3\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_pp\\\"}},\\\"talent\\\":{\\\"1\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_1\\\"},\\\"2\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_3\\\"},\\\"3\\\":{\\\"level\\\":1,\\\"id\\\":\\\"sk_hero001_starUnlock_4\\\"}},\\\"skillhurt\\\":0.0,\\\"block\\\":0.05,\\\"id\\\":\\\"he_100001\\\",\\\"antihurt\\\":0.0,\\\"sp\\\":{},\\\"critdeepen\\\":1.5,\\\"star\\\":5,\\\"level\\\":120,\\\"dotunhurt\\\":0.0,\\\"speeduprate\\\":0.0,\\\"ep\\\":[],\\\"effectdodge\\\":0.0,\\\"quality\\\":40,\\\"crit\\\":0.17,\\\"dothurt\\\":0.0,\\\"defrate\\\":1.0,\\\"hurt\\\":0.0,\\\"atkrate\\\":1.0,\\\"skillunhurt\\\":0.0}}}},\\\"monsterId\\\":\\\"team_001\\\",\\\"isWin\\\":true},\\\"diff\\\":{\\\"wallet\\\":{\\\"moneys\\\":{\\\"diamond\\\":{\\\"amount\\\":10001035},\\\"challengevolume\\\":{\\\"amount\\\":2}}},\\\"teamBattleInfo\\\":{\\\"battle\\\":false,\\\"monsters\\\":{},\\\"battleCount\\\":1},\\\"record\\\":{\\\"map\\\":{\\\"2008\\\":1,\\\"2016\\\":1,\\\"2025\\\":1,\\\"1010\\\":10001055}},\\\"itemBag\\\":{\\\"items\\\":{\\\"it_209101\\\":{\\\"amount\\\":5002},\\\"it_220001\\\":{\\\"amount\\\":4810}}},\\\"lastRefreshTime\\\":1546839201057,\\\"taskProgress\\\":{\\\"workingTasks\\\":{\\\"Daily_TeamBattleComplete\\\":{\\\"cv\\\":1,\\\"s\\\":\\\"FINISH_NOT_DRAW\\\"}}}},\\\"time\\\":\\\"2019-01-07 13:33:21\\\"}\\tD1497C49EC4756B78E0E1AD0DBFC6E83\\t1546839201\"; \ni=0\nwhile i <10000000:\n\ti=i+1\n\tif 'it_220001' in strs:\n\t\tindex = strs.find('speeduprate')\n\t\tstr2 = strs[index:index+10]\n\tif '_220001' in strs:\n\t\tindex = strs.find('speeduprate')\n\t\tstr2 = strs[index:index+10]\n\tif 't_220001' in strs:\n\t\tindex = strs.find('speeduprate')\n\t\tstr2 = strs[index:index+10]\n```\n\npython 字符串处理比java快特别多\n\n--------\n\n### 3.读取文件\n\nJava 228707\n```\nString path = \"/Volumes/macwin/action日志/action_log_2018-12-05.log\";\n        long t1 = System.currentTimeMillis();\n        String str;\n        BufferedReader br = new BufferedReader(new FileReader(path));\n        while ((str = br.readLine()) != null) {\n\n        }\n```\n\npython 228838\n```\npath = \"/Volumes/macwin/action日志/action_log_2018-12-05.log\"\nwith open(path,'r') as f:\n\tfor line in f:\n\t\tpass\n```\n\n-----\n\n### 4.NIO MappedBuffer\n```\n   private static final int LEN = 2047483646;\n\n    public static void main(String[] args) {\n        int line = 0;\n        try {\n\n            FileChannel fc = new FileInputStream(path).getChannel();\n\n            BufferedWriter bw = new BufferedWriter(new FileWriter(path2));\n            long t1 = System.currentTimeMillis();\n            byte[] bs;\n            byte[] temp = new byte[0];\n            String str;\n            Map<String, Integer> map = Maps.newHashMap();\n\n            long prePos = 0;\n\n            int count = (int) (fc.size() / LEN + 1);\n            int offset = LEN;\n            long size = fc.size();\n\n            for (int c = 0; c < count; c++) {\n                prePos += offset;\n                if (size - prePos < LEN) {\n                    offset = (int) (size - prePos - 1);\n                    System.out.println(\"=====\" + offset);\n                }\n                MappedByteBuffer mappedByteBuffer = fc.map(FileChannel.MapMode.READ_ONLY, prePos,\n                        offset);\n                bs = new byte[offset];\n                mappedByteBuffer.get(bs);\n                mappedByteBuffer.clear();\n                int start = 0;\n                for (int i = 0; i < bs.length; i++) {\n                    if (bs[i] == 10) {\n                        byte[] toTemp = new byte[temp.length + i - start];\n                        System.arraycopy(temp, 0, toTemp, 0, temp.length);\n                        System.arraycopy(bs, start, toTemp, temp.length, i - start);\n                        start = i;\n                        temp = new byte[0];\n                        str = new String(toTemp);\n                        line++;\n                        if (line >= 500000) {\n                            throw new RuntimeException();\n                        }\n\n                    }\n                }\n                //将最后不是一行的字符存起来下一次读取的时候用\n                if (start < bs.length - 1) {\n                    temp = new byte[bs.length - 1 - start];\n                    System.arraycopy(bs, start, temp, 0, bs.length - 1 - start);\n                }\n            }\n            long t2 = System.currentTimeMillis();\n            System.out.println(\"\\n\" + (t2 - t1));\n```\n-Xmx2048m -Xms2048m\n无论怎么调缓冲区大小,最快是800000时需要两百多秒读完\n可能是因为得重复将文件映射到内存里\n\n但是,换了个200m的文件,mappedBuffer 一次读fc.size()时1.7秒 ;一次读10000左右时最快1.5秒\nbufferredReader.readline():  1.4~1.7秒\npython 1秒! 偶尔2秒\n\n\n-------\n###Tips:\n\n1.python 的 str in list 数据量大时比较慢\n","slug":"Java Python 速度对比","published":1,"date":"2019-05-21T02:36:43.909Z","updated":"2019-05-21T02:36:43.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbvc0073m74zlwt0nq9j","content":"<h3 id=\"1-循环\"><a href=\"#1-循环\" class=\"headerlink\" title=\"1.循环\"></a>1.循环</h3><p>Java  5ms<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">      long t1 = System.currentTimeMillis();</span><br><span class=\"line\">      int count = 0;</span><br><span class=\"line\">      for (int i = 0; i &lt; 100000000; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      long t2 = System.currentTimeMillis();</span><br><span class=\"line\">      System.out.println(t2 - t1);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>python  12553ms<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while i &lt;100000000:</span><br><span class=\"line\">\ti=i+1</span><br><span class=\"line\">end = int(round(1000*time.time()))</span><br></pre></td></tr></table></figure></p>\n<p>python循环特别慢</p>\n<hr>\n<h3 id=\"2-循环处理字符串-循环次数少个0\"><a href=\"#2-循环处理字符串-循环次数少个0\" class=\"headerlink\" title=\"2.循环处理字符串(循环次数少个0)\"></a>2.循环处理字符串(循环次数少个0)</h3><p>Java 21193ms<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = &quot;20492\\tgame1\\t3\\tgame1#20492_3\\t120\\t0\\t10.2.178.137\\t10.13.4\\t24013\\t\\t\\t&#123;\\&quot;data\\&quot;:&#123;\\&quot;rewardList\\&quot;:[&#123;\\&quot;amount\\&quot;:5,\\&quot;code\\&quot;:\\&quot;1\\&quot;,\\&quot;currencyType\\&quot;:\\&quot;DIAMOND\\&quot;,\\&quot;subType\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;DIAMOND\\&quot;,\\&quot;type\\&quot;:\\&quot;CURRENCY\\&quot;,\\&quot;typeValue\\&quot;:1&#125;,&#123;\\&quot;amount\\&quot;:1,\\&quot;code\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;itemConfigId\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;limit\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;type\\&quot;:\\&quot;ITEM\\&quot;,\\&quot;typeValue\\&quot;:2&#125;,&#123;\\&quot;amount\\&quot;:1,\\&quot;code\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;itemConfigId\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;limit\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;type\\&quot;:\\&quot;ITEM\\&quot;,\\&quot;typeValue\\&quot;:2&#125;]&#125;,\\&quot;name\\&quot;:\\&quot;6ZKp6ZWw6Zy45Li75LmU5qOu\\&quot;,\\&quot;action\\&quot;:\\&quot;TeamBattleHandler.endBattle\\&quot;,\\&quot;client\\&quot;:&#123;\\&quot;isEscape\\&quot;:0,\\&quot;battleData\\&quot;:&#123;\\&quot;blockId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;scriptVersion\\&quot;:\\&quot;dev_3\\&quot;,\\&quot;operate\\&quot;:&#123;\\&quot;myOps\\&quot;:[[[&#123;\\&quot;a\\&quot;:[\\&quot;f1\\&quot;,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:1&#125;,&#123;\\&quot;a\\&quot;:[3,\\&quot;f1\\&quot;],\\&quot;c\\&quot;:2&#125;],[&#123;\\&quot;a\\&quot;:[\\&quot;f1\\&quot;,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:1&#125;]]],\\&quot;enemyOps\\&quot;:[[[&#123;\\&quot;a\\&quot;:[\\&quot;e5\\&quot;,\\&quot;f1\\&quot;],\\&quot;c\\&quot;:1&#125;,&#123;\\&quot;a\\&quot;:[3,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:2&#125;]]]&#125;,\\&quot;enemyInfo\\&quot;:&#123;\\&quot;monsterId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;hero\\&quot;:&#123;\\&quot;5\\&quot;:&#123;\\&quot;bss\\&quot;:&#123;&#125;,\\&quot;blockdeepen\\&quot;:0.5,\\&quot;angerbase\\&quot;:1,\\&quot;hp\\&quot;:12218.0,\\&quot;cure\\&quot;:1.0,\\&quot;dp\\&quot;:[\\&quot;sk_heroNormal_sp\\&quot;],\\&quot;uuid\\&quot;:\\&quot;9F5rOHXh\\&quot;,\\&quot;anger\\&quot;:1,\\&quot;speed\\&quot;:1.0,\\&quot;unhurt\\&quot;:0.0,\\&quot;drain\\&quot;:0.0,\\&quot;uncrit\\&quot;:0.0,\\&quot;unblock\\&quot;:0.0,\\&quot;dataId\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;effecthit\\&quot;:0.0,\\&quot;defense\\&quot;:0.0,\\&quot;attack\\&quot;:757.0,\\&quot;skill\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_n\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_f\\&quot;&#125;&#125;,\\&quot;skillhurt\\&quot;:0.0,\\&quot;block\\&quot;:0.05,\\&quot;id\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;angerMax\\&quot;:2,\\&quot;antihurt\\&quot;:0.0,\\&quot;sp\\&quot;:&#123;&#125;,\\&quot;critdeepen\\&quot;:1.5,\\&quot;star\\&quot;:1,\\&quot;level\\&quot;:31,\\&quot;dotunhurt\\&quot;:0.0,\\&quot;speeduprate\\&quot;:0.0,\\&quot;effectdodge\\&quot;:0.0,\\&quot;quality\\&quot;:31,\\&quot;crit\\&quot;:0.05,\\&quot;dothurt\\&quot;:0.0,\\&quot;defrate\\&quot;:1.0,\\&quot;hurt\\&quot;:0.0,\\&quot;atkrate\\&quot;:1.0,\\&quot;skillunhurt\\&quot;:0.0&#125;&#125;&#125;,\\&quot;dataVersion\\&quot;:\\&quot;dev_3\\&quot;,\\&quot;randomseed\\&quot;:781938,\\&quot;myInfo\\&quot;:&#123;\\&quot;hero\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;bss\\&quot;:&#123;&#125;,\\&quot;blockdeepen\\&quot;:0.5,\\&quot;hp\\&quot;:44054.0,\\&quot;fp\\&quot;:&#123;&#125;,\\&quot;cure\\&quot;:1.0,\\&quot;dp\\&quot;:[\\&quot;sk_heroNormal_sp\\&quot;],\\&quot;uuid\\&quot;:\\&quot;Ql4JTCrg\\&quot;,\\&quot;speed\\&quot;:87.0,\\&quot;unhurt\\&quot;:0.0,\\&quot;drain\\&quot;:0.0,\\&quot;uncrit\\&quot;:0.0,\\&quot;unblock\\&quot;:0.0,\\&quot;effecthit\\&quot;:0.0,\\&quot;defense\\&quot;:1796.0,\\&quot;attack\\&quot;:7442.0,\\&quot;rankLevel\\&quot;:1,\\&quot;skill\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_n\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_f\\&quot;&#125;,\\&quot;3\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_pp\\&quot;&#125;&#125;,\\&quot;talent\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_1\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_3\\&quot;&#125;,\\&quot;3\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_4\\&quot;&#125;&#125;,\\&quot;skillhurt\\&quot;:0.0,\\&quot;block\\&quot;:0.05,\\&quot;id\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;antihurt\\&quot;:0.0,\\&quot;sp\\&quot;:&#123;&#125;,\\&quot;critdeepen\\&quot;:1.5,\\&quot;star\\&quot;:5,\\&quot;level\\&quot;:120,\\&quot;dotunhurt\\&quot;:0.0,\\&quot;speeduprate\\&quot;:0.0,\\&quot;ep\\&quot;:[],\\&quot;effectdodge\\&quot;:0.0,\\&quot;quality\\&quot;:40,\\&quot;crit\\&quot;:0.17,\\&quot;dothurt\\&quot;:0.0,\\&quot;defrate\\&quot;:1.0,\\&quot;hurt\\&quot;:0.0,\\&quot;atkrate\\&quot;:1.0,\\&quot;skillunhurt\\&quot;:0.0&#125;&#125;&#125;&#125;,\\&quot;monsterId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;isWin\\&quot;:true&#125;,\\&quot;diff\\&quot;:&#123;\\&quot;wallet\\&quot;:&#123;\\&quot;moneys\\&quot;:&#123;\\&quot;diamond\\&quot;:&#123;\\&quot;amount\\&quot;:10001035&#125;,\\&quot;challengevolume\\&quot;:&#123;\\&quot;amount\\&quot;:2&#125;&#125;&#125;,\\&quot;teamBattleInfo\\&quot;:&#123;\\&quot;battle\\&quot;:false,\\&quot;monsters\\&quot;:&#123;&#125;,\\&quot;battleCount\\&quot;:1&#125;,\\&quot;record\\&quot;:&#123;\\&quot;map\\&quot;:&#123;\\&quot;2008\\&quot;:1,\\&quot;2016\\&quot;:1,\\&quot;2025\\&quot;:1,\\&quot;1010\\&quot;:10001055&#125;&#125;,\\&quot;itemBag\\&quot;:&#123;\\&quot;items\\&quot;:&#123;\\&quot;it_209101\\&quot;:&#123;\\&quot;amount\\&quot;:5002&#125;,\\&quot;it_220001\\&quot;:&#123;\\&quot;amount\\&quot;:4810&#125;&#125;&#125;,\\&quot;lastRefreshTime\\&quot;:1546839201057,\\&quot;taskProgress\\&quot;:&#123;\\&quot;workingTasks\\&quot;:&#123;\\&quot;Daily_TeamBattleComplete\\&quot;:&#123;\\&quot;cv\\&quot;:1,\\&quot;s\\&quot;:\\&quot;FINISH_NOT_DRAW\\&quot;&#125;&#125;&#125;&#125;,\\&quot;time\\&quot;:\\&quot;2019-01-07 13:33:21\\&quot;&#125;\\tD1497C49EC4756B78E0E1AD0DBFC6E83\\t1546839201&quot;;</span><br><span class=\"line\">        for (int i = 0; i &lt; 10000000; i++) &#123;</span><br><span class=\"line\">            if (str.contains(&quot;it_220001&quot;)) &#123;</span><br><span class=\"line\">                int index = str.indexOf(&quot;speeduprate&quot;);</span><br><span class=\"line\">                String str2 = str.substring(index, index + 10);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (str.contains(&quot;_220001&quot;)) &#123;</span><br><span class=\"line\">                int index = str.indexOf(&quot;speeduprate&quot;);</span><br><span class=\"line\">                String str2 = str.substring(index, index + 10);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (str.contains(&quot;t_220001&quot;)) &#123;</span><br><span class=\"line\">                int index = str.indexOf(&quot;speeduprate&quot;);</span><br><span class=\"line\">                String str2 = str.substring(index, index + 10);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>python 41043ms<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strs = &quot;20492\\tgame1\\t3\\tgame1#20492_3\\t120\\t0\\t10.2.178.137\\t10.13.4\\t24013\\t\\t\\t&#123;\\&quot;data\\&quot;:&#123;\\&quot;rewardList\\&quot;:[&#123;\\&quot;amount\\&quot;:5,\\&quot;code\\&quot;:\\&quot;1\\&quot;,\\&quot;currencyType\\&quot;:\\&quot;DIAMOND\\&quot;,\\&quot;subType\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;DIAMOND\\&quot;,\\&quot;type\\&quot;:\\&quot;CURRENCY\\&quot;,\\&quot;typeValue\\&quot;:1&#125;,&#123;\\&quot;amount\\&quot;:1,\\&quot;code\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;itemConfigId\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;limit\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;type\\&quot;:\\&quot;ITEM\\&quot;,\\&quot;typeValue\\&quot;:2&#125;,&#123;\\&quot;amount\\&quot;:1,\\&quot;code\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;itemConfigId\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;limit\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;type\\&quot;:\\&quot;ITEM\\&quot;,\\&quot;typeValue\\&quot;:2&#125;]&#125;,\\&quot;name\\&quot;:\\&quot;6ZKp6ZWw6Zy45Li75LmU5qOu\\&quot;,\\&quot;action\\&quot;:\\&quot;TeamBattleHandler.endBattle\\&quot;,\\&quot;client\\&quot;:&#123;\\&quot;isEscape\\&quot;:0,\\&quot;battleData\\&quot;:&#123;\\&quot;blockId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;scriptVersion\\&quot;:\\&quot;dev_3\\&quot;,\\&quot;operate\\&quot;:&#123;\\&quot;myOps\\&quot;:[[[&#123;\\&quot;a\\&quot;:[\\&quot;f1\\&quot;,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:1&#125;,&#123;\\&quot;a\\&quot;:[3,\\&quot;f1\\&quot;],\\&quot;c\\&quot;:2&#125;],[&#123;\\&quot;a\\&quot;:[\\&quot;f1\\&quot;,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:1&#125;]]],\\&quot;enemyOps\\&quot;:[[[&#123;\\&quot;a\\&quot;:[\\&quot;e5\\&quot;,\\&quot;f1\\&quot;],\\&quot;c\\&quot;:1&#125;,&#123;\\&quot;a\\&quot;:[3,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:2&#125;]]]&#125;,\\&quot;enemyInfo\\&quot;:&#123;\\&quot;monsterId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;hero\\&quot;:&#123;\\&quot;5\\&quot;:&#123;\\&quot;bss\\&quot;:&#123;&#125;,\\&quot;blockdeepen\\&quot;:0.5,\\&quot;angerbase\\&quot;:1,\\&quot;hp\\&quot;:12218.0,\\&quot;cure\\&quot;:1.0,\\&quot;dp\\&quot;:[\\&quot;sk_heroNormal_sp\\&quot;],\\&quot;uuid\\&quot;:\\&quot;9F5rOHXh\\&quot;,\\&quot;anger\\&quot;:1,\\&quot;speed\\&quot;:1.0,\\&quot;unhurt\\&quot;:0.0,\\&quot;drain\\&quot;:0.0,\\&quot;uncrit\\&quot;:0.0,\\&quot;unblock\\&quot;:0.0,\\&quot;dataId\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;effecthit\\&quot;:0.0,\\&quot;defense\\&quot;:0.0,\\&quot;attack\\&quot;:757.0,\\&quot;skill\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_n\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_f\\&quot;&#125;&#125;,\\&quot;skillhurt\\&quot;:0.0,\\&quot;block\\&quot;:0.05,\\&quot;id\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;angerMax\\&quot;:2,\\&quot;antihurt\\&quot;:0.0,\\&quot;sp\\&quot;:&#123;&#125;,\\&quot;critdeepen\\&quot;:1.5,\\&quot;star\\&quot;:1,\\&quot;level\\&quot;:31,\\&quot;dotunhurt\\&quot;:0.0,\\&quot;speeduprate\\&quot;:0.0,\\&quot;effectdodge\\&quot;:0.0,\\&quot;quality\\&quot;:31,\\&quot;crit\\&quot;:0.05,\\&quot;dothurt\\&quot;:0.0,\\&quot;defrate\\&quot;:1.0,\\&quot;hurt\\&quot;:0.0,\\&quot;atkrate\\&quot;:1.0,\\&quot;skillunhurt\\&quot;:0.0&#125;&#125;&#125;,\\&quot;dataVersion\\&quot;:\\&quot;dev_3\\&quot;,\\&quot;randomseed\\&quot;:781938,\\&quot;myInfo\\&quot;:&#123;\\&quot;hero\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;bss\\&quot;:&#123;&#125;,\\&quot;blockdeepen\\&quot;:0.5,\\&quot;hp\\&quot;:44054.0,\\&quot;fp\\&quot;:&#123;&#125;,\\&quot;cure\\&quot;:1.0,\\&quot;dp\\&quot;:[\\&quot;sk_heroNormal_sp\\&quot;],\\&quot;uuid\\&quot;:\\&quot;Ql4JTCrg\\&quot;,\\&quot;speed\\&quot;:87.0,\\&quot;unhurt\\&quot;:0.0,\\&quot;drain\\&quot;:0.0,\\&quot;uncrit\\&quot;:0.0,\\&quot;unblock\\&quot;:0.0,\\&quot;effecthit\\&quot;:0.0,\\&quot;defense\\&quot;:1796.0,\\&quot;attack\\&quot;:7442.0,\\&quot;rankLevel\\&quot;:1,\\&quot;skill\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_n\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_f\\&quot;&#125;,\\&quot;3\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_pp\\&quot;&#125;&#125;,\\&quot;talent\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_1\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_3\\&quot;&#125;,\\&quot;3\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_4\\&quot;&#125;&#125;,\\&quot;skillhurt\\&quot;:0.0,\\&quot;block\\&quot;:0.05,\\&quot;id\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;antihurt\\&quot;:0.0,\\&quot;sp\\&quot;:&#123;&#125;,\\&quot;critdeepen\\&quot;:1.5,\\&quot;star\\&quot;:5,\\&quot;level\\&quot;:120,\\&quot;dotunhurt\\&quot;:0.0,\\&quot;speeduprate\\&quot;:0.0,\\&quot;ep\\&quot;:[],\\&quot;effectdodge\\&quot;:0.0,\\&quot;quality\\&quot;:40,\\&quot;crit\\&quot;:0.17,\\&quot;dothurt\\&quot;:0.0,\\&quot;defrate\\&quot;:1.0,\\&quot;hurt\\&quot;:0.0,\\&quot;atkrate\\&quot;:1.0,\\&quot;skillunhurt\\&quot;:0.0&#125;&#125;&#125;&#125;,\\&quot;monsterId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;isWin\\&quot;:true&#125;,\\&quot;diff\\&quot;:&#123;\\&quot;wallet\\&quot;:&#123;\\&quot;moneys\\&quot;:&#123;\\&quot;diamond\\&quot;:&#123;\\&quot;amount\\&quot;:10001035&#125;,\\&quot;challengevolume\\&quot;:&#123;\\&quot;amount\\&quot;:2&#125;&#125;&#125;,\\&quot;teamBattleInfo\\&quot;:&#123;\\&quot;battle\\&quot;:false,\\&quot;monsters\\&quot;:&#123;&#125;,\\&quot;battleCount\\&quot;:1&#125;,\\&quot;record\\&quot;:&#123;\\&quot;map\\&quot;:&#123;\\&quot;2008\\&quot;:1,\\&quot;2016\\&quot;:1,\\&quot;2025\\&quot;:1,\\&quot;1010\\&quot;:10001055&#125;&#125;,\\&quot;itemBag\\&quot;:&#123;\\&quot;items\\&quot;:&#123;\\&quot;it_209101\\&quot;:&#123;\\&quot;amount\\&quot;:5002&#125;,\\&quot;it_220001\\&quot;:&#123;\\&quot;amount\\&quot;:4810&#125;&#125;&#125;,\\&quot;lastRefreshTime\\&quot;:1546839201057,\\&quot;taskProgress\\&quot;:&#123;\\&quot;workingTasks\\&quot;:&#123;\\&quot;Daily_TeamBattleComplete\\&quot;:&#123;\\&quot;cv\\&quot;:1,\\&quot;s\\&quot;:\\&quot;FINISH_NOT_DRAW\\&quot;&#125;&#125;&#125;&#125;,\\&quot;time\\&quot;:\\&quot;2019-01-07 13:33:21\\&quot;&#125;\\tD1497C49EC4756B78E0E1AD0DBFC6E83\\t1546839201&quot;; </span><br><span class=\"line\">i=0</span><br><span class=\"line\">while i &lt;10000000:</span><br><span class=\"line\">\ti=i+1</span><br><span class=\"line\">\tif &apos;it_220001&apos; in strs:</span><br><span class=\"line\">\t\tindex = strs.find(&apos;speeduprate&apos;)</span><br><span class=\"line\">\t\tstr2 = strs[index:index+10]</span><br><span class=\"line\">\tif &apos;_220001&apos; in strs:</span><br><span class=\"line\">\t\tindex = strs.find(&apos;speeduprate&apos;)</span><br><span class=\"line\">\t\tstr2 = strs[index:index+10]</span><br><span class=\"line\">\tif &apos;t_220001&apos; in strs:</span><br><span class=\"line\">\t\tindex = strs.find(&apos;speeduprate&apos;)</span><br><span class=\"line\">\t\tstr2 = strs[index:index+10]</span><br></pre></td></tr></table></figure></p>\n<p>python 字符串处理比java快特别多</p>\n<hr>\n<h3 id=\"3-读取文件\"><a href=\"#3-读取文件\" class=\"headerlink\" title=\"3.读取文件\"></a>3.读取文件</h3><p>Java 228707<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String path = &quot;/Volumes/macwin/action日志/action_log_2018-12-05.log&quot;;</span><br><span class=\"line\">        long t1 = System.currentTimeMillis();</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        BufferedReader br = new BufferedReader(new FileReader(path));</span><br><span class=\"line\">        while ((str = br.readLine()) != null) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>python 228838<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path = &quot;/Volumes/macwin/action日志/action_log_2018-12-05.log&quot;</span><br><span class=\"line\">with open(path,&apos;r&apos;) as f:</span><br><span class=\"line\">\tfor line in f:</span><br><span class=\"line\">\t\tpass</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"4-NIO-MappedBuffer\"><a href=\"#4-NIO-MappedBuffer\" class=\"headerlink\" title=\"4.NIO MappedBuffer\"></a>4.NIO MappedBuffer</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final int LEN = 2047483646;</span><br><span class=\"line\"></span><br><span class=\"line\"> public static void main(String[] args) &#123;</span><br><span class=\"line\">     int line = 0;</span><br><span class=\"line\">     try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         FileChannel fc = new FileInputStream(path).getChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">         BufferedWriter bw = new BufferedWriter(new FileWriter(path2));</span><br><span class=\"line\">         long t1 = System.currentTimeMillis();</span><br><span class=\"line\">         byte[] bs;</span><br><span class=\"line\">         byte[] temp = new byte[0];</span><br><span class=\"line\">         String str;</span><br><span class=\"line\">         Map&lt;String, Integer&gt; map = Maps.newHashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">         long prePos = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">         int count = (int) (fc.size() / LEN + 1);</span><br><span class=\"line\">         int offset = LEN;</span><br><span class=\"line\">         long size = fc.size();</span><br><span class=\"line\"></span><br><span class=\"line\">         for (int c = 0; c &lt; count; c++) &#123;</span><br><span class=\"line\">             prePos += offset;</span><br><span class=\"line\">             if (size - prePos &lt; LEN) &#123;</span><br><span class=\"line\">                 offset = (int) (size - prePos - 1);</span><br><span class=\"line\">                 System.out.println(&quot;=====&quot; + offset);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             MappedByteBuffer mappedByteBuffer = fc.map(FileChannel.MapMode.READ_ONLY, prePos,</span><br><span class=\"line\">                     offset);</span><br><span class=\"line\">             bs = new byte[offset];</span><br><span class=\"line\">             mappedByteBuffer.get(bs);</span><br><span class=\"line\">             mappedByteBuffer.clear();</span><br><span class=\"line\">             int start = 0;</span><br><span class=\"line\">             for (int i = 0; i &lt; bs.length; i++) &#123;</span><br><span class=\"line\">                 if (bs[i] == 10) &#123;</span><br><span class=\"line\">                     byte[] toTemp = new byte[temp.length + i - start];</span><br><span class=\"line\">                     System.arraycopy(temp, 0, toTemp, 0, temp.length);</span><br><span class=\"line\">                     System.arraycopy(bs, start, toTemp, temp.length, i - start);</span><br><span class=\"line\">                     start = i;</span><br><span class=\"line\">                     temp = new byte[0];</span><br><span class=\"line\">                     str = new String(toTemp);</span><br><span class=\"line\">                     line++;</span><br><span class=\"line\">                     if (line &gt;= 500000) &#123;</span><br><span class=\"line\">                         throw new RuntimeException();</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             //将最后不是一行的字符存起来下一次读取的时候用</span><br><span class=\"line\">             if (start &lt; bs.length - 1) &#123;</span><br><span class=\"line\">                 temp = new byte[bs.length - 1 - start];</span><br><span class=\"line\">                 System.arraycopy(bs, start, temp, 0, bs.length - 1 - start);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         long t2 = System.currentTimeMillis();</span><br><span class=\"line\">         System.out.println(&quot;\\n&quot; + (t2 - t1));</span><br></pre></td></tr></table></figure>\n<p>-Xmx2048m -Xms2048m<br>无论怎么调缓冲区大小,最快是800000时需要两百多秒读完<br>可能是因为得重复将文件映射到内存里</p>\n<p>但是,换了个200m的文件,mappedBuffer 一次读fc.size()时1.7秒 ;一次读10000左右时最快1.5秒<br>bufferredReader.readline():  1.4~1.7秒<br>python 1秒! 偶尔2秒</p>\n<hr>\n<p>###Tips:</p>\n<p>1.python 的 str in list 数据量大时比较慢</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-循环\"><a href=\"#1-循环\" class=\"headerlink\" title=\"1.循环\"></a>1.循环</h3><p>Java  5ms<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">      long t1 = System.currentTimeMillis();</span><br><span class=\"line\">      int count = 0;</span><br><span class=\"line\">      for (int i = 0; i &lt; 100000000; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      long t2 = System.currentTimeMillis();</span><br><span class=\"line\">      System.out.println(t2 - t1);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>python  12553ms<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while i &lt;100000000:</span><br><span class=\"line\">\ti=i+1</span><br><span class=\"line\">end = int(round(1000*time.time()))</span><br></pre></td></tr></table></figure></p>\n<p>python循环特别慢</p>\n<hr>\n<h3 id=\"2-循环处理字符串-循环次数少个0\"><a href=\"#2-循环处理字符串-循环次数少个0\" class=\"headerlink\" title=\"2.循环处理字符串(循环次数少个0)\"></a>2.循环处理字符串(循环次数少个0)</h3><p>Java 21193ms<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = &quot;20492\\tgame1\\t3\\tgame1#20492_3\\t120\\t0\\t10.2.178.137\\t10.13.4\\t24013\\t\\t\\t&#123;\\&quot;data\\&quot;:&#123;\\&quot;rewardList\\&quot;:[&#123;\\&quot;amount\\&quot;:5,\\&quot;code\\&quot;:\\&quot;1\\&quot;,\\&quot;currencyType\\&quot;:\\&quot;DIAMOND\\&quot;,\\&quot;subType\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;DIAMOND\\&quot;,\\&quot;type\\&quot;:\\&quot;CURRENCY\\&quot;,\\&quot;typeValue\\&quot;:1&#125;,&#123;\\&quot;amount\\&quot;:1,\\&quot;code\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;itemConfigId\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;limit\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;type\\&quot;:\\&quot;ITEM\\&quot;,\\&quot;typeValue\\&quot;:2&#125;,&#123;\\&quot;amount\\&quot;:1,\\&quot;code\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;itemConfigId\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;limit\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;type\\&quot;:\\&quot;ITEM\\&quot;,\\&quot;typeValue\\&quot;:2&#125;]&#125;,\\&quot;name\\&quot;:\\&quot;6ZKp6ZWw6Zy45Li75LmU5qOu\\&quot;,\\&quot;action\\&quot;:\\&quot;TeamBattleHandler.endBattle\\&quot;,\\&quot;client\\&quot;:&#123;\\&quot;isEscape\\&quot;:0,\\&quot;battleData\\&quot;:&#123;\\&quot;blockId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;scriptVersion\\&quot;:\\&quot;dev_3\\&quot;,\\&quot;operate\\&quot;:&#123;\\&quot;myOps\\&quot;:[[[&#123;\\&quot;a\\&quot;:[\\&quot;f1\\&quot;,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:1&#125;,&#123;\\&quot;a\\&quot;:[3,\\&quot;f1\\&quot;],\\&quot;c\\&quot;:2&#125;],[&#123;\\&quot;a\\&quot;:[\\&quot;f1\\&quot;,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:1&#125;]]],\\&quot;enemyOps\\&quot;:[[[&#123;\\&quot;a\\&quot;:[\\&quot;e5\\&quot;,\\&quot;f1\\&quot;],\\&quot;c\\&quot;:1&#125;,&#123;\\&quot;a\\&quot;:[3,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:2&#125;]]]&#125;,\\&quot;enemyInfo\\&quot;:&#123;\\&quot;monsterId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;hero\\&quot;:&#123;\\&quot;5\\&quot;:&#123;\\&quot;bss\\&quot;:&#123;&#125;,\\&quot;blockdeepen\\&quot;:0.5,\\&quot;angerbase\\&quot;:1,\\&quot;hp\\&quot;:12218.0,\\&quot;cure\\&quot;:1.0,\\&quot;dp\\&quot;:[\\&quot;sk_heroNormal_sp\\&quot;],\\&quot;uuid\\&quot;:\\&quot;9F5rOHXh\\&quot;,\\&quot;anger\\&quot;:1,\\&quot;speed\\&quot;:1.0,\\&quot;unhurt\\&quot;:0.0,\\&quot;drain\\&quot;:0.0,\\&quot;uncrit\\&quot;:0.0,\\&quot;unblock\\&quot;:0.0,\\&quot;dataId\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;effecthit\\&quot;:0.0,\\&quot;defense\\&quot;:0.0,\\&quot;attack\\&quot;:757.0,\\&quot;skill\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_n\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_f\\&quot;&#125;&#125;,\\&quot;skillhurt\\&quot;:0.0,\\&quot;block\\&quot;:0.05,\\&quot;id\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;angerMax\\&quot;:2,\\&quot;antihurt\\&quot;:0.0,\\&quot;sp\\&quot;:&#123;&#125;,\\&quot;critdeepen\\&quot;:1.5,\\&quot;star\\&quot;:1,\\&quot;level\\&quot;:31,\\&quot;dotunhurt\\&quot;:0.0,\\&quot;speeduprate\\&quot;:0.0,\\&quot;effectdodge\\&quot;:0.0,\\&quot;quality\\&quot;:31,\\&quot;crit\\&quot;:0.05,\\&quot;dothurt\\&quot;:0.0,\\&quot;defrate\\&quot;:1.0,\\&quot;hurt\\&quot;:0.0,\\&quot;atkrate\\&quot;:1.0,\\&quot;skillunhurt\\&quot;:0.0&#125;&#125;&#125;,\\&quot;dataVersion\\&quot;:\\&quot;dev_3\\&quot;,\\&quot;randomseed\\&quot;:781938,\\&quot;myInfo\\&quot;:&#123;\\&quot;hero\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;bss\\&quot;:&#123;&#125;,\\&quot;blockdeepen\\&quot;:0.5,\\&quot;hp\\&quot;:44054.0,\\&quot;fp\\&quot;:&#123;&#125;,\\&quot;cure\\&quot;:1.0,\\&quot;dp\\&quot;:[\\&quot;sk_heroNormal_sp\\&quot;],\\&quot;uuid\\&quot;:\\&quot;Ql4JTCrg\\&quot;,\\&quot;speed\\&quot;:87.0,\\&quot;unhurt\\&quot;:0.0,\\&quot;drain\\&quot;:0.0,\\&quot;uncrit\\&quot;:0.0,\\&quot;unblock\\&quot;:0.0,\\&quot;effecthit\\&quot;:0.0,\\&quot;defense\\&quot;:1796.0,\\&quot;attack\\&quot;:7442.0,\\&quot;rankLevel\\&quot;:1,\\&quot;skill\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_n\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_f\\&quot;&#125;,\\&quot;3\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_pp\\&quot;&#125;&#125;,\\&quot;talent\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_1\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_3\\&quot;&#125;,\\&quot;3\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_4\\&quot;&#125;&#125;,\\&quot;skillhurt\\&quot;:0.0,\\&quot;block\\&quot;:0.05,\\&quot;id\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;antihurt\\&quot;:0.0,\\&quot;sp\\&quot;:&#123;&#125;,\\&quot;critdeepen\\&quot;:1.5,\\&quot;star\\&quot;:5,\\&quot;level\\&quot;:120,\\&quot;dotunhurt\\&quot;:0.0,\\&quot;speeduprate\\&quot;:0.0,\\&quot;ep\\&quot;:[],\\&quot;effectdodge\\&quot;:0.0,\\&quot;quality\\&quot;:40,\\&quot;crit\\&quot;:0.17,\\&quot;dothurt\\&quot;:0.0,\\&quot;defrate\\&quot;:1.0,\\&quot;hurt\\&quot;:0.0,\\&quot;atkrate\\&quot;:1.0,\\&quot;skillunhurt\\&quot;:0.0&#125;&#125;&#125;&#125;,\\&quot;monsterId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;isWin\\&quot;:true&#125;,\\&quot;diff\\&quot;:&#123;\\&quot;wallet\\&quot;:&#123;\\&quot;moneys\\&quot;:&#123;\\&quot;diamond\\&quot;:&#123;\\&quot;amount\\&quot;:10001035&#125;,\\&quot;challengevolume\\&quot;:&#123;\\&quot;amount\\&quot;:2&#125;&#125;&#125;,\\&quot;teamBattleInfo\\&quot;:&#123;\\&quot;battle\\&quot;:false,\\&quot;monsters\\&quot;:&#123;&#125;,\\&quot;battleCount\\&quot;:1&#125;,\\&quot;record\\&quot;:&#123;\\&quot;map\\&quot;:&#123;\\&quot;2008\\&quot;:1,\\&quot;2016\\&quot;:1,\\&quot;2025\\&quot;:1,\\&quot;1010\\&quot;:10001055&#125;&#125;,\\&quot;itemBag\\&quot;:&#123;\\&quot;items\\&quot;:&#123;\\&quot;it_209101\\&quot;:&#123;\\&quot;amount\\&quot;:5002&#125;,\\&quot;it_220001\\&quot;:&#123;\\&quot;amount\\&quot;:4810&#125;&#125;&#125;,\\&quot;lastRefreshTime\\&quot;:1546839201057,\\&quot;taskProgress\\&quot;:&#123;\\&quot;workingTasks\\&quot;:&#123;\\&quot;Daily_TeamBattleComplete\\&quot;:&#123;\\&quot;cv\\&quot;:1,\\&quot;s\\&quot;:\\&quot;FINISH_NOT_DRAW\\&quot;&#125;&#125;&#125;&#125;,\\&quot;time\\&quot;:\\&quot;2019-01-07 13:33:21\\&quot;&#125;\\tD1497C49EC4756B78E0E1AD0DBFC6E83\\t1546839201&quot;;</span><br><span class=\"line\">        for (int i = 0; i &lt; 10000000; i++) &#123;</span><br><span class=\"line\">            if (str.contains(&quot;it_220001&quot;)) &#123;</span><br><span class=\"line\">                int index = str.indexOf(&quot;speeduprate&quot;);</span><br><span class=\"line\">                String str2 = str.substring(index, index + 10);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (str.contains(&quot;_220001&quot;)) &#123;</span><br><span class=\"line\">                int index = str.indexOf(&quot;speeduprate&quot;);</span><br><span class=\"line\">                String str2 = str.substring(index, index + 10);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (str.contains(&quot;t_220001&quot;)) &#123;</span><br><span class=\"line\">                int index = str.indexOf(&quot;speeduprate&quot;);</span><br><span class=\"line\">                String str2 = str.substring(index, index + 10);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>python 41043ms<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strs = &quot;20492\\tgame1\\t3\\tgame1#20492_3\\t120\\t0\\t10.2.178.137\\t10.13.4\\t24013\\t\\t\\t&#123;\\&quot;data\\&quot;:&#123;\\&quot;rewardList\\&quot;:[&#123;\\&quot;amount\\&quot;:5,\\&quot;code\\&quot;:\\&quot;1\\&quot;,\\&quot;currencyType\\&quot;:\\&quot;DIAMOND\\&quot;,\\&quot;subType\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;DIAMOND\\&quot;,\\&quot;type\\&quot;:\\&quot;CURRENCY\\&quot;,\\&quot;typeValue\\&quot;:1&#125;,&#123;\\&quot;amount\\&quot;:1,\\&quot;code\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;itemConfigId\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;limit\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;it_220001\\&quot;,\\&quot;type\\&quot;:\\&quot;ITEM\\&quot;,\\&quot;typeValue\\&quot;:2&#125;,&#123;\\&quot;amount\\&quot;:1,\\&quot;code\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;itemConfigId\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;limit\\&quot;:0,\\&quot;tag\\&quot;:\\&quot;it_209101\\&quot;,\\&quot;type\\&quot;:\\&quot;ITEM\\&quot;,\\&quot;typeValue\\&quot;:2&#125;]&#125;,\\&quot;name\\&quot;:\\&quot;6ZKp6ZWw6Zy45Li75LmU5qOu\\&quot;,\\&quot;action\\&quot;:\\&quot;TeamBattleHandler.endBattle\\&quot;,\\&quot;client\\&quot;:&#123;\\&quot;isEscape\\&quot;:0,\\&quot;battleData\\&quot;:&#123;\\&quot;blockId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;scriptVersion\\&quot;:\\&quot;dev_3\\&quot;,\\&quot;operate\\&quot;:&#123;\\&quot;myOps\\&quot;:[[[&#123;\\&quot;a\\&quot;:[\\&quot;f1\\&quot;,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:1&#125;,&#123;\\&quot;a\\&quot;:[3,\\&quot;f1\\&quot;],\\&quot;c\\&quot;:2&#125;],[&#123;\\&quot;a\\&quot;:[\\&quot;f1\\&quot;,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:1&#125;]]],\\&quot;enemyOps\\&quot;:[[[&#123;\\&quot;a\\&quot;:[\\&quot;e5\\&quot;,\\&quot;f1\\&quot;],\\&quot;c\\&quot;:1&#125;,&#123;\\&quot;a\\&quot;:[3,\\&quot;e5\\&quot;],\\&quot;c\\&quot;:2&#125;]]]&#125;,\\&quot;enemyInfo\\&quot;:&#123;\\&quot;monsterId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;hero\\&quot;:&#123;\\&quot;5\\&quot;:&#123;\\&quot;bss\\&quot;:&#123;&#125;,\\&quot;blockdeepen\\&quot;:0.5,\\&quot;angerbase\\&quot;:1,\\&quot;hp\\&quot;:12218.0,\\&quot;cure\\&quot;:1.0,\\&quot;dp\\&quot;:[\\&quot;sk_heroNormal_sp\\&quot;],\\&quot;uuid\\&quot;:\\&quot;9F5rOHXh\\&quot;,\\&quot;anger\\&quot;:1,\\&quot;speed\\&quot;:1.0,\\&quot;unhurt\\&quot;:0.0,\\&quot;drain\\&quot;:0.0,\\&quot;uncrit\\&quot;:0.0,\\&quot;unblock\\&quot;:0.0,\\&quot;dataId\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;effecthit\\&quot;:0.0,\\&quot;defense\\&quot;:0.0,\\&quot;attack\\&quot;:757.0,\\&quot;skill\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_n\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_f\\&quot;&#125;&#125;,\\&quot;skillhurt\\&quot;:0.0,\\&quot;block\\&quot;:0.05,\\&quot;id\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;angerMax\\&quot;:2,\\&quot;antihurt\\&quot;:0.0,\\&quot;sp\\&quot;:&#123;&#125;,\\&quot;critdeepen\\&quot;:1.5,\\&quot;star\\&quot;:1,\\&quot;level\\&quot;:31,\\&quot;dotunhurt\\&quot;:0.0,\\&quot;speeduprate\\&quot;:0.0,\\&quot;effectdodge\\&quot;:0.0,\\&quot;quality\\&quot;:31,\\&quot;crit\\&quot;:0.05,\\&quot;dothurt\\&quot;:0.0,\\&quot;defrate\\&quot;:1.0,\\&quot;hurt\\&quot;:0.0,\\&quot;atkrate\\&quot;:1.0,\\&quot;skillunhurt\\&quot;:0.0&#125;&#125;&#125;,\\&quot;dataVersion\\&quot;:\\&quot;dev_3\\&quot;,\\&quot;randomseed\\&quot;:781938,\\&quot;myInfo\\&quot;:&#123;\\&quot;hero\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;bss\\&quot;:&#123;&#125;,\\&quot;blockdeepen\\&quot;:0.5,\\&quot;hp\\&quot;:44054.0,\\&quot;fp\\&quot;:&#123;&#125;,\\&quot;cure\\&quot;:1.0,\\&quot;dp\\&quot;:[\\&quot;sk_heroNormal_sp\\&quot;],\\&quot;uuid\\&quot;:\\&quot;Ql4JTCrg\\&quot;,\\&quot;speed\\&quot;:87.0,\\&quot;unhurt\\&quot;:0.0,\\&quot;drain\\&quot;:0.0,\\&quot;uncrit\\&quot;:0.0,\\&quot;unblock\\&quot;:0.0,\\&quot;effecthit\\&quot;:0.0,\\&quot;defense\\&quot;:1796.0,\\&quot;attack\\&quot;:7442.0,\\&quot;rankLevel\\&quot;:1,\\&quot;skill\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_n\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_f\\&quot;&#125;,\\&quot;3\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_pp\\&quot;&#125;&#125;,\\&quot;talent\\&quot;:&#123;\\&quot;1\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_1\\&quot;&#125;,\\&quot;2\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_3\\&quot;&#125;,\\&quot;3\\&quot;:&#123;\\&quot;level\\&quot;:1,\\&quot;id\\&quot;:\\&quot;sk_hero001_starUnlock_4\\&quot;&#125;&#125;,\\&quot;skillhurt\\&quot;:0.0,\\&quot;block\\&quot;:0.05,\\&quot;id\\&quot;:\\&quot;he_100001\\&quot;,\\&quot;antihurt\\&quot;:0.0,\\&quot;sp\\&quot;:&#123;&#125;,\\&quot;critdeepen\\&quot;:1.5,\\&quot;star\\&quot;:5,\\&quot;level\\&quot;:120,\\&quot;dotunhurt\\&quot;:0.0,\\&quot;speeduprate\\&quot;:0.0,\\&quot;ep\\&quot;:[],\\&quot;effectdodge\\&quot;:0.0,\\&quot;quality\\&quot;:40,\\&quot;crit\\&quot;:0.17,\\&quot;dothurt\\&quot;:0.0,\\&quot;defrate\\&quot;:1.0,\\&quot;hurt\\&quot;:0.0,\\&quot;atkrate\\&quot;:1.0,\\&quot;skillunhurt\\&quot;:0.0&#125;&#125;&#125;&#125;,\\&quot;monsterId\\&quot;:\\&quot;team_001\\&quot;,\\&quot;isWin\\&quot;:true&#125;,\\&quot;diff\\&quot;:&#123;\\&quot;wallet\\&quot;:&#123;\\&quot;moneys\\&quot;:&#123;\\&quot;diamond\\&quot;:&#123;\\&quot;amount\\&quot;:10001035&#125;,\\&quot;challengevolume\\&quot;:&#123;\\&quot;amount\\&quot;:2&#125;&#125;&#125;,\\&quot;teamBattleInfo\\&quot;:&#123;\\&quot;battle\\&quot;:false,\\&quot;monsters\\&quot;:&#123;&#125;,\\&quot;battleCount\\&quot;:1&#125;,\\&quot;record\\&quot;:&#123;\\&quot;map\\&quot;:&#123;\\&quot;2008\\&quot;:1,\\&quot;2016\\&quot;:1,\\&quot;2025\\&quot;:1,\\&quot;1010\\&quot;:10001055&#125;&#125;,\\&quot;itemBag\\&quot;:&#123;\\&quot;items\\&quot;:&#123;\\&quot;it_209101\\&quot;:&#123;\\&quot;amount\\&quot;:5002&#125;,\\&quot;it_220001\\&quot;:&#123;\\&quot;amount\\&quot;:4810&#125;&#125;&#125;,\\&quot;lastRefreshTime\\&quot;:1546839201057,\\&quot;taskProgress\\&quot;:&#123;\\&quot;workingTasks\\&quot;:&#123;\\&quot;Daily_TeamBattleComplete\\&quot;:&#123;\\&quot;cv\\&quot;:1,\\&quot;s\\&quot;:\\&quot;FINISH_NOT_DRAW\\&quot;&#125;&#125;&#125;&#125;,\\&quot;time\\&quot;:\\&quot;2019-01-07 13:33:21\\&quot;&#125;\\tD1497C49EC4756B78E0E1AD0DBFC6E83\\t1546839201&quot;; </span><br><span class=\"line\">i=0</span><br><span class=\"line\">while i &lt;10000000:</span><br><span class=\"line\">\ti=i+1</span><br><span class=\"line\">\tif &apos;it_220001&apos; in strs:</span><br><span class=\"line\">\t\tindex = strs.find(&apos;speeduprate&apos;)</span><br><span class=\"line\">\t\tstr2 = strs[index:index+10]</span><br><span class=\"line\">\tif &apos;_220001&apos; in strs:</span><br><span class=\"line\">\t\tindex = strs.find(&apos;speeduprate&apos;)</span><br><span class=\"line\">\t\tstr2 = strs[index:index+10]</span><br><span class=\"line\">\tif &apos;t_220001&apos; in strs:</span><br><span class=\"line\">\t\tindex = strs.find(&apos;speeduprate&apos;)</span><br><span class=\"line\">\t\tstr2 = strs[index:index+10]</span><br></pre></td></tr></table></figure></p>\n<p>python 字符串处理比java快特别多</p>\n<hr>\n<h3 id=\"3-读取文件\"><a href=\"#3-读取文件\" class=\"headerlink\" title=\"3.读取文件\"></a>3.读取文件</h3><p>Java 228707<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String path = &quot;/Volumes/macwin/action日志/action_log_2018-12-05.log&quot;;</span><br><span class=\"line\">        long t1 = System.currentTimeMillis();</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        BufferedReader br = new BufferedReader(new FileReader(path));</span><br><span class=\"line\">        while ((str = br.readLine()) != null) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>python 228838<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path = &quot;/Volumes/macwin/action日志/action_log_2018-12-05.log&quot;</span><br><span class=\"line\">with open(path,&apos;r&apos;) as f:</span><br><span class=\"line\">\tfor line in f:</span><br><span class=\"line\">\t\tpass</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"4-NIO-MappedBuffer\"><a href=\"#4-NIO-MappedBuffer\" class=\"headerlink\" title=\"4.NIO MappedBuffer\"></a>4.NIO MappedBuffer</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final int LEN = 2047483646;</span><br><span class=\"line\"></span><br><span class=\"line\"> public static void main(String[] args) &#123;</span><br><span class=\"line\">     int line = 0;</span><br><span class=\"line\">     try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         FileChannel fc = new FileInputStream(path).getChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">         BufferedWriter bw = new BufferedWriter(new FileWriter(path2));</span><br><span class=\"line\">         long t1 = System.currentTimeMillis();</span><br><span class=\"line\">         byte[] bs;</span><br><span class=\"line\">         byte[] temp = new byte[0];</span><br><span class=\"line\">         String str;</span><br><span class=\"line\">         Map&lt;String, Integer&gt; map = Maps.newHashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">         long prePos = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">         int count = (int) (fc.size() / LEN + 1);</span><br><span class=\"line\">         int offset = LEN;</span><br><span class=\"line\">         long size = fc.size();</span><br><span class=\"line\"></span><br><span class=\"line\">         for (int c = 0; c &lt; count; c++) &#123;</span><br><span class=\"line\">             prePos += offset;</span><br><span class=\"line\">             if (size - prePos &lt; LEN) &#123;</span><br><span class=\"line\">                 offset = (int) (size - prePos - 1);</span><br><span class=\"line\">                 System.out.println(&quot;=====&quot; + offset);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             MappedByteBuffer mappedByteBuffer = fc.map(FileChannel.MapMode.READ_ONLY, prePos,</span><br><span class=\"line\">                     offset);</span><br><span class=\"line\">             bs = new byte[offset];</span><br><span class=\"line\">             mappedByteBuffer.get(bs);</span><br><span class=\"line\">             mappedByteBuffer.clear();</span><br><span class=\"line\">             int start = 0;</span><br><span class=\"line\">             for (int i = 0; i &lt; bs.length; i++) &#123;</span><br><span class=\"line\">                 if (bs[i] == 10) &#123;</span><br><span class=\"line\">                     byte[] toTemp = new byte[temp.length + i - start];</span><br><span class=\"line\">                     System.arraycopy(temp, 0, toTemp, 0, temp.length);</span><br><span class=\"line\">                     System.arraycopy(bs, start, toTemp, temp.length, i - start);</span><br><span class=\"line\">                     start = i;</span><br><span class=\"line\">                     temp = new byte[0];</span><br><span class=\"line\">                     str = new String(toTemp);</span><br><span class=\"line\">                     line++;</span><br><span class=\"line\">                     if (line &gt;= 500000) &#123;</span><br><span class=\"line\">                         throw new RuntimeException();</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             //将最后不是一行的字符存起来下一次读取的时候用</span><br><span class=\"line\">             if (start &lt; bs.length - 1) &#123;</span><br><span class=\"line\">                 temp = new byte[bs.length - 1 - start];</span><br><span class=\"line\">                 System.arraycopy(bs, start, temp, 0, bs.length - 1 - start);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         long t2 = System.currentTimeMillis();</span><br><span class=\"line\">         System.out.println(&quot;\\n&quot; + (t2 - t1));</span><br></pre></td></tr></table></figure>\n<p>-Xmx2048m -Xms2048m<br>无论怎么调缓冲区大小,最快是800000时需要两百多秒读完<br>可能是因为得重复将文件映射到内存里</p>\n<p>但是,换了个200m的文件,mappedBuffer 一次读fc.size()时1.7秒 ;一次读10000左右时最快1.5秒<br>bufferredReader.readline():  1.4~1.7秒<br>python 1秒! 偶尔2秒</p>\n<hr>\n<p>###Tips:</p>\n<p>1.python 的 str in list 数据量大时比较慢</p>\n"},{"title":"Mina 为每个session构建filterChain","_content":"\nAbstractPollingIoProcessor里面有个内部类Processer,只要有第一个session过来,\n```\n    /**\n     * Starts the inner Processor, asking the executor to pick a thread in its\n     * pool. The Runnable will be renamed\n     */\n    private void startupProcessor() {\n        Processor processor = processorRef.get();\n\n        if (processor == null) {\n            processor = new Processor();\n\n            if (processorRef.compareAndSet(null, processor)) {\n                executor.execute(new NamePreservingRunnable(processor, threadName));\n            }\n        }\n\n        // Just stop the select() and start it again, so that the processor\n        // can be activated immediately.\n        wakeup();\n    }\n```\n\nProcesser就会执行循环,循环里面有个方法`handleNewSessions() `,一直从newSessions这个Queue<S>中取poll()出session,然后addNow(session)\n```\n /**\n     * Loops over the new sessions blocking queue and returns the number of\n     * sessions which are effectively created\n     * \n     * @return The number of new sessions\n     */\n    private int handleNewSessions() {\n        int addedSessions = 0;\n\n        for (S session = newSessions.poll(); session != null; session = newSessions.poll()) {\n            if (addNow(session)) {\n                // A new session has been created\n                addedSessions++;\n            }\n        }\n\n        return addedSessions;\n    }\n```\n在addNow(S)中,会调用session的`chainBuilder`的`chainBuilder.buildFilterChain(session.getFilterChain());`,最后发送`listeners.fireSessionCreated(session);`事件.\n```\n/**\n     * Process a new session : - initialize it - create its chain - fire the\n     * CREATED listeners if any\n     * \n     * @param session The session to create\n     * @return <tt>true</tt> if the session has been registered\n     */\n    private boolean addNow(S session) {\n        boolean registered = false;\n\n        try {\n            init(session);\n            registered = true;\n\n            // Build the filter chain of this session.\n            IoFilterChainBuilder chainBuilder = session.getService().getFilterChainBuilder();\n            chainBuilder.buildFilterChain(session.getFilterChain());\n\n            // DefaultIoFilterChain.CONNECT_FUTURE is cleared inside here\n            // in AbstractIoFilterChain.fireSessionOpened().\n            // Propagate the SESSION_CREATED event up to the chain\n            IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();\n            listeners.fireSessionCreated(session);\n        } catch (Exception e) {\n            ExceptionMonitor.getInstance().exceptionCaught(e);\n\n            try {\n                destroy(session);\n            } catch (Exception e1) {\n                ExceptionMonitor.getInstance().exceptionCaught(e1);\n            } finally {\n                registered = false;\n            }\n        }\n        return registered;\n    }\n`buildFilterChain`就会遍历最开始\n`acceptor.getFilterChain().addLast(\"protocol\",\n                new ProtocolCodecFilter(new NetCodecFactory()));\n        acceptor.getFilterChain().addLast(\"session\", new SessionFilter());\n        acceptor.getFilterChain().addLast(\"security\", new SecurityFilter());`\n这些方法构建的的`erties`,对session的filterChain进行`addLast`:\n```\npublic void buildFilterChain(IoFilterChain chain) throws Exception {\n        for (Entry e : entries) {\n            chain.addLast(e.getName(), e.getFilter());\n        }\n    }\n```\n`addLast`中,会对每一个entry进行注册,\n```\npublic synchronized void addLast(String name, IoFilter filter) {\n        checkAddable(name);\n        register(tail.prevEntry, name, filter);\n    }\n```\n这里的entry就是在之前的addLast里创建的\n```\n/**\n     * @see IoFilterChain#addLast(String, IoFilter)\n     * \n     * @param name The filter's name\n     * @param filter The filter to add\n     */\n    public synchronized void addLast(String name, IoFilter filter) {\n        register(entries.size(), new EntryImpl(name, filter));\n    }\n```\n此处的EntryImpl只需要用到name和filter\n```\nprivate final class EntryImpl implements Entry {\n        private final String name;\n\n        private volatile IoFilter filter;\n\n        private EntryImpl(String name, IoFilter filter) {\n            if (name == null) {\n                throw new IllegalArgumentException(\"name\");\n            }\n            \n            if (filter == null) {\n                throw new IllegalArgumentException(\"filter\");\n            }\n\n            this.name = name;\n            this.filter = filter;\n        }\n```\n接上面的buildFilterChain的addLast,这里才是构建真正的filterChain,里面的entry有完整的preEntry、nextEntry、filter、nextFilter等属性.\n```\n /**\n     * Register the newly added filter, inserting it between the previous and\n     * the next filter in the filter's chain. We also call the preAdd and\n     * postAdd methods.\n     */\n    private void register(EntryImpl prevEntry, String name, IoFilter filter) {\n        EntryImpl newEntry = new EntryImpl(prevEntry, prevEntry.nextEntry, name, filter);\n\n        try {\n            filter.onPreAdd(this, name, newEntry.getNextFilter());\n        } catch (Exception e) {\n            throw new IoFilterLifeCycleException(\"onPreAdd(): \" + name + ':' + filter + \" in \" + getSession(), e);\n        }\n\n        prevEntry.nextEntry.prevEntry = newEntry;\n        prevEntry.nextEntry = newEntry;\n        name2entry.put(name, newEntry);\n\n        try {\n            filter.onPostAdd(this, name, newEntry.getNextFilter());\n        } catch (Exception e) {\n            deregister0(newEntry);\n            throw new IoFilterLifeCycleException(\"onPostAdd(): \" + name + ':' + filter + \" in \" + getSession(), e);\n        }\n    }\n```\n这里先跟更具filter和name,先new一个新的`EntryImpl`,插入到`tail`的前面.EntryImpl源码如下:\n```\nprivate final class EntryImpl implements Entry {\n        private EntryImpl prevEntry;\n\n        private EntryImpl nextEntry;\n\n        private final String name;\n\n        private IoFilter filter;\n\n        private final NextFilter nextFilter;\n\n        private EntryImpl(EntryImpl prevEntry, EntryImpl nextEntry, String name, IoFilter filter) {\n            if (filter == null) {\n                throw new IllegalArgumentException(\"filter\");\n            }\n\n            if (name == null) {\n                throw new IllegalArgumentException(\"name\");\n            }\n\n            this.prevEntry = prevEntry;\n            this.nextEntry = nextEntry;\n            this.name = name;\n            this.filter = filter;\n            this.nextFilter = new NextFilter() {\n                public void sessionCreated(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionCreated(nextEntry, session);\n                }\n\n                public void sessionOpened(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionOpened(nextEntry, session);\n                }\n\n                public void sessionClosed(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionClosed(nextEntry, session);\n                }\n\n                public void sessionIdle(IoSession session, IdleStatus status) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionIdle(nextEntry, session, status);\n                }\n\n                public void exceptionCaught(IoSession session, Throwable cause) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextExceptionCaught(nextEntry, session, cause);\n                }\n\n                public void inputClosed(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextInputClosed(nextEntry, session);\n                }\n\n                public void messageReceived(IoSession session, Object message) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextMessageReceived(nextEntry, session, message);\n                }\n\n                public void messageSent(IoSession session, WriteRequest writeRequest) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextMessageSent(nextEntry, session, writeRequest);\n                }\n\n                public void filterWrite(IoSession session, WriteRequest writeRequest) {\n                    Entry nextEntry = EntryImpl.this.prevEntry;\n                    callPreviousFilterWrite(nextEntry, session, writeRequest);\n                }\n\n                public void filterClose(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.prevEntry;\n                    callPreviousFilterClose(nextEntry, session);\n                }\n\n                public String toString() {\n                    return EntryImpl.this.nextEntry.name;\n                }\n            };\n        }\n```\n最终,一个双向链表构建完成了,一般事件从head到tail,`filterClose`和`filterWrite`是从tail到head.\n","source":"_posts/Mina 为每个session构建filterChain.md","raw":"---\ntitle: Mina 为每个session构建filterChain\ncategories :\n- 技术\ntags :\n- Java\n- mina\n---\n\nAbstractPollingIoProcessor里面有个内部类Processer,只要有第一个session过来,\n```\n    /**\n     * Starts the inner Processor, asking the executor to pick a thread in its\n     * pool. The Runnable will be renamed\n     */\n    private void startupProcessor() {\n        Processor processor = processorRef.get();\n\n        if (processor == null) {\n            processor = new Processor();\n\n            if (processorRef.compareAndSet(null, processor)) {\n                executor.execute(new NamePreservingRunnable(processor, threadName));\n            }\n        }\n\n        // Just stop the select() and start it again, so that the processor\n        // can be activated immediately.\n        wakeup();\n    }\n```\n\nProcesser就会执行循环,循环里面有个方法`handleNewSessions() `,一直从newSessions这个Queue<S>中取poll()出session,然后addNow(session)\n```\n /**\n     * Loops over the new sessions blocking queue and returns the number of\n     * sessions which are effectively created\n     * \n     * @return The number of new sessions\n     */\n    private int handleNewSessions() {\n        int addedSessions = 0;\n\n        for (S session = newSessions.poll(); session != null; session = newSessions.poll()) {\n            if (addNow(session)) {\n                // A new session has been created\n                addedSessions++;\n            }\n        }\n\n        return addedSessions;\n    }\n```\n在addNow(S)中,会调用session的`chainBuilder`的`chainBuilder.buildFilterChain(session.getFilterChain());`,最后发送`listeners.fireSessionCreated(session);`事件.\n```\n/**\n     * Process a new session : - initialize it - create its chain - fire the\n     * CREATED listeners if any\n     * \n     * @param session The session to create\n     * @return <tt>true</tt> if the session has been registered\n     */\n    private boolean addNow(S session) {\n        boolean registered = false;\n\n        try {\n            init(session);\n            registered = true;\n\n            // Build the filter chain of this session.\n            IoFilterChainBuilder chainBuilder = session.getService().getFilterChainBuilder();\n            chainBuilder.buildFilterChain(session.getFilterChain());\n\n            // DefaultIoFilterChain.CONNECT_FUTURE is cleared inside here\n            // in AbstractIoFilterChain.fireSessionOpened().\n            // Propagate the SESSION_CREATED event up to the chain\n            IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();\n            listeners.fireSessionCreated(session);\n        } catch (Exception e) {\n            ExceptionMonitor.getInstance().exceptionCaught(e);\n\n            try {\n                destroy(session);\n            } catch (Exception e1) {\n                ExceptionMonitor.getInstance().exceptionCaught(e1);\n            } finally {\n                registered = false;\n            }\n        }\n        return registered;\n    }\n`buildFilterChain`就会遍历最开始\n`acceptor.getFilterChain().addLast(\"protocol\",\n                new ProtocolCodecFilter(new NetCodecFactory()));\n        acceptor.getFilterChain().addLast(\"session\", new SessionFilter());\n        acceptor.getFilterChain().addLast(\"security\", new SecurityFilter());`\n这些方法构建的的`erties`,对session的filterChain进行`addLast`:\n```\npublic void buildFilterChain(IoFilterChain chain) throws Exception {\n        for (Entry e : entries) {\n            chain.addLast(e.getName(), e.getFilter());\n        }\n    }\n```\n`addLast`中,会对每一个entry进行注册,\n```\npublic synchronized void addLast(String name, IoFilter filter) {\n        checkAddable(name);\n        register(tail.prevEntry, name, filter);\n    }\n```\n这里的entry就是在之前的addLast里创建的\n```\n/**\n     * @see IoFilterChain#addLast(String, IoFilter)\n     * \n     * @param name The filter's name\n     * @param filter The filter to add\n     */\n    public synchronized void addLast(String name, IoFilter filter) {\n        register(entries.size(), new EntryImpl(name, filter));\n    }\n```\n此处的EntryImpl只需要用到name和filter\n```\nprivate final class EntryImpl implements Entry {\n        private final String name;\n\n        private volatile IoFilter filter;\n\n        private EntryImpl(String name, IoFilter filter) {\n            if (name == null) {\n                throw new IllegalArgumentException(\"name\");\n            }\n            \n            if (filter == null) {\n                throw new IllegalArgumentException(\"filter\");\n            }\n\n            this.name = name;\n            this.filter = filter;\n        }\n```\n接上面的buildFilterChain的addLast,这里才是构建真正的filterChain,里面的entry有完整的preEntry、nextEntry、filter、nextFilter等属性.\n```\n /**\n     * Register the newly added filter, inserting it between the previous and\n     * the next filter in the filter's chain. We also call the preAdd and\n     * postAdd methods.\n     */\n    private void register(EntryImpl prevEntry, String name, IoFilter filter) {\n        EntryImpl newEntry = new EntryImpl(prevEntry, prevEntry.nextEntry, name, filter);\n\n        try {\n            filter.onPreAdd(this, name, newEntry.getNextFilter());\n        } catch (Exception e) {\n            throw new IoFilterLifeCycleException(\"onPreAdd(): \" + name + ':' + filter + \" in \" + getSession(), e);\n        }\n\n        prevEntry.nextEntry.prevEntry = newEntry;\n        prevEntry.nextEntry = newEntry;\n        name2entry.put(name, newEntry);\n\n        try {\n            filter.onPostAdd(this, name, newEntry.getNextFilter());\n        } catch (Exception e) {\n            deregister0(newEntry);\n            throw new IoFilterLifeCycleException(\"onPostAdd(): \" + name + ':' + filter + \" in \" + getSession(), e);\n        }\n    }\n```\n这里先跟更具filter和name,先new一个新的`EntryImpl`,插入到`tail`的前面.EntryImpl源码如下:\n```\nprivate final class EntryImpl implements Entry {\n        private EntryImpl prevEntry;\n\n        private EntryImpl nextEntry;\n\n        private final String name;\n\n        private IoFilter filter;\n\n        private final NextFilter nextFilter;\n\n        private EntryImpl(EntryImpl prevEntry, EntryImpl nextEntry, String name, IoFilter filter) {\n            if (filter == null) {\n                throw new IllegalArgumentException(\"filter\");\n            }\n\n            if (name == null) {\n                throw new IllegalArgumentException(\"name\");\n            }\n\n            this.prevEntry = prevEntry;\n            this.nextEntry = nextEntry;\n            this.name = name;\n            this.filter = filter;\n            this.nextFilter = new NextFilter() {\n                public void sessionCreated(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionCreated(nextEntry, session);\n                }\n\n                public void sessionOpened(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionOpened(nextEntry, session);\n                }\n\n                public void sessionClosed(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionClosed(nextEntry, session);\n                }\n\n                public void sessionIdle(IoSession session, IdleStatus status) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextSessionIdle(nextEntry, session, status);\n                }\n\n                public void exceptionCaught(IoSession session, Throwable cause) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextExceptionCaught(nextEntry, session, cause);\n                }\n\n                public void inputClosed(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextInputClosed(nextEntry, session);\n                }\n\n                public void messageReceived(IoSession session, Object message) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextMessageReceived(nextEntry, session, message);\n                }\n\n                public void messageSent(IoSession session, WriteRequest writeRequest) {\n                    Entry nextEntry = EntryImpl.this.nextEntry;\n                    callNextMessageSent(nextEntry, session, writeRequest);\n                }\n\n                public void filterWrite(IoSession session, WriteRequest writeRequest) {\n                    Entry nextEntry = EntryImpl.this.prevEntry;\n                    callPreviousFilterWrite(nextEntry, session, writeRequest);\n                }\n\n                public void filterClose(IoSession session) {\n                    Entry nextEntry = EntryImpl.this.prevEntry;\n                    callPreviousFilterClose(nextEntry, session);\n                }\n\n                public String toString() {\n                    return EntryImpl.this.nextEntry.name;\n                }\n            };\n        }\n```\n最终,一个双向链表构建完成了,一般事件从head到tail,`filterClose`和`filterWrite`是从tail到head.\n","slug":"Mina 为每个session构建filterChain","published":1,"date":"2019-05-21T03:23:24.227Z","updated":"2019-05-21T03:23:24.227Z","_id":"cjvx7vbvg0074m74zr6tb3ed6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>AbstractPollingIoProcessor里面有个内部类Processer,只要有第一个session过来,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Starts the inner Processor, asking the executor to pick a thread in its</span><br><span class=\"line\"> * pool. The Runnable will be renamed</span><br><span class=\"line\"> */</span><br><span class=\"line\">private void startupProcessor() &#123;</span><br><span class=\"line\">    Processor processor = processorRef.get();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (processor == null) &#123;</span><br><span class=\"line\">        processor = new Processor();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (processorRef.compareAndSet(null, processor)) &#123;</span><br><span class=\"line\">            executor.execute(new NamePreservingRunnable(processor, threadName));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Just stop the select() and start it again, so that the processor</span><br><span class=\"line\">    // can be activated immediately.</span><br><span class=\"line\">    wakeup();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Processer就会执行循环,循环里面有个方法<code>handleNewSessions()</code>,一直从newSessions这个Queue<s>中取poll()出session,然后addNow(session)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * Loops over the new sessions blocking queue and returns the number of</span><br><span class=\"line\">    * sessions which are effectively created</span><br><span class=\"line\">    * </span><br><span class=\"line\">    * @return The number of new sessions</span><br><span class=\"line\">    */</span><br><span class=\"line\">   private int handleNewSessions() &#123;</span><br><span class=\"line\">       int addedSessions = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">       for (S session = newSessions.poll(); session != null; session = newSessions.poll()) &#123;</span><br><span class=\"line\">           if (addNow(session)) &#123;</span><br><span class=\"line\">               // A new session has been created</span><br><span class=\"line\">               addedSessions++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       return addedSessions;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></s></p>\n<p>在addNow(S)中,会调用session的<code>chainBuilder</code>的<code>chainBuilder.buildFilterChain(session.getFilterChain());</code>,最后发送<code>listeners.fireSessionCreated(session);</code>事件.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * Process a new session : - initialize it - create its chain - fire the</span><br><span class=\"line\">     * CREATED listeners if any</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param session The session to create</span><br><span class=\"line\">     * @return &lt;tt&gt;true&lt;/tt&gt; if the session has been registered</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private boolean addNow(S session) &#123;</span><br><span class=\"line\">        boolean registered = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            init(session);</span><br><span class=\"line\">            registered = true;</span><br><span class=\"line\"></span><br><span class=\"line\">            // Build the filter chain of this session.</span><br><span class=\"line\">            IoFilterChainBuilder chainBuilder = session.getService().getFilterChainBuilder();</span><br><span class=\"line\">            chainBuilder.buildFilterChain(session.getFilterChain());</span><br><span class=\"line\"></span><br><span class=\"line\">            // DefaultIoFilterChain.CONNECT_FUTURE is cleared inside here</span><br><span class=\"line\">            // in AbstractIoFilterChain.fireSessionOpened().</span><br><span class=\"line\">            // Propagate the SESSION_CREATED event up to the chain</span><br><span class=\"line\">            IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();</span><br><span class=\"line\">            listeners.fireSessionCreated(session);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            ExceptionMonitor.getInstance().exceptionCaught(e);</span><br><span class=\"line\"></span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                destroy(session);</span><br><span class=\"line\">            &#125; catch (Exception e1) &#123;</span><br><span class=\"line\">                ExceptionMonitor.getInstance().exceptionCaught(e1);</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                registered = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return registered;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">`buildFilterChain`就会遍历最开始</span><br><span class=\"line\">`acceptor.getFilterChain().addLast(&quot;protocol&quot;,</span><br><span class=\"line\">                new ProtocolCodecFilter(new NetCodecFactory()));</span><br><span class=\"line\">        acceptor.getFilterChain().addLast(&quot;session&quot;, new SessionFilter());</span><br><span class=\"line\">        acceptor.getFilterChain().addLast(&quot;security&quot;, new SecurityFilter());`</span><br><span class=\"line\">这些方法构建的的`erties`,对session的filterChain进行`addLast`:</span><br></pre></td></tr></table></figure></p>\n<p>public void buildFilterChain(IoFilterChain chain) throws Exception {<br>        for (Entry e : entries) {<br>            chain.addLast(e.getName(), e.getFilter());<br>        }<br>    }<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`addLast`中,会对每一个entry进行注册,</span><br></pre></td></tr></table></figure></p>\n<p>public synchronized void addLast(String name, IoFilter filter) {<br>        checkAddable(name);<br>        register(tail.prevEntry, name, filter);<br>    }<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里的entry就是在之前的addLast里创建的</span><br></pre></td></tr></table></figure></p>\n<p>/**</p>\n<pre><code> * @see IoFilterChain#addLast(String, IoFilter)\n * \n * @param name The filter&apos;s name\n * @param filter The filter to add\n */\npublic synchronized void addLast(String name, IoFilter filter) {\n    register(entries.size(), new EntryImpl(name, filter));\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处的EntryImpl只需要用到name和filter</span><br></pre></td></tr></table></figure>\n<p>private final class EntryImpl implements Entry {<br>        private final String name;</p>\n<pre><code>private volatile IoFilter filter;\n\nprivate EntryImpl(String name, IoFilter filter) {\n    if (name == null) {\n        throw new IllegalArgumentException(&quot;name&quot;);\n    }\n\n    if (filter == null) {\n        throw new IllegalArgumentException(&quot;filter&quot;);\n    }\n\n    this.name = name;\n    this.filter = filter;\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接上面的buildFilterChain的addLast,这里才是构建真正的filterChain,里面的entry有完整的preEntry、nextEntry、filter、nextFilter等属性.</span><br></pre></td></tr></table></figure>\n<p> /**</p>\n<pre><code> * Register the newly added filter, inserting it between the previous and\n * the next filter in the filter&apos;s chain. We also call the preAdd and\n * postAdd methods.\n */\nprivate void register(EntryImpl prevEntry, String name, IoFilter filter) {\n    EntryImpl newEntry = new EntryImpl(prevEntry, prevEntry.nextEntry, name, filter);\n\n    try {\n        filter.onPreAdd(this, name, newEntry.getNextFilter());\n    } catch (Exception e) {\n        throw new IoFilterLifeCycleException(&quot;onPreAdd(): &quot; + name + &apos;:&apos; + filter + &quot; in &quot; + getSession(), e);\n    }\n\n    prevEntry.nextEntry.prevEntry = newEntry;\n    prevEntry.nextEntry = newEntry;\n    name2entry.put(name, newEntry);\n\n    try {\n        filter.onPostAdd(this, name, newEntry.getNextFilter());\n    } catch (Exception e) {\n        deregister0(newEntry);\n        throw new IoFilterLifeCycleException(&quot;onPostAdd(): &quot; + name + &apos;:&apos; + filter + &quot; in &quot; + getSession(), e);\n    }\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里先跟更具filter和name,先new一个新的`EntryImpl`,插入到`tail`的前面.EntryImpl源码如下:</span><br></pre></td></tr></table></figure>\n<p>private final class EntryImpl implements Entry {<br>        private EntryImpl prevEntry;</p>\n<pre><code>private EntryImpl nextEntry;\n\nprivate final String name;\n\nprivate IoFilter filter;\n\nprivate final NextFilter nextFilter;\n\nprivate EntryImpl(EntryImpl prevEntry, EntryImpl nextEntry, String name, IoFilter filter) {\n    if (filter == null) {\n        throw new IllegalArgumentException(&quot;filter&quot;);\n    }\n\n    if (name == null) {\n        throw new IllegalArgumentException(&quot;name&quot;);\n    }\n\n    this.prevEntry = prevEntry;\n    this.nextEntry = nextEntry;\n    this.name = name;\n    this.filter = filter;\n    this.nextFilter = new NextFilter() {\n        public void sessionCreated(IoSession session) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextSessionCreated(nextEntry, session);\n        }\n\n        public void sessionOpened(IoSession session) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextSessionOpened(nextEntry, session);\n        }\n\n        public void sessionClosed(IoSession session) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextSessionClosed(nextEntry, session);\n        }\n\n        public void sessionIdle(IoSession session, IdleStatus status) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextSessionIdle(nextEntry, session, status);\n        }\n\n        public void exceptionCaught(IoSession session, Throwable cause) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextExceptionCaught(nextEntry, session, cause);\n        }\n\n        public void inputClosed(IoSession session) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextInputClosed(nextEntry, session);\n        }\n\n        public void messageReceived(IoSession session, Object message) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextMessageReceived(nextEntry, session, message);\n        }\n\n        public void messageSent(IoSession session, WriteRequest writeRequest) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextMessageSent(nextEntry, session, writeRequest);\n        }\n\n        public void filterWrite(IoSession session, WriteRequest writeRequest) {\n            Entry nextEntry = EntryImpl.this.prevEntry;\n            callPreviousFilterWrite(nextEntry, session, writeRequest);\n        }\n\n        public void filterClose(IoSession session) {\n            Entry nextEntry = EntryImpl.this.prevEntry;\n            callPreviousFilterClose(nextEntry, session);\n        }\n\n        public String toString() {\n            return EntryImpl.this.nextEntry.name;\n        }\n    };\n}\n</code></pre><p><code>`</code><br>最终,一个双向链表构建完成了,一般事件从head到tail,<code>filterClose</code>和<code>filterWrite</code>是从tail到head.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>AbstractPollingIoProcessor里面有个内部类Processer,只要有第一个session过来,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Starts the inner Processor, asking the executor to pick a thread in its</span><br><span class=\"line\"> * pool. The Runnable will be renamed</span><br><span class=\"line\"> */</span><br><span class=\"line\">private void startupProcessor() &#123;</span><br><span class=\"line\">    Processor processor = processorRef.get();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (processor == null) &#123;</span><br><span class=\"line\">        processor = new Processor();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (processorRef.compareAndSet(null, processor)) &#123;</span><br><span class=\"line\">            executor.execute(new NamePreservingRunnable(processor, threadName));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Just stop the select() and start it again, so that the processor</span><br><span class=\"line\">    // can be activated immediately.</span><br><span class=\"line\">    wakeup();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Processer就会执行循环,循环里面有个方法<code>handleNewSessions()</code>,一直从newSessions这个Queue<s>中取poll()出session,然后addNow(session)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * Loops over the new sessions blocking queue and returns the number of</span><br><span class=\"line\">    * sessions which are effectively created</span><br><span class=\"line\">    * </span><br><span class=\"line\">    * @return The number of new sessions</span><br><span class=\"line\">    */</span><br><span class=\"line\">   private int handleNewSessions() &#123;</span><br><span class=\"line\">       int addedSessions = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">       for (S session = newSessions.poll(); session != null; session = newSessions.poll()) &#123;</span><br><span class=\"line\">           if (addNow(session)) &#123;</span><br><span class=\"line\">               // A new session has been created</span><br><span class=\"line\">               addedSessions++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       return addedSessions;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></s></p>\n<p>在addNow(S)中,会调用session的<code>chainBuilder</code>的<code>chainBuilder.buildFilterChain(session.getFilterChain());</code>,最后发送<code>listeners.fireSessionCreated(session);</code>事件.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * Process a new session : - initialize it - create its chain - fire the</span><br><span class=\"line\">     * CREATED listeners if any</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param session The session to create</span><br><span class=\"line\">     * @return &lt;tt&gt;true&lt;/tt&gt; if the session has been registered</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private boolean addNow(S session) &#123;</span><br><span class=\"line\">        boolean registered = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            init(session);</span><br><span class=\"line\">            registered = true;</span><br><span class=\"line\"></span><br><span class=\"line\">            // Build the filter chain of this session.</span><br><span class=\"line\">            IoFilterChainBuilder chainBuilder = session.getService().getFilterChainBuilder();</span><br><span class=\"line\">            chainBuilder.buildFilterChain(session.getFilterChain());</span><br><span class=\"line\"></span><br><span class=\"line\">            // DefaultIoFilterChain.CONNECT_FUTURE is cleared inside here</span><br><span class=\"line\">            // in AbstractIoFilterChain.fireSessionOpened().</span><br><span class=\"line\">            // Propagate the SESSION_CREATED event up to the chain</span><br><span class=\"line\">            IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();</span><br><span class=\"line\">            listeners.fireSessionCreated(session);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            ExceptionMonitor.getInstance().exceptionCaught(e);</span><br><span class=\"line\"></span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                destroy(session);</span><br><span class=\"line\">            &#125; catch (Exception e1) &#123;</span><br><span class=\"line\">                ExceptionMonitor.getInstance().exceptionCaught(e1);</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                registered = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return registered;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">`buildFilterChain`就会遍历最开始</span><br><span class=\"line\">`acceptor.getFilterChain().addLast(&quot;protocol&quot;,</span><br><span class=\"line\">                new ProtocolCodecFilter(new NetCodecFactory()));</span><br><span class=\"line\">        acceptor.getFilterChain().addLast(&quot;session&quot;, new SessionFilter());</span><br><span class=\"line\">        acceptor.getFilterChain().addLast(&quot;security&quot;, new SecurityFilter());`</span><br><span class=\"line\">这些方法构建的的`erties`,对session的filterChain进行`addLast`:</span><br></pre></td></tr></table></figure></p>\n<p>public void buildFilterChain(IoFilterChain chain) throws Exception {<br>        for (Entry e : entries) {<br>            chain.addLast(e.getName(), e.getFilter());<br>        }<br>    }<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`addLast`中,会对每一个entry进行注册,</span><br></pre></td></tr></table></figure></p>\n<p>public synchronized void addLast(String name, IoFilter filter) {<br>        checkAddable(name);<br>        register(tail.prevEntry, name, filter);<br>    }<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里的entry就是在之前的addLast里创建的</span><br></pre></td></tr></table></figure></p>\n<p>/**</p>\n<pre><code> * @see IoFilterChain#addLast(String, IoFilter)\n * \n * @param name The filter&apos;s name\n * @param filter The filter to add\n */\npublic synchronized void addLast(String name, IoFilter filter) {\n    register(entries.size(), new EntryImpl(name, filter));\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处的EntryImpl只需要用到name和filter</span><br></pre></td></tr></table></figure>\n<p>private final class EntryImpl implements Entry {<br>        private final String name;</p>\n<pre><code>private volatile IoFilter filter;\n\nprivate EntryImpl(String name, IoFilter filter) {\n    if (name == null) {\n        throw new IllegalArgumentException(&quot;name&quot;);\n    }\n\n    if (filter == null) {\n        throw new IllegalArgumentException(&quot;filter&quot;);\n    }\n\n    this.name = name;\n    this.filter = filter;\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接上面的buildFilterChain的addLast,这里才是构建真正的filterChain,里面的entry有完整的preEntry、nextEntry、filter、nextFilter等属性.</span><br></pre></td></tr></table></figure>\n<p> /**</p>\n<pre><code> * Register the newly added filter, inserting it between the previous and\n * the next filter in the filter&apos;s chain. We also call the preAdd and\n * postAdd methods.\n */\nprivate void register(EntryImpl prevEntry, String name, IoFilter filter) {\n    EntryImpl newEntry = new EntryImpl(prevEntry, prevEntry.nextEntry, name, filter);\n\n    try {\n        filter.onPreAdd(this, name, newEntry.getNextFilter());\n    } catch (Exception e) {\n        throw new IoFilterLifeCycleException(&quot;onPreAdd(): &quot; + name + &apos;:&apos; + filter + &quot; in &quot; + getSession(), e);\n    }\n\n    prevEntry.nextEntry.prevEntry = newEntry;\n    prevEntry.nextEntry = newEntry;\n    name2entry.put(name, newEntry);\n\n    try {\n        filter.onPostAdd(this, name, newEntry.getNextFilter());\n    } catch (Exception e) {\n        deregister0(newEntry);\n        throw new IoFilterLifeCycleException(&quot;onPostAdd(): &quot; + name + &apos;:&apos; + filter + &quot; in &quot; + getSession(), e);\n    }\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里先跟更具filter和name,先new一个新的`EntryImpl`,插入到`tail`的前面.EntryImpl源码如下:</span><br></pre></td></tr></table></figure>\n<p>private final class EntryImpl implements Entry {<br>        private EntryImpl prevEntry;</p>\n<pre><code>private EntryImpl nextEntry;\n\nprivate final String name;\n\nprivate IoFilter filter;\n\nprivate final NextFilter nextFilter;\n\nprivate EntryImpl(EntryImpl prevEntry, EntryImpl nextEntry, String name, IoFilter filter) {\n    if (filter == null) {\n        throw new IllegalArgumentException(&quot;filter&quot;);\n    }\n\n    if (name == null) {\n        throw new IllegalArgumentException(&quot;name&quot;);\n    }\n\n    this.prevEntry = prevEntry;\n    this.nextEntry = nextEntry;\n    this.name = name;\n    this.filter = filter;\n    this.nextFilter = new NextFilter() {\n        public void sessionCreated(IoSession session) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextSessionCreated(nextEntry, session);\n        }\n\n        public void sessionOpened(IoSession session) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextSessionOpened(nextEntry, session);\n        }\n\n        public void sessionClosed(IoSession session) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextSessionClosed(nextEntry, session);\n        }\n\n        public void sessionIdle(IoSession session, IdleStatus status) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextSessionIdle(nextEntry, session, status);\n        }\n\n        public void exceptionCaught(IoSession session, Throwable cause) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextExceptionCaught(nextEntry, session, cause);\n        }\n\n        public void inputClosed(IoSession session) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextInputClosed(nextEntry, session);\n        }\n\n        public void messageReceived(IoSession session, Object message) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextMessageReceived(nextEntry, session, message);\n        }\n\n        public void messageSent(IoSession session, WriteRequest writeRequest) {\n            Entry nextEntry = EntryImpl.this.nextEntry;\n            callNextMessageSent(nextEntry, session, writeRequest);\n        }\n\n        public void filterWrite(IoSession session, WriteRequest writeRequest) {\n            Entry nextEntry = EntryImpl.this.prevEntry;\n            callPreviousFilterWrite(nextEntry, session, writeRequest);\n        }\n\n        public void filterClose(IoSession session) {\n            Entry nextEntry = EntryImpl.this.prevEntry;\n            callPreviousFilterClose(nextEntry, session);\n        }\n\n        public String toString() {\n            return EntryImpl.this.nextEntry.name;\n        }\n    };\n}\n</code></pre><p><code>`</code><br>最终,一个双向链表构建完成了,一般事件从head到tail,<code>filterClose</code>和<code>filterWrite</code>是从tail到head.</p>\n"},{"title":"PowerMock","_content":"\n###1.为什么要用mock\n在做单元测试的时候，我们会发现我们要测试的方法会引用很多外部依赖的对象，比如：（发送邮件，网络通讯，远程服务, 文件系统等等）。 而我们没法控制这些外部依赖的对象，为了解决这个问题，我们就需要用到Mock工具来模拟这些外部依赖的对象，来完成单元测试。\n例如策划表没有配完,需要在调用如`RewardConfigHelper.getAndRewardPlayer()`这样的方法时不报错,模拟返回一个rewardList,就可以用mock.\n###2.PowerMock\n&nbsp;&nbsp;&nbsp;&nbsp;现如今比较流行的Mock工具如EasyMock、Mockito等都有一个共同的缺点：不能mock静态、final、私有方法等。而PowerMock能够完美的弥补以上三个Mock工具的不足。\n&nbsp;&nbsp;&nbsp;&nbsp;<b>PowerMock是一个扩展了其它如EasyMock等mock框架的、功能更加强大的框架。PowerMock使用一个自定义类加载器和字节码操作来模拟静态方法，构造函数，final类和方法，私有方法，去除静态初始化器等等。通过使用自定义的类加载器，简化采用的IDE或持续集成服务器不需要做任何改变。熟悉PowerMock支持的mock框架的开发人员会发现PowerMock很容易使用，因为对于静态方法和构造器来说，整个的期望API是一样的。PowerMock旨在用少量的方法和注解扩展现有的API来实现额外的功能。目前PowerMock支持EasyMock和Mockito。</b>\n###3.使用\nPowerMock有两个重要的注解：\n\n      –@RunWith(PowerMockRunner.class)\n\n      –@PrepareForTest( { YourClassWithEgStaticMethod.class })\n\n      如果你的测试用例里没有使用注解@PrepareForTest，那么可以不用加注解@RunWith(PowerMockRunner.class)，反之亦然。当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解@PrepareForTest。\n###3.原理\n       •  当某个测试方法被注解@PrepareForTest标注以后，在运行测试用例时，会创建一个新的org.powermock.core.classloader.MockClassLoader实例，然后加载该测试用例使用到的类（系统类除外）。\n\n       •   PowerMock会根据你的mock要求，去修改写在注解@PrepareForTest里的class文件（当前测试类会自动加入注解中），以满足特殊的mock需求。例如：去除final方法的final标识，在静态方法的最前面加入自己的虚拟实现等。\n\n       •   如果需要mock的是系统类的final方法和静态方法，PowerMock不会直接修改系统类的class文件，而是修改调用系统类的class文件，以满足mock需求。\n       \n###4.Maven依赖\n```\n<dependency> \n<groupId>org.powermock</groupId> \n<artifactId>powermock-api-mockito</artifactId> \n<version>1.6.1</version> \n<scope>test</scope> \n</dependency> \n\n<dependency> \n<groupId>org.powermock</groupId> \n<artifactId>powermock-module-junit4</artifactId> \n<version>1.6.1</version> \n<scope>test</scope> \n</dependency> \n```\n  \n\n###5.示例\n```\n @Test\n    @PrepareForTest(RewardConfigHelper.class)\n    public void testSettFrag() {\n        mockStatic(RewardConfigHelper.class);\n        List<RewardObject> rewardList = Lists.newArrayList();\n        rewardList.add(new RewardObject());\n        when(RewardConfigHelper.getAndRewardPlayer(any(Player.class), anyString(), anyInt(),\n                eq(AddEnum.SELL_HERO_FRAG), eq(\"\"))).thenReturn(rewardList);\n        JSONObject param = new JSONObject();\n        JSONObject frags = new JSONObject();\n        String fragId = \"it_220006\";\n        pr.getItemBag().addItem(pr, fragId, 3, AddEnum.TEST, \"\");\n        frags.put(fragId, 3);\n        param.put(\"frags\", frags);\n        JSONObject ret = (JSONObject) heroHandler.sellHeroFrag(pr, param);\n        List<RewardObject> rewardObjects = (List<RewardObject>) ret.get(\"rewards\");\n        Assert.assertEquals(1, rewardObjects.size());\n    }\n```\n\n\n###6.报错\n```\njava.lang.NoSuchMethodError: org.mockito.internal.handler.MockHandlerFactory.createMockHandler(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;\n\n\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.createMethodInvocationControl(DefaultMockCreator.java:114)\n\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.createMock(DefaultMockCreator.java:69)\n\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.mock(DefaultMockCreator.java:46)\n\tat org.powermock.api.mockito.PowerMockito.mock(PowerMockito.java:138)\n\tat com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:61)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.internal.runners.TestMethod.invoke(TestMethod.java:68)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:326)\n\tat org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:88)\n\tat org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:96)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:310)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTestInSuper(PowerMockJUnit47RunnerDelegateImpl.java:131)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.access$100(PowerMockJUnit47RunnerDelegateImpl.java:59)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner$TestExecutorStatement.evaluate(PowerMockJUnit47RunnerDelegateImpl.java:147)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.evaluateStatement(PowerMockJUnit47RunnerDelegateImpl.java:107)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTest(PowerMockJUnit47RunnerDelegateImpl.java:82)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters(PowerMockJUnit44RunnerDelegateImpl.java:298)\n\tat org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:86)\n\tat org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:49)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:218)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:160)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run(PowerMockJUnit44RunnerDelegateImpl.java:134)\n\tat org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:33)\n\tat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:45)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136)\n\tat org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:121)\n\tat org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57)\n\tat org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n```\n是由于mockito版本为2.19.1\npowermock版本1.7.4\n需要提高powermock版本到2.0以上\n```\nhttps://github.com/mockito/mockito/issues/1207\n@mockitoguy\n Member\nmockitoguy commented on 15 Oct 2017\nSorry for the issue!\n\nPlease report it to PowerMock tracker. Mockito team does not support PowerMock integration.\n\nThe only way Mockito team can help Java developers for this use case is by providing comprehensive public API for framework integrations. This way, PowerMock can cleanly integrate with Mockito public API and avoid various method not found errors. We have added new public API in Mockito 2.10.0, now PowerMock needs to release a new version with this API.\n\nHope that helps clarifying the use case!\n```\n\n\n--------\n\n\n\n```\norg.mockito.exceptions.misusing.InvalidUseOfMatchersException: \nInvalid use of argument matchers!\n5 matchers expected, 3 recorded:\n-> at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)\n-> at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)\n-> at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)\n\nThis exception may occur if matchers are combined with raw values:\n    //incorrect:\n    someMethod(anyObject(), \"raw String\");\nWhen using matchers, all arguments have to be provided by matchers.\nFor example:\n    //correct:\n    someMethod(anyObject(), eq(\"String by matcher\"));\n```\n-----\n```\njava.lang.LinkageError: loader constraint violation: loader (instance of org/powermock/core/classloader/MockClassLoader) previously initiated loading for a different type with name \"javax/management/MBeanServer\"\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)\n\tat org.powermock.core.classloader.MockClassLoader.loadUnmockedClass(MockClassLoader.java:262)\n\tat org.powermock.core.classloader.MockClassLoader.loadModifiedClass(MockClassLoader.java:206)\n\tat org.powermock.core.classloader.DeferSupportingClassLoader.loadClass1(DeferSupportingClassLoader.java:89)\n\tat org.powermock.core.classloader.DeferSupportingClassLoader.loadClass(DeferSupportingClassLoader.java:79)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\tat org.apache.commons.pool2.impl.BaseGenericObjectPool.jmxRegister(BaseGenericObjectPool.java:957)\n\tat org.apache.commons.pool2.impl.BaseGenericObjectPool.<init>(BaseGenericObjectPool.java:133)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.<init>(GenericObjectPool.java:107)\n\tat redis.clients.util.Pool.initPool(Pool.java:44)\n\tat redis.clients.util.Pool.<init>(Pool.java:23)\n\tat redis.clients.jedis.JedisPool.<init>(JedisPool.java:185)\n\tat redis.clients.jedis.JedisPool.<init>(JedisPool.java:162)\n\tat redis.clients.jedis.JedisPool.<init>(JedisPool.java:144)\n\tat com.playcrab.cache.redis.RedisInstance.init(RedisInstance.java:48)\n\tat com.playcrab.cache.CacheModule.buildRedis(CacheModule.java:55)\n\tat com.playcrab.cache.CacheModule.init(CacheModule.java:34)\n\tat com.playcrab.common.agent.BaseAgent.init(BaseAgent.java:29)\n\tat com.playcrab.kos.agents.KOSGSAgent.init(KOSGSAgent.java:89)\n\tat com.playcrab.kos.shenpeng.shenpengTestBase.initServer(shenpengTestBase.java:35)\n\tat com.playcrab.kos.shenpeng.HeroHandlerTest.beforeClass(HeroHandlerTest.java:38)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.internal.runners.ClassRoadie.runBefores(ClassRoadie.java:57)\n\tat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136)\n\tat org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:121)\n\tat org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57)\n\tat org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n```\n需要加上`@PowerMockIgnore(\"javax.management.*\")`防止类加载器冲突\n\n-----\n\n\n<b>如果用matcher,所有参数都要用matcher</b>\n```\nwhen(RewardConfigHelper.getAndRewardPlayer(any(Player.class), anyString(), anyInt(),eq(AddEnum.SELL_HERO_FRAG), eq(\"\"))).thenReturn(rewardList);\n```\n\n------\n\n<b>不要忘了\n`@RunWith(PowerMockRunner.class)   `\n和\n`@PrepareForTest(RewardConfigHelper.class)`\n</b>\n\n\n\n参考来源:https://www.cnblogs.com/dengshihuang/p/7903642.html\n","source":"_posts/PowerMock.md","raw":"---\ntitle: PowerMock\ncategories :\n- 技术\ntags :\n- Java\n- Mock\n---\n\n###1.为什么要用mock\n在做单元测试的时候，我们会发现我们要测试的方法会引用很多外部依赖的对象，比如：（发送邮件，网络通讯，远程服务, 文件系统等等）。 而我们没法控制这些外部依赖的对象，为了解决这个问题，我们就需要用到Mock工具来模拟这些外部依赖的对象，来完成单元测试。\n例如策划表没有配完,需要在调用如`RewardConfigHelper.getAndRewardPlayer()`这样的方法时不报错,模拟返回一个rewardList,就可以用mock.\n###2.PowerMock\n&nbsp;&nbsp;&nbsp;&nbsp;现如今比较流行的Mock工具如EasyMock、Mockito等都有一个共同的缺点：不能mock静态、final、私有方法等。而PowerMock能够完美的弥补以上三个Mock工具的不足。\n&nbsp;&nbsp;&nbsp;&nbsp;<b>PowerMock是一个扩展了其它如EasyMock等mock框架的、功能更加强大的框架。PowerMock使用一个自定义类加载器和字节码操作来模拟静态方法，构造函数，final类和方法，私有方法，去除静态初始化器等等。通过使用自定义的类加载器，简化采用的IDE或持续集成服务器不需要做任何改变。熟悉PowerMock支持的mock框架的开发人员会发现PowerMock很容易使用，因为对于静态方法和构造器来说，整个的期望API是一样的。PowerMock旨在用少量的方法和注解扩展现有的API来实现额外的功能。目前PowerMock支持EasyMock和Mockito。</b>\n###3.使用\nPowerMock有两个重要的注解：\n\n      –@RunWith(PowerMockRunner.class)\n\n      –@PrepareForTest( { YourClassWithEgStaticMethod.class })\n\n      如果你的测试用例里没有使用注解@PrepareForTest，那么可以不用加注解@RunWith(PowerMockRunner.class)，反之亦然。当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解@PrepareForTest。\n###3.原理\n       •  当某个测试方法被注解@PrepareForTest标注以后，在运行测试用例时，会创建一个新的org.powermock.core.classloader.MockClassLoader实例，然后加载该测试用例使用到的类（系统类除外）。\n\n       •   PowerMock会根据你的mock要求，去修改写在注解@PrepareForTest里的class文件（当前测试类会自动加入注解中），以满足特殊的mock需求。例如：去除final方法的final标识，在静态方法的最前面加入自己的虚拟实现等。\n\n       •   如果需要mock的是系统类的final方法和静态方法，PowerMock不会直接修改系统类的class文件，而是修改调用系统类的class文件，以满足mock需求。\n       \n###4.Maven依赖\n```\n<dependency> \n<groupId>org.powermock</groupId> \n<artifactId>powermock-api-mockito</artifactId> \n<version>1.6.1</version> \n<scope>test</scope> \n</dependency> \n\n<dependency> \n<groupId>org.powermock</groupId> \n<artifactId>powermock-module-junit4</artifactId> \n<version>1.6.1</version> \n<scope>test</scope> \n</dependency> \n```\n  \n\n###5.示例\n```\n @Test\n    @PrepareForTest(RewardConfigHelper.class)\n    public void testSettFrag() {\n        mockStatic(RewardConfigHelper.class);\n        List<RewardObject> rewardList = Lists.newArrayList();\n        rewardList.add(new RewardObject());\n        when(RewardConfigHelper.getAndRewardPlayer(any(Player.class), anyString(), anyInt(),\n                eq(AddEnum.SELL_HERO_FRAG), eq(\"\"))).thenReturn(rewardList);\n        JSONObject param = new JSONObject();\n        JSONObject frags = new JSONObject();\n        String fragId = \"it_220006\";\n        pr.getItemBag().addItem(pr, fragId, 3, AddEnum.TEST, \"\");\n        frags.put(fragId, 3);\n        param.put(\"frags\", frags);\n        JSONObject ret = (JSONObject) heroHandler.sellHeroFrag(pr, param);\n        List<RewardObject> rewardObjects = (List<RewardObject>) ret.get(\"rewards\");\n        Assert.assertEquals(1, rewardObjects.size());\n    }\n```\n\n\n###6.报错\n```\njava.lang.NoSuchMethodError: org.mockito.internal.handler.MockHandlerFactory.createMockHandler(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;\n\n\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.createMethodInvocationControl(DefaultMockCreator.java:114)\n\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.createMock(DefaultMockCreator.java:69)\n\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.mock(DefaultMockCreator.java:46)\n\tat org.powermock.api.mockito.PowerMockito.mock(PowerMockito.java:138)\n\tat com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:61)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.internal.runners.TestMethod.invoke(TestMethod.java:68)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:326)\n\tat org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:88)\n\tat org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:96)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:310)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTestInSuper(PowerMockJUnit47RunnerDelegateImpl.java:131)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.access$100(PowerMockJUnit47RunnerDelegateImpl.java:59)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner$TestExecutorStatement.evaluate(PowerMockJUnit47RunnerDelegateImpl.java:147)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.evaluateStatement(PowerMockJUnit47RunnerDelegateImpl.java:107)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTest(PowerMockJUnit47RunnerDelegateImpl.java:82)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters(PowerMockJUnit44RunnerDelegateImpl.java:298)\n\tat org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:86)\n\tat org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:49)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:218)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:160)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run(PowerMockJUnit44RunnerDelegateImpl.java:134)\n\tat org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:33)\n\tat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:45)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136)\n\tat org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:121)\n\tat org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57)\n\tat org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n```\n是由于mockito版本为2.19.1\npowermock版本1.7.4\n需要提高powermock版本到2.0以上\n```\nhttps://github.com/mockito/mockito/issues/1207\n@mockitoguy\n Member\nmockitoguy commented on 15 Oct 2017\nSorry for the issue!\n\nPlease report it to PowerMock tracker. Mockito team does not support PowerMock integration.\n\nThe only way Mockito team can help Java developers for this use case is by providing comprehensive public API for framework integrations. This way, PowerMock can cleanly integrate with Mockito public API and avoid various method not found errors. We have added new public API in Mockito 2.10.0, now PowerMock needs to release a new version with this API.\n\nHope that helps clarifying the use case!\n```\n\n\n--------\n\n\n\n```\norg.mockito.exceptions.misusing.InvalidUseOfMatchersException: \nInvalid use of argument matchers!\n5 matchers expected, 3 recorded:\n-> at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)\n-> at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)\n-> at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)\n\nThis exception may occur if matchers are combined with raw values:\n    //incorrect:\n    someMethod(anyObject(), \"raw String\");\nWhen using matchers, all arguments have to be provided by matchers.\nFor example:\n    //correct:\n    someMethod(anyObject(), eq(\"String by matcher\"));\n```\n-----\n```\njava.lang.LinkageError: loader constraint violation: loader (instance of org/powermock/core/classloader/MockClassLoader) previously initiated loading for a different type with name \"javax/management/MBeanServer\"\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)\n\tat org.powermock.core.classloader.MockClassLoader.loadUnmockedClass(MockClassLoader.java:262)\n\tat org.powermock.core.classloader.MockClassLoader.loadModifiedClass(MockClassLoader.java:206)\n\tat org.powermock.core.classloader.DeferSupportingClassLoader.loadClass1(DeferSupportingClassLoader.java:89)\n\tat org.powermock.core.classloader.DeferSupportingClassLoader.loadClass(DeferSupportingClassLoader.java:79)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\tat org.apache.commons.pool2.impl.BaseGenericObjectPool.jmxRegister(BaseGenericObjectPool.java:957)\n\tat org.apache.commons.pool2.impl.BaseGenericObjectPool.<init>(BaseGenericObjectPool.java:133)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.<init>(GenericObjectPool.java:107)\n\tat redis.clients.util.Pool.initPool(Pool.java:44)\n\tat redis.clients.util.Pool.<init>(Pool.java:23)\n\tat redis.clients.jedis.JedisPool.<init>(JedisPool.java:185)\n\tat redis.clients.jedis.JedisPool.<init>(JedisPool.java:162)\n\tat redis.clients.jedis.JedisPool.<init>(JedisPool.java:144)\n\tat com.playcrab.cache.redis.RedisInstance.init(RedisInstance.java:48)\n\tat com.playcrab.cache.CacheModule.buildRedis(CacheModule.java:55)\n\tat com.playcrab.cache.CacheModule.init(CacheModule.java:34)\n\tat com.playcrab.common.agent.BaseAgent.init(BaseAgent.java:29)\n\tat com.playcrab.kos.agents.KOSGSAgent.init(KOSGSAgent.java:89)\n\tat com.playcrab.kos.shenpeng.shenpengTestBase.initServer(shenpengTestBase.java:35)\n\tat com.playcrab.kos.shenpeng.HeroHandlerTest.beforeClass(HeroHandlerTest.java:38)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.internal.runners.ClassRoadie.runBefores(ClassRoadie.java:57)\n\tat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136)\n\tat org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:121)\n\tat org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57)\n\tat org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n```\n需要加上`@PowerMockIgnore(\"javax.management.*\")`防止类加载器冲突\n\n-----\n\n\n<b>如果用matcher,所有参数都要用matcher</b>\n```\nwhen(RewardConfigHelper.getAndRewardPlayer(any(Player.class), anyString(), anyInt(),eq(AddEnum.SELL_HERO_FRAG), eq(\"\"))).thenReturn(rewardList);\n```\n\n------\n\n<b>不要忘了\n`@RunWith(PowerMockRunner.class)   `\n和\n`@PrepareForTest(RewardConfigHelper.class)`\n</b>\n\n\n\n参考来源:https://www.cnblogs.com/dengshihuang/p/7903642.html\n","slug":"PowerMock","published":1,"date":"2019-05-11T11:33:08.209Z","updated":"2019-05-11T11:33:08.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbvj0076m74zuht6hstv","content":"<p>###1.为什么要用mock<br>在做单元测试的时候，我们会发现我们要测试的方法会引用很多外部依赖的对象，比如：（发送邮件，网络通讯，远程服务, 文件系统等等）。 而我们没法控制这些外部依赖的对象，为了解决这个问题，我们就需要用到Mock工具来模拟这些外部依赖的对象，来完成单元测试。<br>例如策划表没有配完,需要在调用如<code>RewardConfigHelper.getAndRewardPlayer()</code>这样的方法时不报错,模拟返回一个rewardList,就可以用mock.</p>\n<p>###2.PowerMock<br>&nbsp;&nbsp;&nbsp;&nbsp;现如今比较流行的Mock工具如EasyMock、Mockito等都有一个共同的缺点：不能mock静态、final、私有方法等。而PowerMock能够完美的弥补以上三个Mock工具的不足。<br>&nbsp;&nbsp;&nbsp;&nbsp;<b>PowerMock是一个扩展了其它如EasyMock等mock框架的、功能更加强大的框架。PowerMock使用一个自定义类加载器和字节码操作来模拟静态方法，构造函数，final类和方法，私有方法，去除静态初始化器等等。通过使用自定义的类加载器，简化采用的IDE或持续集成服务器不需要做任何改变。熟悉PowerMock支持的mock框架的开发人员会发现PowerMock很容易使用，因为对于静态方法和构造器来说，整个的期望API是一样的。PowerMock旨在用少量的方法和注解扩展现有的API来实现额外的功能。目前PowerMock支持EasyMock和Mockito。</b></p>\n<p>###3.使用<br>PowerMock有两个重要的注解：</p>\n<pre><code>–@RunWith(PowerMockRunner.class)\n\n–@PrepareForTest( { YourClassWithEgStaticMethod.class })\n\n如果你的测试用例里没有使用注解@PrepareForTest，那么可以不用加注解@RunWith(PowerMockRunner.class)，反之亦然。当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解@PrepareForTest。\n</code></pre><p>###3.原理<br>       •  当某个测试方法被注解@PrepareForTest标注以后，在运行测试用例时，会创建一个新的org.powermock.core.classloader.MockClassLoader实例，然后加载该测试用例使用到的类（系统类除外）。</p>\n<pre><code>•   PowerMock会根据你的mock要求，去修改写在注解@PrepareForTest里的class文件（当前测试类会自动加入注解中），以满足特殊的mock需求。例如：去除final方法的final标识，在静态方法的最前面加入自己的虚拟实现等。\n\n•   如果需要mock的是系统类的final方法和静态方法，PowerMock不会直接修改系统类的class文件，而是修改调用系统类的class文件，以满足mock需求。\n</code></pre><p>###4.Maven依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">&lt;groupId&gt;org.powermock&lt;/groupId&gt; </span><br><span class=\"line\">&lt;artifactId&gt;powermock-api-mockito&lt;/artifactId&gt; </span><br><span class=\"line\">&lt;version&gt;1.6.1&lt;/version&gt; </span><br><span class=\"line\">&lt;scope&gt;test&lt;/scope&gt; </span><br><span class=\"line\">&lt;/dependency&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">&lt;groupId&gt;org.powermock&lt;/groupId&gt; </span><br><span class=\"line\">&lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt; </span><br><span class=\"line\">&lt;version&gt;1.6.1&lt;/version&gt; </span><br><span class=\"line\">&lt;scope&gt;test&lt;/scope&gt; </span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>###5.示例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">   @PrepareForTest(RewardConfigHelper.class)</span><br><span class=\"line\">   public void testSettFrag() &#123;</span><br><span class=\"line\">       mockStatic(RewardConfigHelper.class);</span><br><span class=\"line\">       List&lt;RewardObject&gt; rewardList = Lists.newArrayList();</span><br><span class=\"line\">       rewardList.add(new RewardObject());</span><br><span class=\"line\">       when(RewardConfigHelper.getAndRewardPlayer(any(Player.class), anyString(), anyInt(),</span><br><span class=\"line\">               eq(AddEnum.SELL_HERO_FRAG), eq(&quot;&quot;))).thenReturn(rewardList);</span><br><span class=\"line\">       JSONObject param = new JSONObject();</span><br><span class=\"line\">       JSONObject frags = new JSONObject();</span><br><span class=\"line\">       String fragId = &quot;it_220006&quot;;</span><br><span class=\"line\">       pr.getItemBag().addItem(pr, fragId, 3, AddEnum.TEST, &quot;&quot;);</span><br><span class=\"line\">       frags.put(fragId, 3);</span><br><span class=\"line\">       param.put(&quot;frags&quot;, frags);</span><br><span class=\"line\">       JSONObject ret = (JSONObject) heroHandler.sellHeroFrag(pr, param);</span><br><span class=\"line\">       List&lt;RewardObject&gt; rewardObjects = (List&lt;RewardObject&gt;) ret.get(&quot;rewards&quot;);</span><br><span class=\"line\">       Assert.assertEquals(1, rewardObjects.size());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>###6.报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.NoSuchMethodError: org.mockito.internal.handler.MockHandlerFactory.createMockHandler(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.createMethodInvocationControl(DefaultMockCreator.java:114)</span><br><span class=\"line\">\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.createMock(DefaultMockCreator.java:69)</span><br><span class=\"line\">\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.mock(DefaultMockCreator.java:46)</span><br><span class=\"line\">\tat org.powermock.api.mockito.PowerMockito.mock(PowerMockito.java:138)</span><br><span class=\"line\">\tat com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:61)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat org.junit.internal.runners.TestMethod.invoke(TestMethod.java:68)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:326)</span><br><span class=\"line\">\tat org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:88)</span><br><span class=\"line\">\tat org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:96)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:310)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTestInSuper(PowerMockJUnit47RunnerDelegateImpl.java:131)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.access$100(PowerMockJUnit47RunnerDelegateImpl.java:59)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner$TestExecutorStatement.evaluate(PowerMockJUnit47RunnerDelegateImpl.java:147)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.evaluateStatement(PowerMockJUnit47RunnerDelegateImpl.java:107)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTest(PowerMockJUnit47RunnerDelegateImpl.java:82)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters(PowerMockJUnit44RunnerDelegateImpl.java:298)</span><br><span class=\"line\">\tat org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:86)</span><br><span class=\"line\">\tat org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:49)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:218)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:160)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run(PowerMockJUnit44RunnerDelegateImpl.java:134)</span><br><span class=\"line\">\tat org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:33)</span><br><span class=\"line\">\tat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:45)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:121)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)</span><br><span class=\"line\">\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)</span><br><span class=\"line\">\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br></pre></td></tr></table></figure></p>\n<p>是由于mockito版本为2.19.1<br>powermock版本1.7.4<br>需要提高powermock版本到2.0以上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/mockito/mockito/issues/1207</span><br><span class=\"line\">@mockitoguy</span><br><span class=\"line\"> Member</span><br><span class=\"line\">mockitoguy commented on 15 Oct 2017</span><br><span class=\"line\">Sorry for the issue!</span><br><span class=\"line\"></span><br><span class=\"line\">Please report it to PowerMock tracker. Mockito team does not support PowerMock integration.</span><br><span class=\"line\"></span><br><span class=\"line\">The only way Mockito team can help Java developers for this use case is by providing comprehensive public API for framework integrations. This way, PowerMock can cleanly integrate with Mockito public API and avoid various method not found errors. We have added new public API in Mockito 2.10.0, now PowerMock needs to release a new version with this API.</span><br><span class=\"line\"></span><br><span class=\"line\">Hope that helps clarifying the use case!</span><br></pre></td></tr></table></figure></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.mockito.exceptions.misusing.InvalidUseOfMatchersException: </span><br><span class=\"line\">Invalid use of argument matchers!</span><br><span class=\"line\">5 matchers expected, 3 recorded:</span><br><span class=\"line\">-&gt; at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)</span><br><span class=\"line\">-&gt; at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)</span><br><span class=\"line\">-&gt; at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)</span><br><span class=\"line\"></span><br><span class=\"line\">This exception may occur if matchers are combined with raw values:</span><br><span class=\"line\">    //incorrect:</span><br><span class=\"line\">    someMethod(anyObject(), &quot;raw String&quot;);</span><br><span class=\"line\">When using matchers, all arguments have to be provided by matchers.</span><br><span class=\"line\">For example:</span><br><span class=\"line\">    //correct:</span><br><span class=\"line\">    someMethod(anyObject(), eq(&quot;String by matcher&quot;));</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.LinkageError: loader constraint violation: loader (instance of org/powermock/core/classloader/MockClassLoader) previously initiated loading for a different type with name &quot;javax/management/MBeanServer&quot;</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span><br><span class=\"line\">\tat org.powermock.core.classloader.MockClassLoader.loadUnmockedClass(MockClassLoader.java:262)</span><br><span class=\"line\">\tat org.powermock.core.classloader.MockClassLoader.loadModifiedClass(MockClassLoader.java:206)</span><br><span class=\"line\">\tat org.powermock.core.classloader.DeferSupportingClassLoader.loadClass1(DeferSupportingClassLoader.java:89)</span><br><span class=\"line\">\tat org.powermock.core.classloader.DeferSupportingClassLoader.loadClass(DeferSupportingClassLoader.java:79)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class=\"line\">\tat org.apache.commons.pool2.impl.BaseGenericObjectPool.jmxRegister(BaseGenericObjectPool.java:957)</span><br><span class=\"line\">\tat org.apache.commons.pool2.impl.BaseGenericObjectPool.&lt;init&gt;(BaseGenericObjectPool.java:133)</span><br><span class=\"line\">\tat org.apache.commons.pool2.impl.GenericObjectPool.&lt;init&gt;(GenericObjectPool.java:107)</span><br><span class=\"line\">\tat redis.clients.util.Pool.initPool(Pool.java:44)</span><br><span class=\"line\">\tat redis.clients.util.Pool.&lt;init&gt;(Pool.java:23)</span><br><span class=\"line\">\tat redis.clients.jedis.JedisPool.&lt;init&gt;(JedisPool.java:185)</span><br><span class=\"line\">\tat redis.clients.jedis.JedisPool.&lt;init&gt;(JedisPool.java:162)</span><br><span class=\"line\">\tat redis.clients.jedis.JedisPool.&lt;init&gt;(JedisPool.java:144)</span><br><span class=\"line\">\tat com.playcrab.cache.redis.RedisInstance.init(RedisInstance.java:48)</span><br><span class=\"line\">\tat com.playcrab.cache.CacheModule.buildRedis(CacheModule.java:55)</span><br><span class=\"line\">\tat com.playcrab.cache.CacheModule.init(CacheModule.java:34)</span><br><span class=\"line\">\tat com.playcrab.common.agent.BaseAgent.init(BaseAgent.java:29)</span><br><span class=\"line\">\tat com.playcrab.kos.agents.KOSGSAgent.init(KOSGSAgent.java:89)</span><br><span class=\"line\">\tat com.playcrab.kos.shenpeng.shenpengTestBase.initServer(shenpengTestBase.java:35)</span><br><span class=\"line\">\tat com.playcrab.kos.shenpeng.HeroHandlerTest.beforeClass(HeroHandlerTest.java:38)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat org.junit.internal.runners.ClassRoadie.runBefores(ClassRoadie.java:57)</span><br><span class=\"line\">\tat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:121)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)</span><br><span class=\"line\">\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)</span><br><span class=\"line\">\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br></pre></td></tr></table></figure>\n<p>需要加上<code>@PowerMockIgnore(&quot;javax.management.*&quot;)</code>防止类加载器冲突</p>\n<hr>\n<p><b>如果用matcher,所有参数都要用matcher</b><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">when(RewardConfigHelper.getAndRewardPlayer(any(Player.class), anyString(), anyInt(),eq(AddEnum.SELL_HERO_FRAG), eq(&quot;&quot;))).thenReturn(rewardList);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><b>不要忘了<br><code>@RunWith(PowerMockRunner.class)</code><br>和<br><code>@PrepareForTest(RewardConfigHelper.class)</code><br></b></p>\n<p>参考来源:<a href=\"https://www.cnblogs.com/dengshihuang/p/7903642.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dengshihuang/p/7903642.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>###1.为什么要用mock<br>在做单元测试的时候，我们会发现我们要测试的方法会引用很多外部依赖的对象，比如：（发送邮件，网络通讯，远程服务, 文件系统等等）。 而我们没法控制这些外部依赖的对象，为了解决这个问题，我们就需要用到Mock工具来模拟这些外部依赖的对象，来完成单元测试。<br>例如策划表没有配完,需要在调用如<code>RewardConfigHelper.getAndRewardPlayer()</code>这样的方法时不报错,模拟返回一个rewardList,就可以用mock.</p>\n<p>###2.PowerMock<br>&nbsp;&nbsp;&nbsp;&nbsp;现如今比较流行的Mock工具如EasyMock、Mockito等都有一个共同的缺点：不能mock静态、final、私有方法等。而PowerMock能够完美的弥补以上三个Mock工具的不足。<br>&nbsp;&nbsp;&nbsp;&nbsp;<b>PowerMock是一个扩展了其它如EasyMock等mock框架的、功能更加强大的框架。PowerMock使用一个自定义类加载器和字节码操作来模拟静态方法，构造函数，final类和方法，私有方法，去除静态初始化器等等。通过使用自定义的类加载器，简化采用的IDE或持续集成服务器不需要做任何改变。熟悉PowerMock支持的mock框架的开发人员会发现PowerMock很容易使用，因为对于静态方法和构造器来说，整个的期望API是一样的。PowerMock旨在用少量的方法和注解扩展现有的API来实现额外的功能。目前PowerMock支持EasyMock和Mockito。</b></p>\n<p>###3.使用<br>PowerMock有两个重要的注解：</p>\n<pre><code>–@RunWith(PowerMockRunner.class)\n\n–@PrepareForTest( { YourClassWithEgStaticMethod.class })\n\n如果你的测试用例里没有使用注解@PrepareForTest，那么可以不用加注解@RunWith(PowerMockRunner.class)，反之亦然。当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解@PrepareForTest。\n</code></pre><p>###3.原理<br>       •  当某个测试方法被注解@PrepareForTest标注以后，在运行测试用例时，会创建一个新的org.powermock.core.classloader.MockClassLoader实例，然后加载该测试用例使用到的类（系统类除外）。</p>\n<pre><code>•   PowerMock会根据你的mock要求，去修改写在注解@PrepareForTest里的class文件（当前测试类会自动加入注解中），以满足特殊的mock需求。例如：去除final方法的final标识，在静态方法的最前面加入自己的虚拟实现等。\n\n•   如果需要mock的是系统类的final方法和静态方法，PowerMock不会直接修改系统类的class文件，而是修改调用系统类的class文件，以满足mock需求。\n</code></pre><p>###4.Maven依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">&lt;groupId&gt;org.powermock&lt;/groupId&gt; </span><br><span class=\"line\">&lt;artifactId&gt;powermock-api-mockito&lt;/artifactId&gt; </span><br><span class=\"line\">&lt;version&gt;1.6.1&lt;/version&gt; </span><br><span class=\"line\">&lt;scope&gt;test&lt;/scope&gt; </span><br><span class=\"line\">&lt;/dependency&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">&lt;groupId&gt;org.powermock&lt;/groupId&gt; </span><br><span class=\"line\">&lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt; </span><br><span class=\"line\">&lt;version&gt;1.6.1&lt;/version&gt; </span><br><span class=\"line\">&lt;scope&gt;test&lt;/scope&gt; </span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>###5.示例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">   @PrepareForTest(RewardConfigHelper.class)</span><br><span class=\"line\">   public void testSettFrag() &#123;</span><br><span class=\"line\">       mockStatic(RewardConfigHelper.class);</span><br><span class=\"line\">       List&lt;RewardObject&gt; rewardList = Lists.newArrayList();</span><br><span class=\"line\">       rewardList.add(new RewardObject());</span><br><span class=\"line\">       when(RewardConfigHelper.getAndRewardPlayer(any(Player.class), anyString(), anyInt(),</span><br><span class=\"line\">               eq(AddEnum.SELL_HERO_FRAG), eq(&quot;&quot;))).thenReturn(rewardList);</span><br><span class=\"line\">       JSONObject param = new JSONObject();</span><br><span class=\"line\">       JSONObject frags = new JSONObject();</span><br><span class=\"line\">       String fragId = &quot;it_220006&quot;;</span><br><span class=\"line\">       pr.getItemBag().addItem(pr, fragId, 3, AddEnum.TEST, &quot;&quot;);</span><br><span class=\"line\">       frags.put(fragId, 3);</span><br><span class=\"line\">       param.put(&quot;frags&quot;, frags);</span><br><span class=\"line\">       JSONObject ret = (JSONObject) heroHandler.sellHeroFrag(pr, param);</span><br><span class=\"line\">       List&lt;RewardObject&gt; rewardObjects = (List&lt;RewardObject&gt;) ret.get(&quot;rewards&quot;);</span><br><span class=\"line\">       Assert.assertEquals(1, rewardObjects.size());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>###6.报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.NoSuchMethodError: org.mockito.internal.handler.MockHandlerFactory.createMockHandler(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.createMethodInvocationControl(DefaultMockCreator.java:114)</span><br><span class=\"line\">\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.createMock(DefaultMockCreator.java:69)</span><br><span class=\"line\">\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.mock(DefaultMockCreator.java:46)</span><br><span class=\"line\">\tat org.powermock.api.mockito.PowerMockito.mock(PowerMockito.java:138)</span><br><span class=\"line\">\tat com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:61)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat org.junit.internal.runners.TestMethod.invoke(TestMethod.java:68)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:326)</span><br><span class=\"line\">\tat org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:88)</span><br><span class=\"line\">\tat org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:96)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:310)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTestInSuper(PowerMockJUnit47RunnerDelegateImpl.java:131)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.access$100(PowerMockJUnit47RunnerDelegateImpl.java:59)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner$TestExecutorStatement.evaluate(PowerMockJUnit47RunnerDelegateImpl.java:147)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.evaluateStatement(PowerMockJUnit47RunnerDelegateImpl.java:107)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTest(PowerMockJUnit47RunnerDelegateImpl.java:82)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters(PowerMockJUnit44RunnerDelegateImpl.java:298)</span><br><span class=\"line\">\tat org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:86)</span><br><span class=\"line\">\tat org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:49)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:218)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:160)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run(PowerMockJUnit44RunnerDelegateImpl.java:134)</span><br><span class=\"line\">\tat org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:33)</span><br><span class=\"line\">\tat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:45)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:121)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)</span><br><span class=\"line\">\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)</span><br><span class=\"line\">\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br></pre></td></tr></table></figure></p>\n<p>是由于mockito版本为2.19.1<br>powermock版本1.7.4<br>需要提高powermock版本到2.0以上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/mockito/mockito/issues/1207</span><br><span class=\"line\">@mockitoguy</span><br><span class=\"line\"> Member</span><br><span class=\"line\">mockitoguy commented on 15 Oct 2017</span><br><span class=\"line\">Sorry for the issue!</span><br><span class=\"line\"></span><br><span class=\"line\">Please report it to PowerMock tracker. Mockito team does not support PowerMock integration.</span><br><span class=\"line\"></span><br><span class=\"line\">The only way Mockito team can help Java developers for this use case is by providing comprehensive public API for framework integrations. This way, PowerMock can cleanly integrate with Mockito public API and avoid various method not found errors. We have added new public API in Mockito 2.10.0, now PowerMock needs to release a new version with this API.</span><br><span class=\"line\"></span><br><span class=\"line\">Hope that helps clarifying the use case!</span><br></pre></td></tr></table></figure></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.mockito.exceptions.misusing.InvalidUseOfMatchersException: </span><br><span class=\"line\">Invalid use of argument matchers!</span><br><span class=\"line\">5 matchers expected, 3 recorded:</span><br><span class=\"line\">-&gt; at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)</span><br><span class=\"line\">-&gt; at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)</span><br><span class=\"line\">-&gt; at com.playcrab.kos.shenpeng.HeroHandlerTest.testSettFrag(HeroHandlerTest.java:64)</span><br><span class=\"line\"></span><br><span class=\"line\">This exception may occur if matchers are combined with raw values:</span><br><span class=\"line\">    //incorrect:</span><br><span class=\"line\">    someMethod(anyObject(), &quot;raw String&quot;);</span><br><span class=\"line\">When using matchers, all arguments have to be provided by matchers.</span><br><span class=\"line\">For example:</span><br><span class=\"line\">    //correct:</span><br><span class=\"line\">    someMethod(anyObject(), eq(&quot;String by matcher&quot;));</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.LinkageError: loader constraint violation: loader (instance of org/powermock/core/classloader/MockClassLoader) previously initiated loading for a different type with name &quot;javax/management/MBeanServer&quot;</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span><br><span class=\"line\">\tat org.powermock.core.classloader.MockClassLoader.loadUnmockedClass(MockClassLoader.java:262)</span><br><span class=\"line\">\tat org.powermock.core.classloader.MockClassLoader.loadModifiedClass(MockClassLoader.java:206)</span><br><span class=\"line\">\tat org.powermock.core.classloader.DeferSupportingClassLoader.loadClass1(DeferSupportingClassLoader.java:89)</span><br><span class=\"line\">\tat org.powermock.core.classloader.DeferSupportingClassLoader.loadClass(DeferSupportingClassLoader.java:79)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class=\"line\">\tat org.apache.commons.pool2.impl.BaseGenericObjectPool.jmxRegister(BaseGenericObjectPool.java:957)</span><br><span class=\"line\">\tat org.apache.commons.pool2.impl.BaseGenericObjectPool.&lt;init&gt;(BaseGenericObjectPool.java:133)</span><br><span class=\"line\">\tat org.apache.commons.pool2.impl.GenericObjectPool.&lt;init&gt;(GenericObjectPool.java:107)</span><br><span class=\"line\">\tat redis.clients.util.Pool.initPool(Pool.java:44)</span><br><span class=\"line\">\tat redis.clients.util.Pool.&lt;init&gt;(Pool.java:23)</span><br><span class=\"line\">\tat redis.clients.jedis.JedisPool.&lt;init&gt;(JedisPool.java:185)</span><br><span class=\"line\">\tat redis.clients.jedis.JedisPool.&lt;init&gt;(JedisPool.java:162)</span><br><span class=\"line\">\tat redis.clients.jedis.JedisPool.&lt;init&gt;(JedisPool.java:144)</span><br><span class=\"line\">\tat com.playcrab.cache.redis.RedisInstance.init(RedisInstance.java:48)</span><br><span class=\"line\">\tat com.playcrab.cache.CacheModule.buildRedis(CacheModule.java:55)</span><br><span class=\"line\">\tat com.playcrab.cache.CacheModule.init(CacheModule.java:34)</span><br><span class=\"line\">\tat com.playcrab.common.agent.BaseAgent.init(BaseAgent.java:29)</span><br><span class=\"line\">\tat com.playcrab.kos.agents.KOSGSAgent.init(KOSGSAgent.java:89)</span><br><span class=\"line\">\tat com.playcrab.kos.shenpeng.shenpengTestBase.initServer(shenpengTestBase.java:35)</span><br><span class=\"line\">\tat com.playcrab.kos.shenpeng.HeroHandlerTest.beforeClass(HeroHandlerTest.java:38)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat org.junit.internal.runners.ClassRoadie.runBefores(ClassRoadie.java:57)</span><br><span class=\"line\">\tat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:121)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57)</span><br><span class=\"line\">\tat org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)</span><br><span class=\"line\">\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)</span><br><span class=\"line\">\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</span><br><span class=\"line\">\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br></pre></td></tr></table></figure>\n<p>需要加上<code>@PowerMockIgnore(&quot;javax.management.*&quot;)</code>防止类加载器冲突</p>\n<hr>\n<p><b>如果用matcher,所有参数都要用matcher</b><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">when(RewardConfigHelper.getAndRewardPlayer(any(Player.class), anyString(), anyInt(),eq(AddEnum.SELL_HERO_FRAG), eq(&quot;&quot;))).thenReturn(rewardList);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><b>不要忘了<br><code>@RunWith(PowerMockRunner.class)</code><br>和<br><code>@PrepareForTest(RewardConfigHelper.class)</code><br></b></p>\n<p>参考来源:<a href=\"https://www.cnblogs.com/dengshihuang/p/7903642.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dengshihuang/p/7903642.html</a></p>\n"},{"title":"梯子多用户配置","_content":"第一次是在ubantu下操作,版本18.4,内核版本4.15 比4.9高.\n运行命令\n``` lsmod |grep bbr ```\n结果\n``` \nroot@vultr:~# lsmod |grep bbr\ntcp_bbr                20480  5\n```\n说明已经开启bbr,不需要其他操作\n\n---\n然后安装ss\n```\n#：apt-get install python-pip\n#：pip install shadowsocks\n```\ncentos7安装pip用`yum install python-pip`\n\n安装ss的时候报错\n```\nroot@vultr:~# pip install shadowsocks\nCollecting shadowsocks\n  Downloading https://files.pythonhosted.org/packages/02/1e/e3a5135255d06813aca6631da31768d44f63692480af3a1621818008eb4a/shadowsocks-2.8.2.tar.gz\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n    ImportError: No module named setuptools\n\n    ----------------------------------------\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-build-Q7TlHV/shadowsocks/\n```\n(可能是python一些东西版本太低)\n运行\n```\nsudo python -m pip install --upgrade --force pip \nsudo pip install setuptools==33.1.1\n```\n然后再安装ss,还是报错\n```\nroot@vultr:~# pip install shadowsocks\nTraceback (most recent call last):\n  File \"/usr/bin/pip\", line 9, in <module>\n    from pip import main\nImportError: cannot import name main\n```\n因为将pip更新后库里面的函数有所变动造成这个问题。 解决方法\n```\nsudo gedit /usr/bin/pip\n将原来的：\n\nfrom pip import main\nif __name__ == '__main__':\n    sys.exit(main())\n    \n改成：\n\nfrom pip import __main__\nif __name__ == '__main__':\n    sys.exit(__main__._main())\n```\ngedit可以由vi代替,注意“--”和“-”的区别.\n再安装就成功了.\n顺便配一下多用户.\n```\nvi /etc/shadowsocks.json\n```\n然后编辑\n```\n{\n\"server\": \"0.0.0.0\",\n\"port_password\": {\n\"8381\": \"password1\",\n\"8382\": \"password2\",\n\"8383\": \"password3\",\n\"8384\": \"password4\"\n},\n\"timeout\": 300,\n\"method\": \"aes-256-cfb\"\n}\n```\n再启动服务```ssserver -c /etc/shadowsocks.json -d start```\n报错:\n```\nAttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup\n```\ngoogle后,按照<https://blog.csdn.net/blackfrog_unique/article/details/60320737>大佬解释,这个问题是由于在openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数.\n```\n修改方法：\n\n用vim打开文件：vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py (该路径请根据自己的系统情况自行修改，如果不知道该文件在哪里的话，可以使用find命令查找文件位置)\n跳转到52行（shadowsocks2.8.2版本，其他版本搜索一下cleanup）\n进入编辑模式\n将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,) \n改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)\n再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx) \n改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)\n保存并退出\n启动shadowsocks服务：service shadowsocks start 或 sslocal -c ss配置文件目录\n问题解决\n```\n之后```ssserver -c /etc/shadowsocks.json -d start```正常启动.\n\n\n-------\n2019-1-25\n 今天又来配置了一遍ss,配置文件如下\n  ```\n {\n\"server\":\"0.0.0.0\",\n\"password\":{\n\"8381\":\"password1\",\n\"8382\":\"password2\",\n\"8383\":\"password3\",\n\"8384\":\"password4\"\n},\n\"timeout\":\"300\",\n\"method\":\"aes-256-cfb\"\n}\n ```\n 运行```ssserver -c /etc/shadowsocks.json -d start```时,报错\n ````\n [root@vultr shadowsocks]# ssserver -c /etc/shadowsocks.json\nINFO: loading config from /etc/shadowsocks.json\nTraceback (most recent call last):\n  File \"/usr/bin/ssserver\", line 9, in <module>\n    load_entry_point('shadowsocks==2.8.2', 'console_scripts', 'ssserver')()\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/server.py\", line 34, in main\n    config = shell.get_config(False)\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/shell.py\", line 262, in get_config\n    check_config(config, is_local)\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/shell.py\", line 124, in check_config\n    encrypt.try_cipher(config['password'], config['method'])\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py\", line 44, in try_cipher\n    Encryptor(key, method)\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py\", line 83, in __init__\n    random_string(self._method_info[1]))\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py\", line 100, in get_cipher\n    key, iv_ = EVP_BytesToKey(password, m[0], m[1])\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py\", line 61, in EVP_BytesToKey\n    md5.update(data)\nTypeError: must be string or buffer, not dict\n ````\n 网上找了半天,没有找到类似错误的.最后只能自己分析.\n TypeError说明是类型错误,最下面报错的地方是\n ``` File \"/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py\", line 61, in EVP_BytesToKey\n    md5.update(data)```\n去了文件的第61行一看\n```\n while len(b''.join(m)) < (key_len + iv_len):\n     57         md5 = hashlib.md5()\n     58         data = password\n     59         if i > 0:\n     60             data = m[i - 1] + password\n     61         md5.update(data)\n     62         m.append(md5.digest())\n     63         i += 1\n```\n应该是穿入password错误,不应该是dict.但是我配置的是多用户,有多个端口和对应的密码,只能传dict.再一看配置文件,原来多用户需要将\"password\"改为\"port_password\".\n\n\n之后运行```ssserver -c /etc/shadowsocks.json```\n还是报\n```AttributeError: /lib64/libcrypto.so.10: undefined symbol: EVP_CIPHER_CTX_reset```\n根据openssl官网https://www.openssl.org/docs/man1.1.0/crypto/EVP_CIPHER_CTX_reset.html\n的说法,EVP_CIPHER_CTX was made opaque in OpenSSL 1.1.0. As a result, EVP_CIPHER_CTX_reset() appeared and EVP_CIPHER_CTX_cleanup() disappeared. EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset().\n用reset替代了cleanup,我之前也换了啊.最后,只能尝试一下,用reset的别名init替代,最后运行成功了!  ???\n\n```\n[root@vultr shadowsocks]# vi /usr/lib/python2.7/site-packages/shadowsocks/crypto/openssl.py\n[root@vultr shadowsocks]# ssserver -c /etc/shadowsocks.json\nINFO: loading config from /etc/shadowsocks.json\n2019-01-25 07:40:11 INFO     loading libcrypto from libcrypto.so.10\n2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8384\n2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8383\n2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8382\n2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8381\n```\n\n然后配置自启动\n```\nvim /etc/systemd/system/shadowsocks.service\n```\n内容如下\n```\n[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n```\n然后运行这三个命令:\n```\n[root@vultr shadowsocks]# systemctl enable shadowsocks\nCreated symlink from /etc/systemd/system/multi-user.target.wants/shadowsocks.service to /etc/systemd/system/shadowsocks.service.\n[root@vultr shadowsocks]# systemctl start shadowsocks\n[root@vultr shadowsocks]# systemctl status shadowsocks -l\n shadowsocks.service\n   Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2019-01-25 08:14:35 UTC; 3min 22s ago\n Main PID: 4264 (ssserver)\n   CGroup: /system.slice/shadowsocks.service\n           └─4264 /usr/bin/python2 /usr/bin/ssserver -c /etc/shadowsocks.json\n```\n状态是active说明启动成功\n\n然后关闭防火墙\n```systemctl stop firewalld```\n查看日志\n```\n[root@vultr bin]# journalctl -u shadowsocks.service -f\n-- Logs begin at Fri 2019-01-25 06:19:58 UTC. --\nJan 25 08:14:36 vultr.guest ssserver[4264]: 2019-01-25 08:14:36 INFO     starting server at 0.0.0.0:8381\nJan 25 08:22:56 vultr.guest systemd[1]: Stopping shadowsocks.service...\nJan 25 08:22:56 vultr.guest systemd[1]: Stopped shadowsocks.service.\nJan 25 08:23:06 vultr.guest systemd[1]: Started shadowsocks.service.\nJan 25 08:23:06 vultr.guest ssserver[4301]: INFO: loading config from /etc/shadowsocks.json\nJan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     loading libcrypto from libcrypto.so.10\nJan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8384\nJan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8383\nJan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8382\nJan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8381\n```\n手机移动网一直连不上不知道什么情况\n公司网就可以.\n\n不翻墙只能连新加坡服务器\n","source":"_posts/梯子多用户配置.md","raw":"---\ntitle: 梯子多用户配置\ncategories:\n- 技术\ntags:\n- 梯子\n- linux\n\n---\n第一次是在ubantu下操作,版本18.4,内核版本4.15 比4.9高.\n运行命令\n``` lsmod |grep bbr ```\n结果\n``` \nroot@vultr:~# lsmod |grep bbr\ntcp_bbr                20480  5\n```\n说明已经开启bbr,不需要其他操作\n\n---\n然后安装ss\n```\n#：apt-get install python-pip\n#：pip install shadowsocks\n```\ncentos7安装pip用`yum install python-pip`\n\n安装ss的时候报错\n```\nroot@vultr:~# pip install shadowsocks\nCollecting shadowsocks\n  Downloading https://files.pythonhosted.org/packages/02/1e/e3a5135255d06813aca6631da31768d44f63692480af3a1621818008eb4a/shadowsocks-2.8.2.tar.gz\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n    ImportError: No module named setuptools\n\n    ----------------------------------------\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-build-Q7TlHV/shadowsocks/\n```\n(可能是python一些东西版本太低)\n运行\n```\nsudo python -m pip install --upgrade --force pip \nsudo pip install setuptools==33.1.1\n```\n然后再安装ss,还是报错\n```\nroot@vultr:~# pip install shadowsocks\nTraceback (most recent call last):\n  File \"/usr/bin/pip\", line 9, in <module>\n    from pip import main\nImportError: cannot import name main\n```\n因为将pip更新后库里面的函数有所变动造成这个问题。 解决方法\n```\nsudo gedit /usr/bin/pip\n将原来的：\n\nfrom pip import main\nif __name__ == '__main__':\n    sys.exit(main())\n    \n改成：\n\nfrom pip import __main__\nif __name__ == '__main__':\n    sys.exit(__main__._main())\n```\ngedit可以由vi代替,注意“--”和“-”的区别.\n再安装就成功了.\n顺便配一下多用户.\n```\nvi /etc/shadowsocks.json\n```\n然后编辑\n```\n{\n\"server\": \"0.0.0.0\",\n\"port_password\": {\n\"8381\": \"password1\",\n\"8382\": \"password2\",\n\"8383\": \"password3\",\n\"8384\": \"password4\"\n},\n\"timeout\": 300,\n\"method\": \"aes-256-cfb\"\n}\n```\n再启动服务```ssserver -c /etc/shadowsocks.json -d start```\n报错:\n```\nAttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup\n```\ngoogle后,按照<https://blog.csdn.net/blackfrog_unique/article/details/60320737>大佬解释,这个问题是由于在openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数.\n```\n修改方法：\n\n用vim打开文件：vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py (该路径请根据自己的系统情况自行修改，如果不知道该文件在哪里的话，可以使用find命令查找文件位置)\n跳转到52行（shadowsocks2.8.2版本，其他版本搜索一下cleanup）\n进入编辑模式\n将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,) \n改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)\n再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx) \n改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)\n保存并退出\n启动shadowsocks服务：service shadowsocks start 或 sslocal -c ss配置文件目录\n问题解决\n```\n之后```ssserver -c /etc/shadowsocks.json -d start```正常启动.\n\n\n-------\n2019-1-25\n 今天又来配置了一遍ss,配置文件如下\n  ```\n {\n\"server\":\"0.0.0.0\",\n\"password\":{\n\"8381\":\"password1\",\n\"8382\":\"password2\",\n\"8383\":\"password3\",\n\"8384\":\"password4\"\n},\n\"timeout\":\"300\",\n\"method\":\"aes-256-cfb\"\n}\n ```\n 运行```ssserver -c /etc/shadowsocks.json -d start```时,报错\n ````\n [root@vultr shadowsocks]# ssserver -c /etc/shadowsocks.json\nINFO: loading config from /etc/shadowsocks.json\nTraceback (most recent call last):\n  File \"/usr/bin/ssserver\", line 9, in <module>\n    load_entry_point('shadowsocks==2.8.2', 'console_scripts', 'ssserver')()\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/server.py\", line 34, in main\n    config = shell.get_config(False)\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/shell.py\", line 262, in get_config\n    check_config(config, is_local)\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/shell.py\", line 124, in check_config\n    encrypt.try_cipher(config['password'], config['method'])\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py\", line 44, in try_cipher\n    Encryptor(key, method)\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py\", line 83, in __init__\n    random_string(self._method_info[1]))\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py\", line 100, in get_cipher\n    key, iv_ = EVP_BytesToKey(password, m[0], m[1])\n  File \"/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py\", line 61, in EVP_BytesToKey\n    md5.update(data)\nTypeError: must be string or buffer, not dict\n ````\n 网上找了半天,没有找到类似错误的.最后只能自己分析.\n TypeError说明是类型错误,最下面报错的地方是\n ``` File \"/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py\", line 61, in EVP_BytesToKey\n    md5.update(data)```\n去了文件的第61行一看\n```\n while len(b''.join(m)) < (key_len + iv_len):\n     57         md5 = hashlib.md5()\n     58         data = password\n     59         if i > 0:\n     60             data = m[i - 1] + password\n     61         md5.update(data)\n     62         m.append(md5.digest())\n     63         i += 1\n```\n应该是穿入password错误,不应该是dict.但是我配置的是多用户,有多个端口和对应的密码,只能传dict.再一看配置文件,原来多用户需要将\"password\"改为\"port_password\".\n\n\n之后运行```ssserver -c /etc/shadowsocks.json```\n还是报\n```AttributeError: /lib64/libcrypto.so.10: undefined symbol: EVP_CIPHER_CTX_reset```\n根据openssl官网https://www.openssl.org/docs/man1.1.0/crypto/EVP_CIPHER_CTX_reset.html\n的说法,EVP_CIPHER_CTX was made opaque in OpenSSL 1.1.0. As a result, EVP_CIPHER_CTX_reset() appeared and EVP_CIPHER_CTX_cleanup() disappeared. EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset().\n用reset替代了cleanup,我之前也换了啊.最后,只能尝试一下,用reset的别名init替代,最后运行成功了!  ???\n\n```\n[root@vultr shadowsocks]# vi /usr/lib/python2.7/site-packages/shadowsocks/crypto/openssl.py\n[root@vultr shadowsocks]# ssserver -c /etc/shadowsocks.json\nINFO: loading config from /etc/shadowsocks.json\n2019-01-25 07:40:11 INFO     loading libcrypto from libcrypto.so.10\n2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8384\n2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8383\n2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8382\n2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8381\n```\n\n然后配置自启动\n```\nvim /etc/systemd/system/shadowsocks.service\n```\n内容如下\n```\n[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n```\n然后运行这三个命令:\n```\n[root@vultr shadowsocks]# systemctl enable shadowsocks\nCreated symlink from /etc/systemd/system/multi-user.target.wants/shadowsocks.service to /etc/systemd/system/shadowsocks.service.\n[root@vultr shadowsocks]# systemctl start shadowsocks\n[root@vultr shadowsocks]# systemctl status shadowsocks -l\n shadowsocks.service\n   Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2019-01-25 08:14:35 UTC; 3min 22s ago\n Main PID: 4264 (ssserver)\n   CGroup: /system.slice/shadowsocks.service\n           └─4264 /usr/bin/python2 /usr/bin/ssserver -c /etc/shadowsocks.json\n```\n状态是active说明启动成功\n\n然后关闭防火墙\n```systemctl stop firewalld```\n查看日志\n```\n[root@vultr bin]# journalctl -u shadowsocks.service -f\n-- Logs begin at Fri 2019-01-25 06:19:58 UTC. --\nJan 25 08:14:36 vultr.guest ssserver[4264]: 2019-01-25 08:14:36 INFO     starting server at 0.0.0.0:8381\nJan 25 08:22:56 vultr.guest systemd[1]: Stopping shadowsocks.service...\nJan 25 08:22:56 vultr.guest systemd[1]: Stopped shadowsocks.service.\nJan 25 08:23:06 vultr.guest systemd[1]: Started shadowsocks.service.\nJan 25 08:23:06 vultr.guest ssserver[4301]: INFO: loading config from /etc/shadowsocks.json\nJan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     loading libcrypto from libcrypto.so.10\nJan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8384\nJan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8383\nJan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8382\nJan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8381\n```\n手机移动网一直连不上不知道什么情况\n公司网就可以.\n\n不翻墙只能连新加坡服务器\n","slug":"梯子多用户配置","published":1,"date":"2019-05-21T02:36:43.928Z","updated":"2019-05-21T02:36:43.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbvl0078m74ze6cl2ltz","content":"<p>第一次是在ubantu下操作,版本18.4,内核版本4.15 比4.9高.<br>运行命令<br><figure class=\"highlight plain\"><figcaption><span>|grep bbr ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结果</span><br><span class=\"line\">``` </span><br><span class=\"line\">root@vultr:~# lsmod |grep bbr</span><br><span class=\"line\">tcp_bbr                20480  5</span><br></pre></td></tr></table></figure></p>\n<p>说明已经开启bbr,不需要其他操作</p>\n<hr>\n<p>然后安装ss<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#：apt-get install python-pip</span><br><span class=\"line\">#：pip install shadowsocks</span><br></pre></td></tr></table></figure></p>\n<p>centos7安装pip用<code>yum install python-pip</code></p>\n<p>安装ss的时候报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vultr:~# pip install shadowsocks</span><br><span class=\"line\">Collecting shadowsocks</span><br><span class=\"line\">  Downloading https://files.pythonhosted.org/packages/02/1e/e3a5135255d06813aca6631da31768d44f63692480af3a1621818008eb4a/shadowsocks-2.8.2.tar.gz</span><br><span class=\"line\">    Complete output from command python setup.py egg_info:</span><br><span class=\"line\">    Traceback (most recent call last):</span><br><span class=\"line\">      File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">    ImportError: No module named setuptools</span><br><span class=\"line\"></span><br><span class=\"line\">    ----------------------------------------</span><br><span class=\"line\">Command &quot;python setup.py egg_info&quot; failed with error code 1 in /tmp/pip-build-Q7TlHV/shadowsocks/</span><br></pre></td></tr></table></figure></p>\n<p>(可能是python一些东西版本太低)<br>运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo python -m pip install --upgrade --force pip </span><br><span class=\"line\">sudo pip install setuptools==33.1.1</span><br></pre></td></tr></table></figure></p>\n<p>然后再安装ss,还是报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vultr:~# pip install shadowsocks</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;/usr/bin/pip&quot;, line 9, in &lt;module&gt;</span><br><span class=\"line\">    from pip import main</span><br><span class=\"line\">ImportError: cannot import name main</span><br></pre></td></tr></table></figure></p>\n<p>因为将pip更新后库里面的函数有所变动造成这个问题。 解决方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /usr/bin/pip</span><br><span class=\"line\">将原来的：</span><br><span class=\"line\"></span><br><span class=\"line\">from pip import main</span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    sys.exit(main())</span><br><span class=\"line\">    </span><br><span class=\"line\">改成：</span><br><span class=\"line\"></span><br><span class=\"line\">from pip import __main__</span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    sys.exit(__main__._main())</span><br></pre></td></tr></table></figure></p>\n<p>gedit可以由vi代替,注意“–”和“-”的区别.<br>再安装就成功了.<br>顺便配一下多用户.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p>\n<p>然后编辑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">&quot;port_password&quot;: &#123;</span><br><span class=\"line\">&quot;8381&quot;: &quot;password1&quot;,</span><br><span class=\"line\">&quot;8382&quot;: &quot;password2&quot;,</span><br><span class=\"line\">&quot;8383&quot;: &quot;password3&quot;,</span><br><span class=\"line\">&quot;8384&quot;: &quot;password4&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;timeout&quot;: 300,</span><br><span class=\"line\">&quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再启动服务<figure class=\"highlight plain\"><figcaption><span>-c</span><a href=\"/etc/shadowsocks.json\">-d start```</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">报错:</span><br></pre></td></tr></table></figure></p>\n<p>AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">google后,按照&lt;https://blog.csdn.net/blackfrog_unique/article/details/60320737&gt;大佬解释,这个问题是由于在openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数.</span><br></pre></td></tr></table></figure></p>\n<p>修改方法：</p>\n<p>用vim打开文件：vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py (该路径请根据自己的系统情况自行修改，如果不知道该文件在哪里的话，可以使用find命令查找文件位置)<br>跳转到52行（shadowsocks2.8.2版本，其他版本搜索一下cleanup）<br>进入编辑模式<br>将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)<br>改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)<br>再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)<br>改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)<br>保存并退出<br>启动shadowsocks服务：service shadowsocks start 或 sslocal -c ss配置文件目录<br>问题解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">之后```ssserver -c /etc/shadowsocks.json -d start```正常启动.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-------</span><br><span class=\"line\">2019-1-25</span><br><span class=\"line\"> 今天又来配置了一遍ss,配置文件如下</span><br></pre></td></tr></table></figure></p>\n<p> {<br>“server”:”0.0.0.0”,<br>“password”:{<br>“8381”:”password1”,<br>“8382”:”password2”,<br>“8383”:”password3”,<br>“8384”:”password4”<br>},<br>“timeout”:”300”,<br>“method”:”aes-256-cfb”<br>}<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行```ssserver -c /etc/shadowsocks.json -d start```时,报错</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p> [root@vultr shadowsocks]# ssserver -c /etc/shadowsocks.json<br>INFO: loading config from /etc/shadowsocks.json<br>Traceback (most recent call last):<br>  File “/usr/bin/ssserver”, line 9, in <module><br>    load_entry_point(‘shadowsocks==2.8.2’, ‘console_scripts’, ‘ssserver’)()<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/server.py”, line 34, in main<br>    config = shell.get_config(False)<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/shell.py”, line 262, in get_config<br>    check_config(config, is_local)<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/shell.py”, line 124, in check_config<br>    encrypt.try_cipher(config[‘password’], config[‘method’])<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py”, line 44, in try_cipher<br>    Encryptor(key, method)<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py”, line 83, in <strong>init</strong><br>    random_string(self._method_info[1]))<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py”, line 100, in get_cipher<br>    key, iv_ = EVP_BytesToKey(password, m[0], m[1])<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py”, line 61, in EVP_BytesToKey<br>    md5.update(data)<br>TypeError: must be string or buffer, not dict<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网上找了半天,没有找到类似错误的.最后只能自己分析.</span><br><span class=\"line\">TypeError说明是类型错误,最下面报错的地方是</span><br><span class=\"line\">``` File &quot;/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py&quot;, line 61, in EVP_BytesToKey</span><br><span class=\"line\">   md5.update(data)</span><br></pre></td></tr></table></figure></module></p>\n<p>去了文件的第61行一看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while len(b&apos;&apos;.join(m)) &lt; (key_len + iv_len):</span><br><span class=\"line\">    57         md5 = hashlib.md5()</span><br><span class=\"line\">    58         data = password</span><br><span class=\"line\">    59         if i &gt; 0:</span><br><span class=\"line\">    60             data = m[i - 1] + password</span><br><span class=\"line\">    61         md5.update(data)</span><br><span class=\"line\">    62         m.append(md5.digest())</span><br><span class=\"line\">    63         i += 1</span><br></pre></td></tr></table></figure></p>\n<p>应该是穿入password错误,不应该是dict.但是我配置的是多用户,有多个端口和对应的密码,只能传dict.再一看配置文件,原来多用户需要将”password”改为”port_password”.</p>\n<p>之后运行<figure class=\"highlight plain\"><figcaption><span>-c</span><a href=\"/etc/shadowsocks.json```\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">还是报</span><br><span class=\"line\">```AttributeError: /lib64/libcrypto.so.10: undefined symbol: EVP_CIPHER_CTX_reset</span><br></pre></td></tr></table></figure></p>\n<p>根据openssl官网<a href=\"https://www.openssl.org/docs/man1.1.0/crypto/EVP_CIPHER_CTX_reset.html\" target=\"_blank\" rel=\"noopener\">https://www.openssl.org/docs/man1.1.0/crypto/EVP_CIPHER_CTX_reset.html</a><br>的说法,EVP_CIPHER_CTX was made opaque in OpenSSL 1.1.0. As a result, EVP_CIPHER_CTX_reset() appeared and EVP_CIPHER_CTX_cleanup() disappeared. EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset().<br>用reset替代了cleanup,我之前也换了啊.最后,只能尝试一下,用reset的别名init替代,最后运行成功了!  ???</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr shadowsocks]# vi /usr/lib/python2.7/site-packages/shadowsocks/crypto/openssl.py</span><br><span class=\"line\">[root@vultr shadowsocks]# ssserver -c /etc/shadowsocks.json</span><br><span class=\"line\">INFO: loading config from /etc/shadowsocks.json</span><br><span class=\"line\">2019-01-25 07:40:11 INFO     loading libcrypto from libcrypto.so.10</span><br><span class=\"line\">2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8384</span><br><span class=\"line\">2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8383</span><br><span class=\"line\">2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8382</span><br><span class=\"line\">2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8381</span><br></pre></td></tr></table></figure>\n<p>然后配置自启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/shadowsocks.service</span><br></pre></td></tr></table></figure></p>\n<p>内容如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>\n<p>然后运行这三个命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr shadowsocks]# systemctl enable shadowsocks</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/shadowsocks.service to /etc/systemd/system/shadowsocks.service.</span><br><span class=\"line\">[root@vultr shadowsocks]# systemctl start shadowsocks</span><br><span class=\"line\">[root@vultr shadowsocks]# systemctl status shadowsocks -l</span><br><span class=\"line\"> shadowsocks.service</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2019-01-25 08:14:35 UTC; 3min 22s ago</span><br><span class=\"line\"> Main PID: 4264 (ssserver)</span><br><span class=\"line\">   CGroup: /system.slice/shadowsocks.service</span><br><span class=\"line\">           └─4264 /usr/bin/python2 /usr/bin/ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p>\n<p>状态是active说明启动成功</p>\n<p>然后关闭防火墙<br><figure class=\"highlight plain\"><figcaption><span>stop firewalld```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看日志</span><br></pre></td></tr></table></figure></p>\n<p>[root@vultr bin]# journalctl -u shadowsocks.service -f<br>– Logs begin at Fri 2019-01-25 06:19:58 UTC. –<br>Jan 25 08:14:36 vultr.guest ssserver[4264]: 2019-01-25 08:14:36 INFO     starting server at 0.0.0.0:8381<br>Jan 25 08:22:56 vultr.guest systemd[1]: Stopping shadowsocks.service…<br>Jan 25 08:22:56 vultr.guest systemd[1]: Stopped shadowsocks.service.<br>Jan 25 08:23:06 vultr.guest systemd[1]: Started shadowsocks.service.<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: INFO: loading config from /etc/shadowsocks.json<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     loading libcrypto from libcrypto.so.10<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8384<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8383<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8382<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8381<br><code>`</code><br>手机移动网一直连不上不知道什么情况<br>公司网就可以.</p>\n<p>不翻墙只能连新加坡服务器</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一次是在ubantu下操作,版本18.4,内核版本4.15 比4.9高.<br>运行命令<br><figure class=\"highlight plain\"><figcaption><span>|grep bbr ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结果</span><br><span class=\"line\">``` </span><br><span class=\"line\">root@vultr:~# lsmod |grep bbr</span><br><span class=\"line\">tcp_bbr                20480  5</span><br></pre></td></tr></table></figure></p>\n<p>说明已经开启bbr,不需要其他操作</p>\n<hr>\n<p>然后安装ss<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#：apt-get install python-pip</span><br><span class=\"line\">#：pip install shadowsocks</span><br></pre></td></tr></table></figure></p>\n<p>centos7安装pip用<code>yum install python-pip</code></p>\n<p>安装ss的时候报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vultr:~# pip install shadowsocks</span><br><span class=\"line\">Collecting shadowsocks</span><br><span class=\"line\">  Downloading https://files.pythonhosted.org/packages/02/1e/e3a5135255d06813aca6631da31768d44f63692480af3a1621818008eb4a/shadowsocks-2.8.2.tar.gz</span><br><span class=\"line\">    Complete output from command python setup.py egg_info:</span><br><span class=\"line\">    Traceback (most recent call last):</span><br><span class=\"line\">      File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">    ImportError: No module named setuptools</span><br><span class=\"line\"></span><br><span class=\"line\">    ----------------------------------------</span><br><span class=\"line\">Command &quot;python setup.py egg_info&quot; failed with error code 1 in /tmp/pip-build-Q7TlHV/shadowsocks/</span><br></pre></td></tr></table></figure></p>\n<p>(可能是python一些东西版本太低)<br>运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo python -m pip install --upgrade --force pip </span><br><span class=\"line\">sudo pip install setuptools==33.1.1</span><br></pre></td></tr></table></figure></p>\n<p>然后再安装ss,还是报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vultr:~# pip install shadowsocks</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;/usr/bin/pip&quot;, line 9, in &lt;module&gt;</span><br><span class=\"line\">    from pip import main</span><br><span class=\"line\">ImportError: cannot import name main</span><br></pre></td></tr></table></figure></p>\n<p>因为将pip更新后库里面的函数有所变动造成这个问题。 解决方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /usr/bin/pip</span><br><span class=\"line\">将原来的：</span><br><span class=\"line\"></span><br><span class=\"line\">from pip import main</span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    sys.exit(main())</span><br><span class=\"line\">    </span><br><span class=\"line\">改成：</span><br><span class=\"line\"></span><br><span class=\"line\">from pip import __main__</span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    sys.exit(__main__._main())</span><br></pre></td></tr></table></figure></p>\n<p>gedit可以由vi代替,注意“–”和“-”的区别.<br>再安装就成功了.<br>顺便配一下多用户.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p>\n<p>然后编辑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">&quot;port_password&quot;: &#123;</span><br><span class=\"line\">&quot;8381&quot;: &quot;password1&quot;,</span><br><span class=\"line\">&quot;8382&quot;: &quot;password2&quot;,</span><br><span class=\"line\">&quot;8383&quot;: &quot;password3&quot;,</span><br><span class=\"line\">&quot;8384&quot;: &quot;password4&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;timeout&quot;: 300,</span><br><span class=\"line\">&quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再启动服务<figure class=\"highlight plain\"><figcaption><span>-c</span><a href=\"/etc/shadowsocks.json\">-d start```</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">报错:</span><br></pre></td></tr></table></figure></p>\n<p>AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">google后,按照&lt;https://blog.csdn.net/blackfrog_unique/article/details/60320737&gt;大佬解释,这个问题是由于在openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数.</span><br></pre></td></tr></table></figure></p>\n<p>修改方法：</p>\n<p>用vim打开文件：vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py (该路径请根据自己的系统情况自行修改，如果不知道该文件在哪里的话，可以使用find命令查找文件位置)<br>跳转到52行（shadowsocks2.8.2版本，其他版本搜索一下cleanup）<br>进入编辑模式<br>将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)<br>改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)<br>再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)<br>改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)<br>保存并退出<br>启动shadowsocks服务：service shadowsocks start 或 sslocal -c ss配置文件目录<br>问题解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">之后```ssserver -c /etc/shadowsocks.json -d start```正常启动.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-------</span><br><span class=\"line\">2019-1-25</span><br><span class=\"line\"> 今天又来配置了一遍ss,配置文件如下</span><br></pre></td></tr></table></figure></p>\n<p> {<br>“server”:”0.0.0.0”,<br>“password”:{<br>“8381”:”password1”,<br>“8382”:”password2”,<br>“8383”:”password3”,<br>“8384”:”password4”<br>},<br>“timeout”:”300”,<br>“method”:”aes-256-cfb”<br>}<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行```ssserver -c /etc/shadowsocks.json -d start```时,报错</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p> [root@vultr shadowsocks]# ssserver -c /etc/shadowsocks.json<br>INFO: loading config from /etc/shadowsocks.json<br>Traceback (most recent call last):<br>  File “/usr/bin/ssserver”, line 9, in <module><br>    load_entry_point(‘shadowsocks==2.8.2’, ‘console_scripts’, ‘ssserver’)()<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/server.py”, line 34, in main<br>    config = shell.get_config(False)<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/shell.py”, line 262, in get_config<br>    check_config(config, is_local)<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/shell.py”, line 124, in check_config<br>    encrypt.try_cipher(config[‘password’], config[‘method’])<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py”, line 44, in try_cipher<br>    Encryptor(key, method)<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py”, line 83, in <strong>init</strong><br>    random_string(self._method_info[1]))<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py”, line 100, in get_cipher<br>    key, iv_ = EVP_BytesToKey(password, m[0], m[1])<br>  File “/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py”, line 61, in EVP_BytesToKey<br>    md5.update(data)<br>TypeError: must be string or buffer, not dict<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网上找了半天,没有找到类似错误的.最后只能自己分析.</span><br><span class=\"line\">TypeError说明是类型错误,最下面报错的地方是</span><br><span class=\"line\">``` File &quot;/usr/lib/python2.7/site-packages/shadowsocks/encrypt.py&quot;, line 61, in EVP_BytesToKey</span><br><span class=\"line\">   md5.update(data)</span><br></pre></td></tr></table></figure></module></p>\n<p>去了文件的第61行一看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while len(b&apos;&apos;.join(m)) &lt; (key_len + iv_len):</span><br><span class=\"line\">    57         md5 = hashlib.md5()</span><br><span class=\"line\">    58         data = password</span><br><span class=\"line\">    59         if i &gt; 0:</span><br><span class=\"line\">    60             data = m[i - 1] + password</span><br><span class=\"line\">    61         md5.update(data)</span><br><span class=\"line\">    62         m.append(md5.digest())</span><br><span class=\"line\">    63         i += 1</span><br></pre></td></tr></table></figure></p>\n<p>应该是穿入password错误,不应该是dict.但是我配置的是多用户,有多个端口和对应的密码,只能传dict.再一看配置文件,原来多用户需要将”password”改为”port_password”.</p>\n<p>之后运行<figure class=\"highlight plain\"><figcaption><span>-c</span><a href=\"/etc/shadowsocks.json```\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">还是报</span><br><span class=\"line\">```AttributeError: /lib64/libcrypto.so.10: undefined symbol: EVP_CIPHER_CTX_reset</span><br></pre></td></tr></table></figure></p>\n<p>根据openssl官网<a href=\"https://www.openssl.org/docs/man1.1.0/crypto/EVP_CIPHER_CTX_reset.html\" target=\"_blank\" rel=\"noopener\">https://www.openssl.org/docs/man1.1.0/crypto/EVP_CIPHER_CTX_reset.html</a><br>的说法,EVP_CIPHER_CTX was made opaque in OpenSSL 1.1.0. As a result, EVP_CIPHER_CTX_reset() appeared and EVP_CIPHER_CTX_cleanup() disappeared. EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset().<br>用reset替代了cleanup,我之前也换了啊.最后,只能尝试一下,用reset的别名init替代,最后运行成功了!  ???</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr shadowsocks]# vi /usr/lib/python2.7/site-packages/shadowsocks/crypto/openssl.py</span><br><span class=\"line\">[root@vultr shadowsocks]# ssserver -c /etc/shadowsocks.json</span><br><span class=\"line\">INFO: loading config from /etc/shadowsocks.json</span><br><span class=\"line\">2019-01-25 07:40:11 INFO     loading libcrypto from libcrypto.so.10</span><br><span class=\"line\">2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8384</span><br><span class=\"line\">2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8383</span><br><span class=\"line\">2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8382</span><br><span class=\"line\">2019-01-25 07:40:11 INFO     starting server at 0.0.0.0:8381</span><br></pre></td></tr></table></figure>\n<p>然后配置自启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/shadowsocks.service</span><br></pre></td></tr></table></figure></p>\n<p>内容如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>\n<p>然后运行这三个命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr shadowsocks]# systemctl enable shadowsocks</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/shadowsocks.service to /etc/systemd/system/shadowsocks.service.</span><br><span class=\"line\">[root@vultr shadowsocks]# systemctl start shadowsocks</span><br><span class=\"line\">[root@vultr shadowsocks]# systemctl status shadowsocks -l</span><br><span class=\"line\"> shadowsocks.service</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2019-01-25 08:14:35 UTC; 3min 22s ago</span><br><span class=\"line\"> Main PID: 4264 (ssserver)</span><br><span class=\"line\">   CGroup: /system.slice/shadowsocks.service</span><br><span class=\"line\">           └─4264 /usr/bin/python2 /usr/bin/ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p>\n<p>状态是active说明启动成功</p>\n<p>然后关闭防火墙<br><figure class=\"highlight plain\"><figcaption><span>stop firewalld```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看日志</span><br></pre></td></tr></table></figure></p>\n<p>[root@vultr bin]# journalctl -u shadowsocks.service -f<br>– Logs begin at Fri 2019-01-25 06:19:58 UTC. –<br>Jan 25 08:14:36 vultr.guest ssserver[4264]: 2019-01-25 08:14:36 INFO     starting server at 0.0.0.0:8381<br>Jan 25 08:22:56 vultr.guest systemd[1]: Stopping shadowsocks.service…<br>Jan 25 08:22:56 vultr.guest systemd[1]: Stopped shadowsocks.service.<br>Jan 25 08:23:06 vultr.guest systemd[1]: Started shadowsocks.service.<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: INFO: loading config from /etc/shadowsocks.json<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     loading libcrypto from libcrypto.so.10<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8384<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8383<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8382<br>Jan 25 08:23:06 vultr.guest ssserver[4301]: 2019-01-25 08:23:06 INFO     starting server at 0.0.0.0:8381<br><code>`</code><br>手机移动网一直连不上不知道什么情况<br>公司网就可以.</p>\n<p>不翻墙只能连新加坡服务器</p>\n"},{"title":"Mina中的观察者模式","_content":"\nJava的事件机制一般都是通过观察者模式实现的(?).\n观察者模式就必须有观察者和被观察者.\nMina里里面,再一开始\n`  acceptor = new NioSocketAcceptor(NetConfig.MINA_PROCESSOR);`\n就在上面的父类`AbstractIoService`中注册了观察者:\n```\nprotected AbstractIoService(IoSessionConfig sessionConfig, Executor executor) {\n        if (sessionConfig == null) {\n            throw new IllegalArgumentException(\"sessionConfig\");\n        }\n\n        if (getTransportMetadata() == null) {\n            throw new IllegalArgumentException(\"TransportMetadata\");\n        }\n\n        if (!getTransportMetadata().getSessionConfigType().isAssignableFrom(sessionConfig.getClass())) {\n            throw new IllegalArgumentException(\"sessionConfig type: \" + sessionConfig.getClass() + \" (expected: \"\n                    + getTransportMetadata().getSessionConfigType() + \")\");\n        }\n\n\n\n//---------------这里!!!--------------\n        // Create the listeners, and add a first listener : a activation listener\n        // for this service, which will give information on the service state.\n        listeners = new IoServiceListenerSupport(this);\n        listeners.add(serviceActivationListener);\n\n\n\n        // Stores the given session configuration\n        this.sessionConfig = sessionConfig;\n\n        // Make JVM load the exception monitor before some transports\n        // change the thread context class loader.\n        ExceptionMonitor.getInstance();\n\n        if (executor == null) {\n            this.executor = Executors.newCachedThreadPool();\n            createdExecutor = true;\n        } else {\n            this.executor = executor;\n            createdExecutor = false;\n        }\n\n        threadName = getClass().getSimpleName() + '-' + id.incrementAndGet();\n    }\n\n```\n默认的listener再同一个类中类中定义为:\n```\n private final IoServiceListener serviceActivationListener = new IoServiceListener() {\n        public void serviceActivated(IoService service) {\n            // Update lastIoTime.\n            AbstractIoService s = (AbstractIoService) service;\n            IoServiceStatistics _stats = s.getStatistics();\n            _stats.setLastReadTime(s.getActivationTime());\n            _stats.setLastWriteTime(s.getActivationTime());\n            _stats.setLastThroughputCalculationTime(s.getActivationTime());\n\n        }\n\n        public void serviceDeactivated(IoService service) throws Exception {\n            // Empty handler\n        }\n\n        public void serviceIdle(IoService service, IdleStatus idleStatus) throws Exception {\n            // Empty handler\n        }\n\n        public void sessionCreated(IoSession session) throws Exception {\n            // Empty handler\n        }\n\n        public void sessionClosed(IoSession session) throws Exception {\n            // Empty handler\n        }\n\n        public void sessionDestroyed(IoSession session) throws Exception {\n            // Empty handler\n        }\n    };\n```\n有了观察者,现在就是考虑如何再事件发生时通知观察者了.\n\n还是在`AbstractPollingIoProcessor`中的`Processor`内部类的run方法中,(mina2.0.17)\n会调用\n```\n     // Manage newly created session first\n                    if(handleNewSessions() == 0) {\n```\n当有新的session连接时,新的session会加到newSessions里面,\n```\n private int handleNewSessions() {\n            int addedSessions = 0;\n\n            for (S session = newSessions.poll(); session != null; session = newSessions.poll()) {\n                if (addNow(session)) {\n                    // A new session has been created\n                    addedSessions++;\n                }\n            }\n\n            return addedSessions;\n        }\n```\n上面方法调用addNow(S)\n```\n private boolean addNow(S session) {\n            boolean registered = false;\n\n            try {\n                init(session);\n                registered = true;\n\n                // Build the filter chain of this session.\n                IoFilterChainBuilder chainBuilder = session.getService().getFilterChainBuilder();\n                chainBuilder.buildFilterChain(session.getFilterChain());\n\n                // DefaultIoFilterChain.CONNECT_FUTURE is cleared inside here\n                // in AbstractIoFilterChain.fireSessionOpened().\n                // Propagate the SESSION_CREATED event up to the chain\n                IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();\n                listeners.fireSessionCreated(session);\n            } catch (Exception e) {\n                ExceptionMonitor.getInstance().exceptionCaught(e);\n\n                try {\n                    destroy(session);\n                } catch (Exception e1) {\n                    ExceptionMonitor.getInstance().exceptionCaught(e1);\n                } finally {\n                    registered = false;\n                }\n            }\n\n            return registered;\n        }\n```\n里面\n```\n  IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();\n                listeners.fireSessionCreated(session);\n```\nlisteners就是在开头代码里赋值的,而listener也在开头代码里注册了进去.\n在它的`fireSessionCreated`方法里面\n```\npublic void fireSessionCreated(IoSession session) {\n        boolean firstSession = false;\n\n        if (session.getService() instanceof IoConnector) {\n            synchronized (managedSessions) {\n                firstSession = managedSessions.isEmpty();\n            }\n        }\n\n        // If already registered, ignore.\n        if (managedSessions.putIfAbsent(session.getId(), session) != null) {\n            return;\n        }\n\n        // If the first connector session, fire a virtual service activation event.\n        if (firstSession) {\n            fireServiceActivated();\n        }\n\n        // Fire session events.\n        IoFilterChain filterChain = session.getFilterChain();\n        filterChain.fireSessionCreated();\n        filterChain.fireSessionOpened();\n\n        int managedSessionCount = managedSessions.size();\n\n        if (managedSessionCount > largestManagedSessionCount) {\n            largestManagedSessionCount = managedSessionCount;\n        }\n\n        cumulativeManagedSessionCount.incrementAndGet();\n\n        // Fire listener events.\n        for (IoServiceListener l : listeners) {\n            try {\n                l.sessionCreated(session);\n            } catch (Exception e) {\n                ExceptionMonitor.getInstance().exceptionCaught(e);\n            }\n        }\n    }\n```\n可以看到\n```\n   // Fire session events.\n        IoFilterChain filterChain = session.getFilterChain();\n        filterChain.fireSessionCreated();\n        filterChain.fireSessionOpened();\n\n```\nsessionCreated、sessionOpened事件就是这么触发的.\nsessionIdle事件在`mina的IoEvent`里面写了.\n剩下的messageReceive合messageSent还是回到`AbstractPollingIoProcessor`里面,在`run`方法里面\n```\n\n                    // Now, if we have had some incoming or outgoing events,\n                    // deal with them\n                    if (selected > 0) {\n                        // LOG.debug(\"Processing ...\"); // This log hurts one of\n                        // the MDCFilter test...\n                        process();\n                    }\n```\n`process()`方法:\n```\nprivate void process() throws Exception {\n            for (Iterator<S> i = selectedSessions(); i.hasNext();) {\n                S session = i.next();\n                process(session);\n                i.remove();\n            }\n        }\n```\n继续看`process(S session)`方法\n```\n /**\n         * Deal with session ready for the read or write operations, or both.\n         */\n        private void process(S session) {\n            // Process Reads\n            if (isReadable(session) && !session.isReadSuspended()) {\n                read(session);\n            }\n\n            // Process writes\n            if (isWritable(session) && !session.isWriteSuspended() && session.setScheduledForFlush(true)) {\n                // add the session to the queue, if it's not already there\n                flushingSessions.add(session);\n            }\n        }\n```\n#####1.messageReceived\n就是在上面代码的`read`方法里面\n```\nprivate void read(S session) {\n        IoSessionConfig config = session.getConfig();\n        int bufferSize = config.getReadBufferSize();\n        IoBuffer buf = IoBuffer.allocate(bufferSize);\n\n        final boolean hasFragmentation = session.getTransportMetadata().hasFragmentation();\n\n        try {\n            int readBytes = 0;\n            int ret;\n\n            try {\n                if (hasFragmentation) {\n\n                    while ((ret = read(session, buf)) > 0) {\n                        readBytes += ret;\n\n                        if (!buf.hasRemaining()) {\n                            break;\n                        }\n                    }\n                } else {\n                    ret = read(session, buf);\n\n                    if (ret > 0) {\n                        readBytes = ret;\n                    }\n                }\n            } finally {\n                buf.flip();\n            }\n\n            if (readBytes > 0) {\n                IoFilterChain filterChain = session.getFilterChain();\n                filterChain.fireMessageReceived(buf);\n                buf = null;\n\n                if (hasFragmentation) {\n                    if (readBytes << 1 < config.getReadBufferSize()) {\n                        session.decreaseReadBufferSize();\n                    } else if (readBytes == config.getReadBufferSize()) {\n                        session.increaseReadBufferSize();\n                    }\n                }\n            } else {\n                // release temporary buffer when read nothing\n                buf.free(); \n            }\n\n            if (ret < 0) {\n                IoFilterChain filterChain = session.getFilterChain();\n                filterChain.fireInputClosed();\n            }\n        } catch (Exception e) {\n            if ((e instanceof IOException) &&\n                (!(e instanceof PortUnreachableException)\n                        || !AbstractDatagramSessionConfig.class.isAssignableFrom(config.getClass())\n                        || ((AbstractDatagramSessionConfig) config).isCloseOnPortUnreachable())) {\n                scheduleRemove(session);\n            }\n\n            IoFilterChain filterChain = session.getFilterChain();\n            filterChain.fireExceptionCaught(e);\n        }\n    }\n\n```\n#####2.messageSent\n在上面\n```flushingSessions.add(session);```\n加到`flushingSessions`里面.\n在`run()`方法里面\n```\n   // Write the pending requests\n                    long currentTime = System.currentTimeMillis();\n                    flush(currentTime);\n```\nflush\n```\nprivate void flush(long currentTime) {\n            if (flushingSessions.isEmpty()) {\n                return;\n            }\n\n            do {\n                S session = flushingSessions.poll(); // the same one with\n                                                     // firstSession\n\n                if (session == null) {\n                    // Just in case ... It should not happen.\n                    break;\n                }\n\n                // Reset the Schedule for flush flag for this session,\n                // as we are flushing it now\n                session.unscheduledForFlush();\n\n                SessionState state = getState(session);\n\n                switch (state) {\n                case OPENED:\n                    try {\n                        boolean flushedAll = flushNow(session, currentTime);\n\n                        if (flushedAll && !session.getWriteRequestQueue().isEmpty(session)\n                                && !session.isScheduledForFlush()) {\n                            scheduleFlush(session);\n                        }\n                    } catch (Exception e) {\n                        scheduleRemove(session);\n                        session.closeNow();\n                        IoFilterChain filterChain = session.getFilterChain();\n                        filterChain.fireExceptionCaught(e);\n                    }\n\n                    break;\n\n                case CLOSING:\n                    // Skip if the channel is already closed.\n                    break;\n\n                case OPENING:\n                    // Retry later if session is not yet fully initialized.\n                    // (In case that Session.write() is called before addSession()\n                    // is processed)\n                    scheduleFlush(session);\n                    return;\n\n                default:\n                    throw new IllegalStateException(String.valueOf(state));\n                }\n\n            } while (!flushingSessions.isEmpty());\n        }\n\n```\nflushNow\n```\n private boolean flushNow(S session, long currentTime) {\n            if (!session.isConnected()) {\n                scheduleRemove(session);\n                return false;\n            }\n\n            final boolean hasFragmentation = session.getTransportMetadata().hasFragmentation();\n\n            final WriteRequestQueue writeRequestQueue = session.getWriteRequestQueue();\n\n            // Set limitation for the number of written bytes for read-write\n            // fairness. I used maxReadBufferSize * 3 / 2, which yields best\n            // performance in my experience while not breaking fairness much.\n            final int maxWrittenBytes = session.getConfig().getMaxReadBufferSize()\n                    + (session.getConfig().getMaxReadBufferSize() >>> 1);\n            int writtenBytes = 0;\n            WriteRequest req = null;\n\n            try {\n                // Clear OP_WRITE\n                setInterestedInWrite(session, false);\n\n                do {\n                    // Check for pending writes.\n                    req = session.getCurrentWriteRequest();\n\n                    if (req == null) {\n                        req = writeRequestQueue.poll(session);\n\n                        if (req == null) {\n                            break;\n                        }\n\n                        session.setCurrentWriteRequest(req);\n                    }\n\n                    int localWrittenBytes;\n                    Object message = req.getMessage();\n\n                    if (message instanceof IoBuffer) {\n                        localWrittenBytes = writeBuffer(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,\n                                currentTime);\n\n                        if ((localWrittenBytes > 0) && ((IoBuffer) message).hasRemaining()) {\n                            // the buffer isn't empty, we re-interest it in writing\n                            setInterestedInWrite(session, true);\n\n                            return false;\n                        }\n                    } else if (message instanceof FileRegion) {\n                        localWrittenBytes = writeFile(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,\n                                currentTime);\n\n                        // Fix for Java bug on Linux\n                        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5103988\n                        // If there's still data to be written in the FileRegion,\n                        // return 0 indicating that we need\n                        // to pause until writing may resume.\n                        if ((localWrittenBytes > 0) && (((FileRegion) message).getRemainingBytes() > 0)) {\n                            setInterestedInWrite(session, true);\n\n                            return false;\n                        }\n                    } else {\n                        throw new IllegalStateException(\"Don't know how to handle message of type '\"\n                                + message.getClass().getName() + \"'.  Are you missing a protocol encoder?\");\n                    }\n\n                    if (localWrittenBytes == 0) {\n\n                        // Kernel buffer is full.\n                        if (!req.equals(AbstractIoSession.MESSAGE_SENT_REQUEST)) {\n                            setInterestedInWrite(session, true);\n                            return false;\n                        }\n                    } else {\n                        writtenBytes += localWrittenBytes;\n\n                        if (writtenBytes >= maxWrittenBytes) {\n                            // Wrote too much\n                            scheduleFlush(session);\n                            return false;\n                        }\n                    }\n\n                    if (message instanceof IoBuffer) {\n                        ((IoBuffer) message).free();\n                    }\n                } while (writtenBytes < maxWrittenBytes);\n            } catch (Exception e) {\n                if (req != null) {\n                    req.getFuture().setException(e);\n                }\n\n                IoFilterChain filterChain = session.getFilterChain();\n                filterChain.fireExceptionCaught(e);\n                return false;\n            }\n\n            return true;\n        }\n```\n其中\n```\nelse if (message instanceof FileRegion) {\n                        localWrittenBytes = writeFile(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,\n                                currentTime);\n```\nwriteFile\n```\nprivate int writeFile(S session, WriteRequest req, boolean hasFragmentation, int maxLength, long currentTime)\n                throws Exception {\n            int localWrittenBytes;\n            FileRegion region = (FileRegion) req.getMessage();\n\n            if (region.getRemainingBytes() > 0) {\n                int length;\n\n                if (hasFragmentation) {\n                    length = (int) Math.min(region.getRemainingBytes(), maxLength);\n                } else {\n                    length = (int) Math.min(Integer.MAX_VALUE, region.getRemainingBytes());\n                }\n\n                localWrittenBytes = transferFile(session, region, length);\n                region.update(localWrittenBytes);\n            } else {\n                localWrittenBytes = 0;\n            }\n\n            session.increaseWrittenBytes(localWrittenBytes, currentTime);\n\n            if ((region.getRemainingBytes() <= 0) || (!hasFragmentation && (localWrittenBytes != 0))) {\n                fireMessageSent(session, req);\n            }\n\n            return localWrittenBytes;\n        }\n```\n里面\n```\nif ((region.getRemainingBytes() <= 0) || (!hasFragmentation && (localWrittenBytes != 0))) {\n                fireMessageSent(session, req);\n            }\n```\n就会出发messageSent了\n\n\n\n###小结\n可以看到,这些事件都是由`AbstractPollingIoProcessor`的内部类`Processor`的`run`方法驱动的.而`run`方法就是在\n```\nprivate void startupProcessor() {\n        Processor processor = processorRef.get();\n\n        if (processor == null) {\n            processor = new Processor();\n\n            if (processorRef.compareAndSet(null, processor)) {\n                executor.execute(new NamePreservingRunnable(processor, threadName));\n            }\n        }\n\n        // Just stop the select() and start it again, so that the processor\n        // can be activated immediately.\n        wakeup();\n    }\n```\n的时候开始运行的,有三个方法调用`startupProcessor`:\n```\n1.AbstractPollingIoProcessor.add()\n2.AbstractPollingIoProcessor.remove()\n3.AbstractPollingIoProcessor.dispose()\n```\n所以,在第一个连接过来的时候,`executor`里面的线程就在跑`run`方法了.\n\n\n--------\n接一开始的`newSessions`,为什么有新的连接,就会有·session·加进`newSessions`里面呢?\n\n在mina的服务器代码里面,启动mina时需要调用`acceptor.bind();`\n追踪`bind`方法\n```\n public final void bind(Iterable<? extends SocketAddress> localAddresses) throws IOException {\n        if (isDisposing()) {\n            throw new IllegalStateException(\"The Accpetor disposed is being disposed.\");\n        }\n\n        if (localAddresses == null) {\n            throw new IllegalArgumentException(\"localAddresses\");\n        }\n\n        List<SocketAddress> localAddressesCopy = new ArrayList<SocketAddress>();\n\n        for (SocketAddress a : localAddresses) {\n            checkAddressType(a);\n            localAddressesCopy.add(a);\n        }\n\n        if (localAddressesCopy.isEmpty()) {\n            throw new IllegalArgumentException(\"localAddresses is empty.\");\n        }\n\n        boolean activate = false;\n        synchronized (bindLock) {\n            synchronized (boundAddresses) {\n                if (boundAddresses.isEmpty()) {\n                    activate = true;\n                }\n            }\n\n            if (getHandler() == null) {\n                throw new IllegalStateException(\"handler is not set.\");\n            }\n\n            try {\n                Set<SocketAddress> addresses = bindInternal(localAddressesCopy);\n\n                synchronized (boundAddresses) {\n                    boundAddresses.addAll(addresses);\n                }\n            } catch (IOException e) {\n                throw e;\n            } catch (RuntimeException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new RuntimeIoException(\"Failed to bind to: \" + getLocalAddresses(), e);\n            }\n        }\n\n        if (activate) {\n            getListeners().fireServiceActivated();\n        }\n    }\n```\n有一行\n``` Set<SocketAddress> addresses = bindInternal(localAddressesCopy);````\n继续追踪\n```\n protected final Set<SocketAddress> bindInternal(List<? extends SocketAddress> localAddresses) throws Exception {\n        // Create a bind request as a Future operation. When the selector\n        // have handled the registration, it will signal this future.\n        AcceptorOperationFuture request = new AcceptorOperationFuture(localAddresses);\n\n        // adds the Registration request to the queue for the Workers\n        // to handle\n        registerQueue.add(request);\n\n        // creates the Acceptor instance and has the local\n        // executor kick it off.\n        startupAcceptor();\n\n        // As we just started the acceptor, we have to unblock the select()\n        // in order to process the bind request we just have added to the\n        // registerQueue.\n        try {\n            lock.acquire();\n\n            // Wait a bit to give a chance to the Acceptor thread to do the select()\n            Thread.sleep(10);\n            wakeup();\n        } finally {\n            lock.release();\n        }\n\n        // Now, we wait until this request is completed.\n        request.awaitUninterruptibly();\n\n        if (request.getException() != null) {\n            throw request.getException();\n        }\n\n        // Update the local addresses.\n        // setLocalAddresses() shouldn't be called from the worker thread\n        // because of deadlock.\n        Set<SocketAddress> newLocalAddresses = new HashSet<SocketAddress>();\n\n        for (H handle : boundHandles.values()) {\n            newLocalAddresses.add(localAddress(handle));\n        }\n\n        return newLocalAddresses;\n    }\n```\n里面调用了` startupAcceptor();`\n```\nprivate void startupAcceptor() throws InterruptedException {\n        // If the acceptor is not ready, clear the queues\n        // TODO : they should already be clean : do we have to do that ?\n        if (!selectable) {\n            registerQueue.clear();\n            cancelQueue.clear();\n        }\n\n        // start the acceptor if not already started\n        Acceptor acceptor = acceptorRef.get();\n\n        if (acceptor == null) {\n            lock.acquire();\n            acceptor = new Acceptor();\n\n            if (acceptorRef.compareAndSet(null, acceptor)) {\n                executeWorker(acceptor);\n            } else {\n                lock.release();\n            }\n        }\n    }\n```\n开启了一个线程执行`Acceptor`的`run()`方法:\n```\nprivate void startupAcceptor() throws InterruptedException {\n        // If the acceptor is not ready, clear the queues\n        // TODO : they should already be clean : do we have to do that ?\n        if (!selectable) {\n            registerQueue.clear();\n            cancelQueue.clear();\n        }\n\n        // start the acceptor if not already started\n        Acceptor acceptor = acceptorRef.get();\n\n        if (acceptor == null) {\n            lock.acquire();\n            acceptor = new Acceptor();\n\n            if (acceptorRef.compareAndSet(null, acceptor)) {\n                executeWorker(acceptor);\n            } else {\n                lock.release();\n            }\n        }\n    }\n```\n可以看到\n```\nif (selected > 0) {\n                        // We have some connection request, let's process\n                        // them here.\n                        processHandles(selectedHandles());\n                    }\n\n```\n`processHandles`方法:\n```\nprivate void processHandles(Iterator<H> handles) throws Exception {\n            while (handles.hasNext()) {\n                H handle = handles.next();\n                handles.remove();\n\n                // Associates a new created connection to a processor,\n                // and get back a session\n                S session = accept(processor, handle);\n\n                if (session == null) {\n                    continue;\n                }\n\n                initSession(session, null, null);\n\n                // add the session to the SocketIoProcessor\n                session.getProcessor().add(session);\n            }\n        }\n```\n这个方法里面调用了三个方法:\n#####1.    S session = accept(processor, handle);\n```\nprotected NioSession accept(IoProcessor<NioSession> processor, ServerSocketChannel handle) throws Exception {\n\n        SelectionKey key = null;\n\n        if (handle != null) {\n            key = handle.keyFor(selector);\n        }\n\n        if ((key == null) || (!key.isValid()) || (!key.isAcceptable())) {\n            return null;\n        }\n\n        // accept the connection from the client\n        SocketChannel ch = handle.accept();\n\n        if (ch == null) {\n            return null;\n        }\n\n        return new NioSocketSession(this, processor, ch);\n    }\n```\nnew了一个session并且注册了SocketChannel\n#####2. initSession(session, null, null);\n```\n    protected final void initSession(IoSession session, IoFuture future, IoSessionInitializer sessionInitializer) {\n        // Update lastIoTime if needed.\n        if (stats.getLastReadTime() == 0) {\n            stats.setLastReadTime(getActivationTime());\n        }\n\n        if (stats.getLastWriteTime() == 0) {\n            stats.setLastWriteTime(getActivationTime());\n        }\n\n        // Every property but attributeMap should be set now.\n        // Now initialize the attributeMap.  The reason why we initialize\n        // the attributeMap at last is to make sure all session properties\n        // such as remoteAddress are provided to IoSessionDataStructureFactory.\n        try {\n            ((AbstractIoSession) session).setAttributeMap(session.getService().getSessionDataStructureFactory()\n                    .getAttributeMap(session));\n        } catch (IoSessionInitializationException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new IoSessionInitializationException(\"Failed to initialize an attributeMap.\", e);\n        }\n\n        try {\n            ((AbstractIoSession) session).setWriteRequestQueue(session.getService().getSessionDataStructureFactory()\n                    .getWriteRequestQueue(session));\n        } catch (IoSessionInitializationException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new IoSessionInitializationException(\"Failed to initialize a writeRequestQueue.\", e);\n        }\n\n        if ((future != null) && (future instanceof ConnectFuture)) {\n            // DefaultIoFilterChain will notify the future. (We support ConnectFuture only for now).\n            session.setAttribute(DefaultIoFilterChain.SESSION_CREATED_FUTURE, future);\n        }\n\n        if (sessionInitializer != null) {\n            sessionInitializer.initializeSession(session, future);\n        }\n\n        finishSessionInitialization0(session, future);\n    }\n```\n对`session`各种初始化\n#####3. session.getProcessor().add(session);\n这里的`Processor`就是`AbstractPollingIoProcessor`\n```\npublic final void add(S session) {\n        if (disposed || disposing) {\n            throw new IllegalStateException(\"Already disposed.\");\n        }\n\n        // Adds the session to the newSession queue and starts the worker\n        newSessions.add(session);\n        startupProcessor();\n    }\n```\n这里就解决了上面没有提到的\n1.将`session`加到`newSessions`里面;\n2.`startupProcessor();`运行了那个关键的`Processor`的`Run()`方法\n```\n private void startupProcessor() {\n        Processor processor = processorRef.get();\n\n        if (processor == null) {\n            processor = new Processor();\n\n            if (processorRef.compareAndSet(null, processor)) {\n                executor.execute(new NamePreservingRunnable(processor, threadName));\n            }\n        }\n\n        // Just stop the select() and start it again, so that the processor\n        // can be activated immediately.\n        wakeup();\n    }\n```\n\n","source":"_posts/Mina中的观察者模式.md","raw":"---\ntitle: Mina中的观察者模式\ncategories :\n- 技术\ntags :\n- Java\n- mina\n---\n\nJava的事件机制一般都是通过观察者模式实现的(?).\n观察者模式就必须有观察者和被观察者.\nMina里里面,再一开始\n`  acceptor = new NioSocketAcceptor(NetConfig.MINA_PROCESSOR);`\n就在上面的父类`AbstractIoService`中注册了观察者:\n```\nprotected AbstractIoService(IoSessionConfig sessionConfig, Executor executor) {\n        if (sessionConfig == null) {\n            throw new IllegalArgumentException(\"sessionConfig\");\n        }\n\n        if (getTransportMetadata() == null) {\n            throw new IllegalArgumentException(\"TransportMetadata\");\n        }\n\n        if (!getTransportMetadata().getSessionConfigType().isAssignableFrom(sessionConfig.getClass())) {\n            throw new IllegalArgumentException(\"sessionConfig type: \" + sessionConfig.getClass() + \" (expected: \"\n                    + getTransportMetadata().getSessionConfigType() + \")\");\n        }\n\n\n\n//---------------这里!!!--------------\n        // Create the listeners, and add a first listener : a activation listener\n        // for this service, which will give information on the service state.\n        listeners = new IoServiceListenerSupport(this);\n        listeners.add(serviceActivationListener);\n\n\n\n        // Stores the given session configuration\n        this.sessionConfig = sessionConfig;\n\n        // Make JVM load the exception monitor before some transports\n        // change the thread context class loader.\n        ExceptionMonitor.getInstance();\n\n        if (executor == null) {\n            this.executor = Executors.newCachedThreadPool();\n            createdExecutor = true;\n        } else {\n            this.executor = executor;\n            createdExecutor = false;\n        }\n\n        threadName = getClass().getSimpleName() + '-' + id.incrementAndGet();\n    }\n\n```\n默认的listener再同一个类中类中定义为:\n```\n private final IoServiceListener serviceActivationListener = new IoServiceListener() {\n        public void serviceActivated(IoService service) {\n            // Update lastIoTime.\n            AbstractIoService s = (AbstractIoService) service;\n            IoServiceStatistics _stats = s.getStatistics();\n            _stats.setLastReadTime(s.getActivationTime());\n            _stats.setLastWriteTime(s.getActivationTime());\n            _stats.setLastThroughputCalculationTime(s.getActivationTime());\n\n        }\n\n        public void serviceDeactivated(IoService service) throws Exception {\n            // Empty handler\n        }\n\n        public void serviceIdle(IoService service, IdleStatus idleStatus) throws Exception {\n            // Empty handler\n        }\n\n        public void sessionCreated(IoSession session) throws Exception {\n            // Empty handler\n        }\n\n        public void sessionClosed(IoSession session) throws Exception {\n            // Empty handler\n        }\n\n        public void sessionDestroyed(IoSession session) throws Exception {\n            // Empty handler\n        }\n    };\n```\n有了观察者,现在就是考虑如何再事件发生时通知观察者了.\n\n还是在`AbstractPollingIoProcessor`中的`Processor`内部类的run方法中,(mina2.0.17)\n会调用\n```\n     // Manage newly created session first\n                    if(handleNewSessions() == 0) {\n```\n当有新的session连接时,新的session会加到newSessions里面,\n```\n private int handleNewSessions() {\n            int addedSessions = 0;\n\n            for (S session = newSessions.poll(); session != null; session = newSessions.poll()) {\n                if (addNow(session)) {\n                    // A new session has been created\n                    addedSessions++;\n                }\n            }\n\n            return addedSessions;\n        }\n```\n上面方法调用addNow(S)\n```\n private boolean addNow(S session) {\n            boolean registered = false;\n\n            try {\n                init(session);\n                registered = true;\n\n                // Build the filter chain of this session.\n                IoFilterChainBuilder chainBuilder = session.getService().getFilterChainBuilder();\n                chainBuilder.buildFilterChain(session.getFilterChain());\n\n                // DefaultIoFilterChain.CONNECT_FUTURE is cleared inside here\n                // in AbstractIoFilterChain.fireSessionOpened().\n                // Propagate the SESSION_CREATED event up to the chain\n                IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();\n                listeners.fireSessionCreated(session);\n            } catch (Exception e) {\n                ExceptionMonitor.getInstance().exceptionCaught(e);\n\n                try {\n                    destroy(session);\n                } catch (Exception e1) {\n                    ExceptionMonitor.getInstance().exceptionCaught(e1);\n                } finally {\n                    registered = false;\n                }\n            }\n\n            return registered;\n        }\n```\n里面\n```\n  IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();\n                listeners.fireSessionCreated(session);\n```\nlisteners就是在开头代码里赋值的,而listener也在开头代码里注册了进去.\n在它的`fireSessionCreated`方法里面\n```\npublic void fireSessionCreated(IoSession session) {\n        boolean firstSession = false;\n\n        if (session.getService() instanceof IoConnector) {\n            synchronized (managedSessions) {\n                firstSession = managedSessions.isEmpty();\n            }\n        }\n\n        // If already registered, ignore.\n        if (managedSessions.putIfAbsent(session.getId(), session) != null) {\n            return;\n        }\n\n        // If the first connector session, fire a virtual service activation event.\n        if (firstSession) {\n            fireServiceActivated();\n        }\n\n        // Fire session events.\n        IoFilterChain filterChain = session.getFilterChain();\n        filterChain.fireSessionCreated();\n        filterChain.fireSessionOpened();\n\n        int managedSessionCount = managedSessions.size();\n\n        if (managedSessionCount > largestManagedSessionCount) {\n            largestManagedSessionCount = managedSessionCount;\n        }\n\n        cumulativeManagedSessionCount.incrementAndGet();\n\n        // Fire listener events.\n        for (IoServiceListener l : listeners) {\n            try {\n                l.sessionCreated(session);\n            } catch (Exception e) {\n                ExceptionMonitor.getInstance().exceptionCaught(e);\n            }\n        }\n    }\n```\n可以看到\n```\n   // Fire session events.\n        IoFilterChain filterChain = session.getFilterChain();\n        filterChain.fireSessionCreated();\n        filterChain.fireSessionOpened();\n\n```\nsessionCreated、sessionOpened事件就是这么触发的.\nsessionIdle事件在`mina的IoEvent`里面写了.\n剩下的messageReceive合messageSent还是回到`AbstractPollingIoProcessor`里面,在`run`方法里面\n```\n\n                    // Now, if we have had some incoming or outgoing events,\n                    // deal with them\n                    if (selected > 0) {\n                        // LOG.debug(\"Processing ...\"); // This log hurts one of\n                        // the MDCFilter test...\n                        process();\n                    }\n```\n`process()`方法:\n```\nprivate void process() throws Exception {\n            for (Iterator<S> i = selectedSessions(); i.hasNext();) {\n                S session = i.next();\n                process(session);\n                i.remove();\n            }\n        }\n```\n继续看`process(S session)`方法\n```\n /**\n         * Deal with session ready for the read or write operations, or both.\n         */\n        private void process(S session) {\n            // Process Reads\n            if (isReadable(session) && !session.isReadSuspended()) {\n                read(session);\n            }\n\n            // Process writes\n            if (isWritable(session) && !session.isWriteSuspended() && session.setScheduledForFlush(true)) {\n                // add the session to the queue, if it's not already there\n                flushingSessions.add(session);\n            }\n        }\n```\n#####1.messageReceived\n就是在上面代码的`read`方法里面\n```\nprivate void read(S session) {\n        IoSessionConfig config = session.getConfig();\n        int bufferSize = config.getReadBufferSize();\n        IoBuffer buf = IoBuffer.allocate(bufferSize);\n\n        final boolean hasFragmentation = session.getTransportMetadata().hasFragmentation();\n\n        try {\n            int readBytes = 0;\n            int ret;\n\n            try {\n                if (hasFragmentation) {\n\n                    while ((ret = read(session, buf)) > 0) {\n                        readBytes += ret;\n\n                        if (!buf.hasRemaining()) {\n                            break;\n                        }\n                    }\n                } else {\n                    ret = read(session, buf);\n\n                    if (ret > 0) {\n                        readBytes = ret;\n                    }\n                }\n            } finally {\n                buf.flip();\n            }\n\n            if (readBytes > 0) {\n                IoFilterChain filterChain = session.getFilterChain();\n                filterChain.fireMessageReceived(buf);\n                buf = null;\n\n                if (hasFragmentation) {\n                    if (readBytes << 1 < config.getReadBufferSize()) {\n                        session.decreaseReadBufferSize();\n                    } else if (readBytes == config.getReadBufferSize()) {\n                        session.increaseReadBufferSize();\n                    }\n                }\n            } else {\n                // release temporary buffer when read nothing\n                buf.free(); \n            }\n\n            if (ret < 0) {\n                IoFilterChain filterChain = session.getFilterChain();\n                filterChain.fireInputClosed();\n            }\n        } catch (Exception e) {\n            if ((e instanceof IOException) &&\n                (!(e instanceof PortUnreachableException)\n                        || !AbstractDatagramSessionConfig.class.isAssignableFrom(config.getClass())\n                        || ((AbstractDatagramSessionConfig) config).isCloseOnPortUnreachable())) {\n                scheduleRemove(session);\n            }\n\n            IoFilterChain filterChain = session.getFilterChain();\n            filterChain.fireExceptionCaught(e);\n        }\n    }\n\n```\n#####2.messageSent\n在上面\n```flushingSessions.add(session);```\n加到`flushingSessions`里面.\n在`run()`方法里面\n```\n   // Write the pending requests\n                    long currentTime = System.currentTimeMillis();\n                    flush(currentTime);\n```\nflush\n```\nprivate void flush(long currentTime) {\n            if (flushingSessions.isEmpty()) {\n                return;\n            }\n\n            do {\n                S session = flushingSessions.poll(); // the same one with\n                                                     // firstSession\n\n                if (session == null) {\n                    // Just in case ... It should not happen.\n                    break;\n                }\n\n                // Reset the Schedule for flush flag for this session,\n                // as we are flushing it now\n                session.unscheduledForFlush();\n\n                SessionState state = getState(session);\n\n                switch (state) {\n                case OPENED:\n                    try {\n                        boolean flushedAll = flushNow(session, currentTime);\n\n                        if (flushedAll && !session.getWriteRequestQueue().isEmpty(session)\n                                && !session.isScheduledForFlush()) {\n                            scheduleFlush(session);\n                        }\n                    } catch (Exception e) {\n                        scheduleRemove(session);\n                        session.closeNow();\n                        IoFilterChain filterChain = session.getFilterChain();\n                        filterChain.fireExceptionCaught(e);\n                    }\n\n                    break;\n\n                case CLOSING:\n                    // Skip if the channel is already closed.\n                    break;\n\n                case OPENING:\n                    // Retry later if session is not yet fully initialized.\n                    // (In case that Session.write() is called before addSession()\n                    // is processed)\n                    scheduleFlush(session);\n                    return;\n\n                default:\n                    throw new IllegalStateException(String.valueOf(state));\n                }\n\n            } while (!flushingSessions.isEmpty());\n        }\n\n```\nflushNow\n```\n private boolean flushNow(S session, long currentTime) {\n            if (!session.isConnected()) {\n                scheduleRemove(session);\n                return false;\n            }\n\n            final boolean hasFragmentation = session.getTransportMetadata().hasFragmentation();\n\n            final WriteRequestQueue writeRequestQueue = session.getWriteRequestQueue();\n\n            // Set limitation for the number of written bytes for read-write\n            // fairness. I used maxReadBufferSize * 3 / 2, which yields best\n            // performance in my experience while not breaking fairness much.\n            final int maxWrittenBytes = session.getConfig().getMaxReadBufferSize()\n                    + (session.getConfig().getMaxReadBufferSize() >>> 1);\n            int writtenBytes = 0;\n            WriteRequest req = null;\n\n            try {\n                // Clear OP_WRITE\n                setInterestedInWrite(session, false);\n\n                do {\n                    // Check for pending writes.\n                    req = session.getCurrentWriteRequest();\n\n                    if (req == null) {\n                        req = writeRequestQueue.poll(session);\n\n                        if (req == null) {\n                            break;\n                        }\n\n                        session.setCurrentWriteRequest(req);\n                    }\n\n                    int localWrittenBytes;\n                    Object message = req.getMessage();\n\n                    if (message instanceof IoBuffer) {\n                        localWrittenBytes = writeBuffer(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,\n                                currentTime);\n\n                        if ((localWrittenBytes > 0) && ((IoBuffer) message).hasRemaining()) {\n                            // the buffer isn't empty, we re-interest it in writing\n                            setInterestedInWrite(session, true);\n\n                            return false;\n                        }\n                    } else if (message instanceof FileRegion) {\n                        localWrittenBytes = writeFile(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,\n                                currentTime);\n\n                        // Fix for Java bug on Linux\n                        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5103988\n                        // If there's still data to be written in the FileRegion,\n                        // return 0 indicating that we need\n                        // to pause until writing may resume.\n                        if ((localWrittenBytes > 0) && (((FileRegion) message).getRemainingBytes() > 0)) {\n                            setInterestedInWrite(session, true);\n\n                            return false;\n                        }\n                    } else {\n                        throw new IllegalStateException(\"Don't know how to handle message of type '\"\n                                + message.getClass().getName() + \"'.  Are you missing a protocol encoder?\");\n                    }\n\n                    if (localWrittenBytes == 0) {\n\n                        // Kernel buffer is full.\n                        if (!req.equals(AbstractIoSession.MESSAGE_SENT_REQUEST)) {\n                            setInterestedInWrite(session, true);\n                            return false;\n                        }\n                    } else {\n                        writtenBytes += localWrittenBytes;\n\n                        if (writtenBytes >= maxWrittenBytes) {\n                            // Wrote too much\n                            scheduleFlush(session);\n                            return false;\n                        }\n                    }\n\n                    if (message instanceof IoBuffer) {\n                        ((IoBuffer) message).free();\n                    }\n                } while (writtenBytes < maxWrittenBytes);\n            } catch (Exception e) {\n                if (req != null) {\n                    req.getFuture().setException(e);\n                }\n\n                IoFilterChain filterChain = session.getFilterChain();\n                filterChain.fireExceptionCaught(e);\n                return false;\n            }\n\n            return true;\n        }\n```\n其中\n```\nelse if (message instanceof FileRegion) {\n                        localWrittenBytes = writeFile(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,\n                                currentTime);\n```\nwriteFile\n```\nprivate int writeFile(S session, WriteRequest req, boolean hasFragmentation, int maxLength, long currentTime)\n                throws Exception {\n            int localWrittenBytes;\n            FileRegion region = (FileRegion) req.getMessage();\n\n            if (region.getRemainingBytes() > 0) {\n                int length;\n\n                if (hasFragmentation) {\n                    length = (int) Math.min(region.getRemainingBytes(), maxLength);\n                } else {\n                    length = (int) Math.min(Integer.MAX_VALUE, region.getRemainingBytes());\n                }\n\n                localWrittenBytes = transferFile(session, region, length);\n                region.update(localWrittenBytes);\n            } else {\n                localWrittenBytes = 0;\n            }\n\n            session.increaseWrittenBytes(localWrittenBytes, currentTime);\n\n            if ((region.getRemainingBytes() <= 0) || (!hasFragmentation && (localWrittenBytes != 0))) {\n                fireMessageSent(session, req);\n            }\n\n            return localWrittenBytes;\n        }\n```\n里面\n```\nif ((region.getRemainingBytes() <= 0) || (!hasFragmentation && (localWrittenBytes != 0))) {\n                fireMessageSent(session, req);\n            }\n```\n就会出发messageSent了\n\n\n\n###小结\n可以看到,这些事件都是由`AbstractPollingIoProcessor`的内部类`Processor`的`run`方法驱动的.而`run`方法就是在\n```\nprivate void startupProcessor() {\n        Processor processor = processorRef.get();\n\n        if (processor == null) {\n            processor = new Processor();\n\n            if (processorRef.compareAndSet(null, processor)) {\n                executor.execute(new NamePreservingRunnable(processor, threadName));\n            }\n        }\n\n        // Just stop the select() and start it again, so that the processor\n        // can be activated immediately.\n        wakeup();\n    }\n```\n的时候开始运行的,有三个方法调用`startupProcessor`:\n```\n1.AbstractPollingIoProcessor.add()\n2.AbstractPollingIoProcessor.remove()\n3.AbstractPollingIoProcessor.dispose()\n```\n所以,在第一个连接过来的时候,`executor`里面的线程就在跑`run`方法了.\n\n\n--------\n接一开始的`newSessions`,为什么有新的连接,就会有·session·加进`newSessions`里面呢?\n\n在mina的服务器代码里面,启动mina时需要调用`acceptor.bind();`\n追踪`bind`方法\n```\n public final void bind(Iterable<? extends SocketAddress> localAddresses) throws IOException {\n        if (isDisposing()) {\n            throw new IllegalStateException(\"The Accpetor disposed is being disposed.\");\n        }\n\n        if (localAddresses == null) {\n            throw new IllegalArgumentException(\"localAddresses\");\n        }\n\n        List<SocketAddress> localAddressesCopy = new ArrayList<SocketAddress>();\n\n        for (SocketAddress a : localAddresses) {\n            checkAddressType(a);\n            localAddressesCopy.add(a);\n        }\n\n        if (localAddressesCopy.isEmpty()) {\n            throw new IllegalArgumentException(\"localAddresses is empty.\");\n        }\n\n        boolean activate = false;\n        synchronized (bindLock) {\n            synchronized (boundAddresses) {\n                if (boundAddresses.isEmpty()) {\n                    activate = true;\n                }\n            }\n\n            if (getHandler() == null) {\n                throw new IllegalStateException(\"handler is not set.\");\n            }\n\n            try {\n                Set<SocketAddress> addresses = bindInternal(localAddressesCopy);\n\n                synchronized (boundAddresses) {\n                    boundAddresses.addAll(addresses);\n                }\n            } catch (IOException e) {\n                throw e;\n            } catch (RuntimeException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new RuntimeIoException(\"Failed to bind to: \" + getLocalAddresses(), e);\n            }\n        }\n\n        if (activate) {\n            getListeners().fireServiceActivated();\n        }\n    }\n```\n有一行\n``` Set<SocketAddress> addresses = bindInternal(localAddressesCopy);````\n继续追踪\n```\n protected final Set<SocketAddress> bindInternal(List<? extends SocketAddress> localAddresses) throws Exception {\n        // Create a bind request as a Future operation. When the selector\n        // have handled the registration, it will signal this future.\n        AcceptorOperationFuture request = new AcceptorOperationFuture(localAddresses);\n\n        // adds the Registration request to the queue for the Workers\n        // to handle\n        registerQueue.add(request);\n\n        // creates the Acceptor instance and has the local\n        // executor kick it off.\n        startupAcceptor();\n\n        // As we just started the acceptor, we have to unblock the select()\n        // in order to process the bind request we just have added to the\n        // registerQueue.\n        try {\n            lock.acquire();\n\n            // Wait a bit to give a chance to the Acceptor thread to do the select()\n            Thread.sleep(10);\n            wakeup();\n        } finally {\n            lock.release();\n        }\n\n        // Now, we wait until this request is completed.\n        request.awaitUninterruptibly();\n\n        if (request.getException() != null) {\n            throw request.getException();\n        }\n\n        // Update the local addresses.\n        // setLocalAddresses() shouldn't be called from the worker thread\n        // because of deadlock.\n        Set<SocketAddress> newLocalAddresses = new HashSet<SocketAddress>();\n\n        for (H handle : boundHandles.values()) {\n            newLocalAddresses.add(localAddress(handle));\n        }\n\n        return newLocalAddresses;\n    }\n```\n里面调用了` startupAcceptor();`\n```\nprivate void startupAcceptor() throws InterruptedException {\n        // If the acceptor is not ready, clear the queues\n        // TODO : they should already be clean : do we have to do that ?\n        if (!selectable) {\n            registerQueue.clear();\n            cancelQueue.clear();\n        }\n\n        // start the acceptor if not already started\n        Acceptor acceptor = acceptorRef.get();\n\n        if (acceptor == null) {\n            lock.acquire();\n            acceptor = new Acceptor();\n\n            if (acceptorRef.compareAndSet(null, acceptor)) {\n                executeWorker(acceptor);\n            } else {\n                lock.release();\n            }\n        }\n    }\n```\n开启了一个线程执行`Acceptor`的`run()`方法:\n```\nprivate void startupAcceptor() throws InterruptedException {\n        // If the acceptor is not ready, clear the queues\n        // TODO : they should already be clean : do we have to do that ?\n        if (!selectable) {\n            registerQueue.clear();\n            cancelQueue.clear();\n        }\n\n        // start the acceptor if not already started\n        Acceptor acceptor = acceptorRef.get();\n\n        if (acceptor == null) {\n            lock.acquire();\n            acceptor = new Acceptor();\n\n            if (acceptorRef.compareAndSet(null, acceptor)) {\n                executeWorker(acceptor);\n            } else {\n                lock.release();\n            }\n        }\n    }\n```\n可以看到\n```\nif (selected > 0) {\n                        // We have some connection request, let's process\n                        // them here.\n                        processHandles(selectedHandles());\n                    }\n\n```\n`processHandles`方法:\n```\nprivate void processHandles(Iterator<H> handles) throws Exception {\n            while (handles.hasNext()) {\n                H handle = handles.next();\n                handles.remove();\n\n                // Associates a new created connection to a processor,\n                // and get back a session\n                S session = accept(processor, handle);\n\n                if (session == null) {\n                    continue;\n                }\n\n                initSession(session, null, null);\n\n                // add the session to the SocketIoProcessor\n                session.getProcessor().add(session);\n            }\n        }\n```\n这个方法里面调用了三个方法:\n#####1.    S session = accept(processor, handle);\n```\nprotected NioSession accept(IoProcessor<NioSession> processor, ServerSocketChannel handle) throws Exception {\n\n        SelectionKey key = null;\n\n        if (handle != null) {\n            key = handle.keyFor(selector);\n        }\n\n        if ((key == null) || (!key.isValid()) || (!key.isAcceptable())) {\n            return null;\n        }\n\n        // accept the connection from the client\n        SocketChannel ch = handle.accept();\n\n        if (ch == null) {\n            return null;\n        }\n\n        return new NioSocketSession(this, processor, ch);\n    }\n```\nnew了一个session并且注册了SocketChannel\n#####2. initSession(session, null, null);\n```\n    protected final void initSession(IoSession session, IoFuture future, IoSessionInitializer sessionInitializer) {\n        // Update lastIoTime if needed.\n        if (stats.getLastReadTime() == 0) {\n            stats.setLastReadTime(getActivationTime());\n        }\n\n        if (stats.getLastWriteTime() == 0) {\n            stats.setLastWriteTime(getActivationTime());\n        }\n\n        // Every property but attributeMap should be set now.\n        // Now initialize the attributeMap.  The reason why we initialize\n        // the attributeMap at last is to make sure all session properties\n        // such as remoteAddress are provided to IoSessionDataStructureFactory.\n        try {\n            ((AbstractIoSession) session).setAttributeMap(session.getService().getSessionDataStructureFactory()\n                    .getAttributeMap(session));\n        } catch (IoSessionInitializationException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new IoSessionInitializationException(\"Failed to initialize an attributeMap.\", e);\n        }\n\n        try {\n            ((AbstractIoSession) session).setWriteRequestQueue(session.getService().getSessionDataStructureFactory()\n                    .getWriteRequestQueue(session));\n        } catch (IoSessionInitializationException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new IoSessionInitializationException(\"Failed to initialize a writeRequestQueue.\", e);\n        }\n\n        if ((future != null) && (future instanceof ConnectFuture)) {\n            // DefaultIoFilterChain will notify the future. (We support ConnectFuture only for now).\n            session.setAttribute(DefaultIoFilterChain.SESSION_CREATED_FUTURE, future);\n        }\n\n        if (sessionInitializer != null) {\n            sessionInitializer.initializeSession(session, future);\n        }\n\n        finishSessionInitialization0(session, future);\n    }\n```\n对`session`各种初始化\n#####3. session.getProcessor().add(session);\n这里的`Processor`就是`AbstractPollingIoProcessor`\n```\npublic final void add(S session) {\n        if (disposed || disposing) {\n            throw new IllegalStateException(\"Already disposed.\");\n        }\n\n        // Adds the session to the newSession queue and starts the worker\n        newSessions.add(session);\n        startupProcessor();\n    }\n```\n这里就解决了上面没有提到的\n1.将`session`加到`newSessions`里面;\n2.`startupProcessor();`运行了那个关键的`Processor`的`Run()`方法\n```\n private void startupProcessor() {\n        Processor processor = processorRef.get();\n\n        if (processor == null) {\n            processor = new Processor();\n\n            if (processorRef.compareAndSet(null, processor)) {\n                executor.execute(new NamePreservingRunnable(processor, threadName));\n            }\n        }\n\n        // Just stop the select() and start it again, so that the processor\n        // can be activated immediately.\n        wakeup();\n    }\n```\n\n","slug":"Mina中的观察者模式","published":1,"date":"2019-05-11T11:33:08.210Z","updated":"2019-05-11T11:33:08.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvx7vbyl007jm74zg2idhqkm","content":"<p>Java的事件机制一般都是通过观察者模式实现的(?).<br>观察者模式就必须有观察者和被观察者.<br>Mina里里面,再一开始<br><code>acceptor = new NioSocketAcceptor(NetConfig.MINA_PROCESSOR);</code><br>就在上面的父类<code>AbstractIoService</code>中注册了观察者:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected AbstractIoService(IoSessionConfig sessionConfig, Executor executor) &#123;</span><br><span class=\"line\">        if (sessionConfig == null) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;sessionConfig&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (getTransportMetadata() == null) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;TransportMetadata&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!getTransportMetadata().getSessionConfigType().isAssignableFrom(sessionConfig.getClass())) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;sessionConfig type: &quot; + sessionConfig.getClass() + &quot; (expected: &quot;</span><br><span class=\"line\">                    + getTransportMetadata().getSessionConfigType() + &quot;)&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//---------------这里!!!--------------</span><br><span class=\"line\">        // Create the listeners, and add a first listener : a activation listener</span><br><span class=\"line\">        // for this service, which will give information on the service state.</span><br><span class=\"line\">        listeners = new IoServiceListenerSupport(this);</span><br><span class=\"line\">        listeners.add(serviceActivationListener);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // Stores the given session configuration</span><br><span class=\"line\">        this.sessionConfig = sessionConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Make JVM load the exception monitor before some transports</span><br><span class=\"line\">        // change the thread context class loader.</span><br><span class=\"line\">        ExceptionMonitor.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (executor == null) &#123;</span><br><span class=\"line\">            this.executor = Executors.newCachedThreadPool();</span><br><span class=\"line\">            createdExecutor = true;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            this.executor = executor;</span><br><span class=\"line\">            createdExecutor = false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        threadName = getClass().getSimpleName() + &apos;-&apos; + id.incrementAndGet();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>默认的listener再同一个类中类中定义为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final IoServiceListener serviceActivationListener = new IoServiceListener() &#123;</span><br><span class=\"line\">       public void serviceActivated(IoService service) &#123;</span><br><span class=\"line\">           // Update lastIoTime.</span><br><span class=\"line\">           AbstractIoService s = (AbstractIoService) service;</span><br><span class=\"line\">           IoServiceStatistics _stats = s.getStatistics();</span><br><span class=\"line\">           _stats.setLastReadTime(s.getActivationTime());</span><br><span class=\"line\">           _stats.setLastWriteTime(s.getActivationTime());</span><br><span class=\"line\">           _stats.setLastThroughputCalculationTime(s.getActivationTime());</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       public void serviceDeactivated(IoService service) throws Exception &#123;</span><br><span class=\"line\">           // Empty handler</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       public void serviceIdle(IoService service, IdleStatus idleStatus) throws Exception &#123;</span><br><span class=\"line\">           // Empty handler</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       public void sessionCreated(IoSession session) throws Exception &#123;</span><br><span class=\"line\">           // Empty handler</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       public void sessionClosed(IoSession session) throws Exception &#123;</span><br><span class=\"line\">           // Empty handler</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       public void sessionDestroyed(IoSession session) throws Exception &#123;</span><br><span class=\"line\">           // Empty handler</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>有了观察者,现在就是考虑如何再事件发生时通知观察者了.</p>\n<p>还是在<code>AbstractPollingIoProcessor</code>中的<code>Processor</code>内部类的run方法中,(mina2.0.17)<br>会调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Manage newly created session first</span><br><span class=\"line\">               if(handleNewSessions() == 0) &#123;</span><br></pre></td></tr></table></figure></p>\n<p>当有新的session连接时,新的session会加到newSessions里面,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int handleNewSessions() &#123;</span><br><span class=\"line\">           int addedSessions = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">           for (S session = newSessions.poll(); session != null; session = newSessions.poll()) &#123;</span><br><span class=\"line\">               if (addNow(session)) &#123;</span><br><span class=\"line\">                   // A new session has been created</span><br><span class=\"line\">                   addedSessions++;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           return addedSessions;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面方法调用addNow(S)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private boolean addNow(S session) &#123;</span><br><span class=\"line\">           boolean registered = false;</span><br><span class=\"line\"></span><br><span class=\"line\">           try &#123;</span><br><span class=\"line\">               init(session);</span><br><span class=\"line\">               registered = true;</span><br><span class=\"line\"></span><br><span class=\"line\">               // Build the filter chain of this session.</span><br><span class=\"line\">               IoFilterChainBuilder chainBuilder = session.getService().getFilterChainBuilder();</span><br><span class=\"line\">               chainBuilder.buildFilterChain(session.getFilterChain());</span><br><span class=\"line\"></span><br><span class=\"line\">               // DefaultIoFilterChain.CONNECT_FUTURE is cleared inside here</span><br><span class=\"line\">               // in AbstractIoFilterChain.fireSessionOpened().</span><br><span class=\"line\">               // Propagate the SESSION_CREATED event up to the chain</span><br><span class=\"line\">               IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();</span><br><span class=\"line\">               listeners.fireSessionCreated(session);</span><br><span class=\"line\">           &#125; catch (Exception e) &#123;</span><br><span class=\"line\">               ExceptionMonitor.getInstance().exceptionCaught(e);</span><br><span class=\"line\"></span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   destroy(session);</span><br><span class=\"line\">               &#125; catch (Exception e1) &#123;</span><br><span class=\"line\">                   ExceptionMonitor.getInstance().exceptionCaught(e1);</span><br><span class=\"line\">               &#125; finally &#123;</span><br><span class=\"line\">                   registered = false;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           return registered;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();</span><br><span class=\"line\">              listeners.fireSessionCreated(session);</span><br></pre></td></tr></table></figure></p>\n<p>listeners就是在开头代码里赋值的,而listener也在开头代码里注册了进去.<br>在它的<code>fireSessionCreated</code>方法里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void fireSessionCreated(IoSession session) &#123;</span><br><span class=\"line\">        boolean firstSession = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (session.getService() instanceof IoConnector) &#123;</span><br><span class=\"line\">            synchronized (managedSessions) &#123;</span><br><span class=\"line\">                firstSession = managedSessions.isEmpty();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // If already registered, ignore.</span><br><span class=\"line\">        if (managedSessions.putIfAbsent(session.getId(), session) != null) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // If the first connector session, fire a virtual service activation event.</span><br><span class=\"line\">        if (firstSession) &#123;</span><br><span class=\"line\">            fireServiceActivated();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Fire session events.</span><br><span class=\"line\">        IoFilterChain filterChain = session.getFilterChain();</span><br><span class=\"line\">        filterChain.fireSessionCreated();</span><br><span class=\"line\">        filterChain.fireSessionOpened();</span><br><span class=\"line\"></span><br><span class=\"line\">        int managedSessionCount = managedSessions.size();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (managedSessionCount &gt; largestManagedSessionCount) &#123;</span><br><span class=\"line\">            largestManagedSessionCount = managedSessionCount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cumulativeManagedSessionCount.incrementAndGet();</span><br><span class=\"line\"></span><br><span class=\"line\">        // Fire listener events.</span><br><span class=\"line\">        for (IoServiceListener l : listeners) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                l.sessionCreated(session);</span><br><span class=\"line\">            &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                ExceptionMonitor.getInstance().exceptionCaught(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Fire session events.</span><br><span class=\"line\">     IoFilterChain filterChain = session.getFilterChain();</span><br><span class=\"line\">     filterChain.fireSessionCreated();</span><br><span class=\"line\">     filterChain.fireSessionOpened();</span><br></pre></td></tr></table></figure></p>\n<p>sessionCreated、sessionOpened事件就是这么触发的.<br>sessionIdle事件在<code>mina的IoEvent</code>里面写了.<br>剩下的messageReceive合messageSent还是回到<code>AbstractPollingIoProcessor</code>里面,在<code>run</code>方法里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// Now, if we have had some incoming or outgoing events,</span><br><span class=\"line\">// deal with them</span><br><span class=\"line\">if (selected &gt; 0) &#123;</span><br><span class=\"line\">    // LOG.debug(&quot;Processing ...&quot;); // This log hurts one of</span><br><span class=\"line\">    // the MDCFilter test...</span><br><span class=\"line\">    process();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>process()</code>方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void process() throws Exception &#123;</span><br><span class=\"line\">            for (Iterator&lt;S&gt; i = selectedSessions(); i.hasNext();) &#123;</span><br><span class=\"line\">                S session = i.next();</span><br><span class=\"line\">                process(session);</span><br><span class=\"line\">                i.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>继续看<code>process(S session)</code>方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">        * Deal with session ready for the read or write operations, or both.</span><br><span class=\"line\">        */</span><br><span class=\"line\">       private void process(S session) &#123;</span><br><span class=\"line\">           // Process Reads</span><br><span class=\"line\">           if (isReadable(session) &amp;&amp; !session.isReadSuspended()) &#123;</span><br><span class=\"line\">               read(session);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           // Process writes</span><br><span class=\"line\">           if (isWritable(session) &amp;&amp; !session.isWriteSuspended() &amp;&amp; session.setScheduledForFlush(true)) &#123;</span><br><span class=\"line\">               // add the session to the queue, if it&apos;s not already there</span><br><span class=\"line\">               flushingSessions.add(session);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>#####1.messageReceived<br>就是在上面代码的<code>read</code>方法里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void read(S session) &#123;</span><br><span class=\"line\">        IoSessionConfig config = session.getConfig();</span><br><span class=\"line\">        int bufferSize = config.getReadBufferSize();</span><br><span class=\"line\">        IoBuffer buf = IoBuffer.allocate(bufferSize);</span><br><span class=\"line\"></span><br><span class=\"line\">        final boolean hasFragmentation = session.getTransportMetadata().hasFragmentation();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            int readBytes = 0;</span><br><span class=\"line\">            int ret;</span><br><span class=\"line\"></span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (hasFragmentation) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    while ((ret = read(session, buf)) &gt; 0) &#123;</span><br><span class=\"line\">                        readBytes += ret;</span><br><span class=\"line\"></span><br><span class=\"line\">                        if (!buf.hasRemaining()) &#123;</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    ret = read(session, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">                    if (ret &gt; 0) &#123;</span><br><span class=\"line\">                        readBytes = ret;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                buf.flip();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (readBytes &gt; 0) &#123;</span><br><span class=\"line\">                IoFilterChain filterChain = session.getFilterChain();</span><br><span class=\"line\">                filterChain.fireMessageReceived(buf);</span><br><span class=\"line\">                buf = null;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (hasFragmentation) &#123;</span><br><span class=\"line\">                    if (readBytes &lt;&lt; 1 &lt; config.getReadBufferSize()) &#123;</span><br><span class=\"line\">                        session.decreaseReadBufferSize();</span><br><span class=\"line\">                    &#125; else if (readBytes == config.getReadBufferSize()) &#123;</span><br><span class=\"line\">                        session.increaseReadBufferSize();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                // release temporary buffer when read nothing</span><br><span class=\"line\">                buf.free(); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (ret &lt; 0) &#123;</span><br><span class=\"line\">                IoFilterChain filterChain = session.getFilterChain();</span><br><span class=\"line\">                filterChain.fireInputClosed();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            if ((e instanceof IOException) &amp;&amp;</span><br><span class=\"line\">                (!(e instanceof PortUnreachableException)</span><br><span class=\"line\">                        || !AbstractDatagramSessionConfig.class.isAssignableFrom(config.getClass())</span><br><span class=\"line\">                        || ((AbstractDatagramSessionConfig) config).isCloseOnPortUnreachable())) &#123;</span><br><span class=\"line\">                scheduleRemove(session);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            IoFilterChain filterChain = session.getFilterChain();</span><br><span class=\"line\">            filterChain.fireExceptionCaught(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>#####2.messageSent<br>在上面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加到`flushingSessions`里面.</span><br><span class=\"line\">在`run()`方法里面</span><br></pre></td></tr></table></figure></p>\n<p>   // Write the pending requests<br>                    long currentTime = System.currentTimeMillis();<br>                    flush(currentTime);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush</span><br></pre></td></tr></table></figure></p>\n<p>private void flush(long currentTime) {<br>            if (flushingSessions.isEmpty()) {<br>                return;<br>            }</p>\n<pre><code>    do {\n        S session = flushingSessions.poll(); // the same one with\n                                             // firstSession\n\n        if (session == null) {\n            // Just in case ... It should not happen.\n            break;\n        }\n\n        // Reset the Schedule for flush flag for this session,\n        // as we are flushing it now\n        session.unscheduledForFlush();\n\n        SessionState state = getState(session);\n\n        switch (state) {\n        case OPENED:\n            try {\n                boolean flushedAll = flushNow(session, currentTime);\n\n                if (flushedAll &amp;&amp; !session.getWriteRequestQueue().isEmpty(session)\n                        &amp;&amp; !session.isScheduledForFlush()) {\n                    scheduleFlush(session);\n                }\n            } catch (Exception e) {\n                scheduleRemove(session);\n                session.closeNow();\n                IoFilterChain filterChain = session.getFilterChain();\n                filterChain.fireExceptionCaught(e);\n            }\n\n            break;\n\n        case CLOSING:\n            // Skip if the channel is already closed.\n            break;\n\n        case OPENING:\n            // Retry later if session is not yet fully initialized.\n            // (In case that Session.write() is called before addSession()\n            // is processed)\n            scheduleFlush(session);\n            return;\n\n        default:\n            throw new IllegalStateException(String.valueOf(state));\n        }\n\n    } while (!flushingSessions.isEmpty());\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushNow</span><br></pre></td></tr></table></figure>\n<p> private boolean flushNow(S session, long currentTime) {<br>            if (!session.isConnected()) {<br>                scheduleRemove(session);<br>                return false;<br>            }</p>\n<pre><code>    final boolean hasFragmentation = session.getTransportMetadata().hasFragmentation();\n\n    final WriteRequestQueue writeRequestQueue = session.getWriteRequestQueue();\n\n    // Set limitation for the number of written bytes for read-write\n    // fairness. I used maxReadBufferSize * 3 / 2, which yields best\n    // performance in my experience while not breaking fairness much.\n    final int maxWrittenBytes = session.getConfig().getMaxReadBufferSize()\n            + (session.getConfig().getMaxReadBufferSize() &gt;&gt;&gt; 1);\n    int writtenBytes = 0;\n    WriteRequest req = null;\n\n    try {\n        // Clear OP_WRITE\n        setInterestedInWrite(session, false);\n\n        do {\n            // Check for pending writes.\n            req = session.getCurrentWriteRequest();\n\n            if (req == null) {\n                req = writeRequestQueue.poll(session);\n\n                if (req == null) {\n                    break;\n                }\n\n                session.setCurrentWriteRequest(req);\n            }\n\n            int localWrittenBytes;\n            Object message = req.getMessage();\n\n            if (message instanceof IoBuffer) {\n                localWrittenBytes = writeBuffer(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,\n                        currentTime);\n\n                if ((localWrittenBytes &gt; 0) &amp;&amp; ((IoBuffer) message).hasRemaining()) {\n                    // the buffer isn&apos;t empty, we re-interest it in writing\n                    setInterestedInWrite(session, true);\n\n                    return false;\n                }\n            } else if (message instanceof FileRegion) {\n                localWrittenBytes = writeFile(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,\n                        currentTime);\n\n                // Fix for Java bug on Linux\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5103988\n                // If there&apos;s still data to be written in the FileRegion,\n                // return 0 indicating that we need\n                // to pause until writing may resume.\n                if ((localWrittenBytes &gt; 0) &amp;&amp; (((FileRegion) message).getRemainingBytes() &gt; 0)) {\n                    setInterestedInWrite(session, true);\n\n                    return false;\n                }\n            } else {\n                throw new IllegalStateException(&quot;Don&apos;t know how to handle message of type &apos;&quot;\n                        + message.getClass().getName() + &quot;&apos;.  Are you missing a protocol encoder?&quot;);\n            }\n\n            if (localWrittenBytes == 0) {\n\n                // Kernel buffer is full.\n                if (!req.equals(AbstractIoSession.MESSAGE_SENT_REQUEST)) {\n                    setInterestedInWrite(session, true);\n                    return false;\n                }\n            } else {\n                writtenBytes += localWrittenBytes;\n\n                if (writtenBytes &gt;= maxWrittenBytes) {\n                    // Wrote too much\n                    scheduleFlush(session);\n                    return false;\n                }\n            }\n\n            if (message instanceof IoBuffer) {\n                ((IoBuffer) message).free();\n            }\n        } while (writtenBytes &lt; maxWrittenBytes);\n    } catch (Exception e) {\n        if (req != null) {\n            req.getFuture().setException(e);\n        }\n\n        IoFilterChain filterChain = session.getFilterChain();\n        filterChain.fireExceptionCaught(e);\n        return false;\n    }\n\n    return true;\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其中</span><br></pre></td></tr></table></figure>\n<p>else if (message instanceof FileRegion) {<br>                        localWrittenBytes = writeFile(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,<br>                                currentTime);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writeFile</span><br></pre></td></tr></table></figure></p>\n<p>private int writeFile(S session, WriteRequest req, boolean hasFragmentation, int maxLength, long currentTime)<br>                throws Exception {<br>            int localWrittenBytes;<br>            FileRegion region = (FileRegion) req.getMessage();</p>\n<pre><code>    if (region.getRemainingBytes() &gt; 0) {\n        int length;\n\n        if (hasFragmentation) {\n            length = (int) Math.min(region.getRemainingBytes(), maxLength);\n        } else {\n            length = (int) Math.min(Integer.MAX_VALUE, region.getRemainingBytes());\n        }\n\n        localWrittenBytes = transferFile(session, region, length);\n        region.update(localWrittenBytes);\n    } else {\n        localWrittenBytes = 0;\n    }\n\n    session.increaseWrittenBytes(localWrittenBytes, currentTime);\n\n    if ((region.getRemainingBytes() &lt;= 0) || (!hasFragmentation &amp;&amp; (localWrittenBytes != 0))) {\n        fireMessageSent(session, req);\n    }\n\n    return localWrittenBytes;\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">里面</span><br></pre></td></tr></table></figure>\n<p>if ((region.getRemainingBytes() &lt;= 0) || (!hasFragmentation &amp;&amp; (localWrittenBytes != 0))) {<br>                fireMessageSent(session, req);<br>            }<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就会出发messageSent了</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###小结</span><br><span class=\"line\">可以看到,这些事件都是由`AbstractPollingIoProcessor`的内部类`Processor`的`run`方法驱动的.而`run`方法就是在</span><br></pre></td></tr></table></figure></p>\n<p>private void startupProcessor() {<br>        Processor processor = processorRef.get();</p>\n<pre><code>    if (processor == null) {\n        processor = new Processor();\n\n        if (processorRef.compareAndSet(null, processor)) {\n            executor.execute(new NamePreservingRunnable(processor, threadName));\n        }\n    }\n\n    // Just stop the select() and start it again, so that the processor\n    // can be activated immediately.\n    wakeup();\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">的时候开始运行的,有三个方法调用`startupProcessor`:</span><br></pre></td></tr></table></figure>\n<p>1.AbstractPollingIoProcessor.add()<br>2.AbstractPollingIoProcessor.remove()<br>3.AbstractPollingIoProcessor.dispose()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所以,在第一个连接过来的时候,`executor`里面的线程就在跑`run`方法了.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">--------</span><br><span class=\"line\">接一开始的`newSessions`,为什么有新的连接,就会有·session·加进`newSessions`里面呢?</span><br><span class=\"line\"></span><br><span class=\"line\">在mina的服务器代码里面,启动mina时需要调用`acceptor.bind();`</span><br><span class=\"line\">追踪`bind`方法</span><br></pre></td></tr></table></figure></p>\n<p> public final void bind(Iterable&lt;? extends SocketAddress&gt; localAddresses) throws IOException {<br>        if (isDisposing()) {<br>            throw new IllegalStateException(“The Accpetor disposed is being disposed.”);<br>        }</p>\n<pre><code>    if (localAddresses == null) {\n        throw new IllegalArgumentException(&quot;localAddresses&quot;);\n    }\n\n    List&lt;SocketAddress&gt; localAddressesCopy = new ArrayList&lt;SocketAddress&gt;();\n\n    for (SocketAddress a : localAddresses) {\n        checkAddressType(a);\n        localAddressesCopy.add(a);\n    }\n\n    if (localAddressesCopy.isEmpty()) {\n        throw new IllegalArgumentException(&quot;localAddresses is empty.&quot;);\n    }\n\n    boolean activate = false;\n    synchronized (bindLock) {\n        synchronized (boundAddresses) {\n            if (boundAddresses.isEmpty()) {\n                activate = true;\n            }\n        }\n\n        if (getHandler() == null) {\n            throw new IllegalStateException(&quot;handler is not set.&quot;);\n        }\n\n        try {\n            Set&lt;SocketAddress&gt; addresses = bindInternal(localAddressesCopy);\n\n            synchronized (boundAddresses) {\n                boundAddresses.addAll(addresses);\n            }\n        } catch (IOException e) {\n            throw e;\n        } catch (RuntimeException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new RuntimeIoException(&quot;Failed to bind to: &quot; + getLocalAddresses(), e);\n        }\n    }\n\n    if (activate) {\n        getListeners().fireServiceActivated();\n    }\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有一行</span><br><span class=\"line\">``` Set&lt;SocketAddress&gt; addresses = bindInternal(localAddressesCopy);`</span><br></pre></td></tr></table></figure>\n<p>继续追踪<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected final Set&lt;SocketAddress&gt; bindInternal(List&lt;? extends SocketAddress&gt; localAddresses) throws Exception &#123;</span><br><span class=\"line\">       // Create a bind request as a Future operation. When the selector</span><br><span class=\"line\">       // have handled the registration, it will signal this future.</span><br><span class=\"line\">       AcceptorOperationFuture request = new AcceptorOperationFuture(localAddresses);</span><br><span class=\"line\"></span><br><span class=\"line\">       // adds the Registration request to the queue for the Workers</span><br><span class=\"line\">       // to handle</span><br><span class=\"line\">       registerQueue.add(request);</span><br><span class=\"line\"></span><br><span class=\"line\">       // creates the Acceptor instance and has the local</span><br><span class=\"line\">       // executor kick it off.</span><br><span class=\"line\">       startupAcceptor();</span><br><span class=\"line\"></span><br><span class=\"line\">       // As we just started the acceptor, we have to unblock the select()</span><br><span class=\"line\">       // in order to process the bind request we just have added to the</span><br><span class=\"line\">       // registerQueue.</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           lock.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">           // Wait a bit to give a chance to the Acceptor thread to do the select()</span><br><span class=\"line\">           Thread.sleep(10);</span><br><span class=\"line\">           wakeup();</span><br><span class=\"line\">       &#125; finally &#123;</span><br><span class=\"line\">           lock.release();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       // Now, we wait until this request is completed.</span><br><span class=\"line\">       request.awaitUninterruptibly();</span><br><span class=\"line\"></span><br><span class=\"line\">       if (request.getException() != null) &#123;</span><br><span class=\"line\">           throw request.getException();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       // Update the local addresses.</span><br><span class=\"line\">       // setLocalAddresses() shouldn&apos;t be called from the worker thread</span><br><span class=\"line\">       // because of deadlock.</span><br><span class=\"line\">       Set&lt;SocketAddress&gt; newLocalAddresses = new HashSet&lt;SocketAddress&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">       for (H handle : boundHandles.values()) &#123;</span><br><span class=\"line\">           newLocalAddresses.add(localAddress(handle));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       return newLocalAddresses;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>里面调用了<code>startupAcceptor();</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void startupAcceptor() throws InterruptedException &#123;</span><br><span class=\"line\">        // If the acceptor is not ready, clear the queues</span><br><span class=\"line\">        // TODO : they should already be clean : do we have to do that ?</span><br><span class=\"line\">        if (!selectable) &#123;</span><br><span class=\"line\">            registerQueue.clear();</span><br><span class=\"line\">            cancelQueue.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // start the acceptor if not already started</span><br><span class=\"line\">        Acceptor acceptor = acceptorRef.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (acceptor == null) &#123;</span><br><span class=\"line\">            lock.acquire();</span><br><span class=\"line\">            acceptor = new Acceptor();</span><br><span class=\"line\"></span><br><span class=\"line\">            if (acceptorRef.compareAndSet(null, acceptor)) &#123;</span><br><span class=\"line\">                executeWorker(acceptor);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                lock.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>开启了一个线程执行<code>Acceptor</code>的<code>run()</code>方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void startupAcceptor() throws InterruptedException &#123;</span><br><span class=\"line\">        // If the acceptor is not ready, clear the queues</span><br><span class=\"line\">        // TODO : they should already be clean : do we have to do that ?</span><br><span class=\"line\">        if (!selectable) &#123;</span><br><span class=\"line\">            registerQueue.clear();</span><br><span class=\"line\">            cancelQueue.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // start the acceptor if not already started</span><br><span class=\"line\">        Acceptor acceptor = acceptorRef.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (acceptor == null) &#123;</span><br><span class=\"line\">            lock.acquire();</span><br><span class=\"line\">            acceptor = new Acceptor();</span><br><span class=\"line\"></span><br><span class=\"line\">            if (acceptorRef.compareAndSet(null, acceptor)) &#123;</span><br><span class=\"line\">                executeWorker(acceptor);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                lock.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (selected &gt; 0) &#123;</span><br><span class=\"line\">                        // We have some connection request, let&apos;s process</span><br><span class=\"line\">                        // them here.</span><br><span class=\"line\">                        processHandles(selectedHandles());</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>processHandles</code>方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void processHandles(Iterator&lt;H&gt; handles) throws Exception &#123;</span><br><span class=\"line\">            while (handles.hasNext()) &#123;</span><br><span class=\"line\">                H handle = handles.next();</span><br><span class=\"line\">                handles.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                // Associates a new created connection to a processor,</span><br><span class=\"line\">                // and get back a session</span><br><span class=\"line\">                S session = accept(processor, handle);</span><br><span class=\"line\"></span><br><span class=\"line\">                if (session == null) &#123;</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                initSession(session, null, null);</span><br><span class=\"line\"></span><br><span class=\"line\">                // add the session to the SocketIoProcessor</span><br><span class=\"line\">                session.getProcessor().add(session);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个方法里面调用了三个方法:</p>\n<p>#####1.    S session = accept(processor, handle);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected NioSession accept(IoProcessor&lt;NioSession&gt; processor, ServerSocketChannel handle) throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        SelectionKey key = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (handle != null) &#123;</span><br><span class=\"line\">            key = handle.keyFor(selector);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if ((key == null) || (!key.isValid()) || (!key.isAcceptable())) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // accept the connection from the client</span><br><span class=\"line\">        SocketChannel ch = handle.accept();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (ch == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return new NioSocketSession(this, processor, ch);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>new了一个session并且注册了SocketChannel</p>\n<p>#####2. initSession(session, null, null);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected final void initSession(IoSession session, IoFuture future, IoSessionInitializer sessionInitializer) &#123;</span><br><span class=\"line\">    // Update lastIoTime if needed.</span><br><span class=\"line\">    if (stats.getLastReadTime() == 0) &#123;</span><br><span class=\"line\">        stats.setLastReadTime(getActivationTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (stats.getLastWriteTime() == 0) &#123;</span><br><span class=\"line\">        stats.setLastWriteTime(getActivationTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Every property but attributeMap should be set now.</span><br><span class=\"line\">    // Now initialize the attributeMap.  The reason why we initialize</span><br><span class=\"line\">    // the attributeMap at last is to make sure all session properties</span><br><span class=\"line\">    // such as remoteAddress are provided to IoSessionDataStructureFactory.</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        ((AbstractIoSession) session).setAttributeMap(session.getService().getSessionDataStructureFactory()</span><br><span class=\"line\">                .getAttributeMap(session));</span><br><span class=\"line\">    &#125; catch (IoSessionInitializationException e) &#123;</span><br><span class=\"line\">        throw e;</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        throw new IoSessionInitializationException(&quot;Failed to initialize an attributeMap.&quot;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        ((AbstractIoSession) session).setWriteRequestQueue(session.getService().getSessionDataStructureFactory()</span><br><span class=\"line\">                .getWriteRequestQueue(session));</span><br><span class=\"line\">    &#125; catch (IoSessionInitializationException e) &#123;</span><br><span class=\"line\">        throw e;</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        throw new IoSessionInitializationException(&quot;Failed to initialize a writeRequestQueue.&quot;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((future != null) &amp;&amp; (future instanceof ConnectFuture)) &#123;</span><br><span class=\"line\">        // DefaultIoFilterChain will notify the future. (We support ConnectFuture only for now).</span><br><span class=\"line\">        session.setAttribute(DefaultIoFilterChain.SESSION_CREATED_FUTURE, future);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (sessionInitializer != null) &#123;</span><br><span class=\"line\">        sessionInitializer.initializeSession(session, future);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    finishSessionInitialization0(session, future);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对<code>session</code>各种初始化</p>\n<p>#####3. session.getProcessor().add(session);<br>这里的<code>Processor</code>就是<code>AbstractPollingIoProcessor</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void add(S session) &#123;</span><br><span class=\"line\">        if (disposed || disposing) &#123;</span><br><span class=\"line\">            throw new IllegalStateException(&quot;Already disposed.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Adds the session to the newSession queue and starts the worker</span><br><span class=\"line\">        newSessions.add(session);</span><br><span class=\"line\">        startupProcessor();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里就解决了上面没有提到的<br>1.将<code>session</code>加到<code>newSessions</code>里面;<br>2.<code>startupProcessor();</code>运行了那个关键的<code>Processor</code>的<code>Run()</code>方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void startupProcessor() &#123;</span><br><span class=\"line\">       Processor processor = processorRef.get();</span><br><span class=\"line\"></span><br><span class=\"line\">       if (processor == null) &#123;</span><br><span class=\"line\">           processor = new Processor();</span><br><span class=\"line\"></span><br><span class=\"line\">           if (processorRef.compareAndSet(null, processor)) &#123;</span><br><span class=\"line\">               executor.execute(new NamePreservingRunnable(processor, threadName));</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       // Just stop the select() and start it again, so that the processor</span><br><span class=\"line\">       // can be activated immediately.</span><br><span class=\"line\">       wakeup();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Java的事件机制一般都是通过观察者模式实现的(?).<br>观察者模式就必须有观察者和被观察者.<br>Mina里里面,再一开始<br><code>acceptor = new NioSocketAcceptor(NetConfig.MINA_PROCESSOR);</code><br>就在上面的父类<code>AbstractIoService</code>中注册了观察者:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected AbstractIoService(IoSessionConfig sessionConfig, Executor executor) &#123;</span><br><span class=\"line\">        if (sessionConfig == null) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;sessionConfig&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (getTransportMetadata() == null) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;TransportMetadata&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!getTransportMetadata().getSessionConfigType().isAssignableFrom(sessionConfig.getClass())) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;sessionConfig type: &quot; + sessionConfig.getClass() + &quot; (expected: &quot;</span><br><span class=\"line\">                    + getTransportMetadata().getSessionConfigType() + &quot;)&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//---------------这里!!!--------------</span><br><span class=\"line\">        // Create the listeners, and add a first listener : a activation listener</span><br><span class=\"line\">        // for this service, which will give information on the service state.</span><br><span class=\"line\">        listeners = new IoServiceListenerSupport(this);</span><br><span class=\"line\">        listeners.add(serviceActivationListener);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // Stores the given session configuration</span><br><span class=\"line\">        this.sessionConfig = sessionConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Make JVM load the exception monitor before some transports</span><br><span class=\"line\">        // change the thread context class loader.</span><br><span class=\"line\">        ExceptionMonitor.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (executor == null) &#123;</span><br><span class=\"line\">            this.executor = Executors.newCachedThreadPool();</span><br><span class=\"line\">            createdExecutor = true;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            this.executor = executor;</span><br><span class=\"line\">            createdExecutor = false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        threadName = getClass().getSimpleName() + &apos;-&apos; + id.incrementAndGet();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>默认的listener再同一个类中类中定义为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final IoServiceListener serviceActivationListener = new IoServiceListener() &#123;</span><br><span class=\"line\">       public void serviceActivated(IoService service) &#123;</span><br><span class=\"line\">           // Update lastIoTime.</span><br><span class=\"line\">           AbstractIoService s = (AbstractIoService) service;</span><br><span class=\"line\">           IoServiceStatistics _stats = s.getStatistics();</span><br><span class=\"line\">           _stats.setLastReadTime(s.getActivationTime());</span><br><span class=\"line\">           _stats.setLastWriteTime(s.getActivationTime());</span><br><span class=\"line\">           _stats.setLastThroughputCalculationTime(s.getActivationTime());</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       public void serviceDeactivated(IoService service) throws Exception &#123;</span><br><span class=\"line\">           // Empty handler</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       public void serviceIdle(IoService service, IdleStatus idleStatus) throws Exception &#123;</span><br><span class=\"line\">           // Empty handler</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       public void sessionCreated(IoSession session) throws Exception &#123;</span><br><span class=\"line\">           // Empty handler</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       public void sessionClosed(IoSession session) throws Exception &#123;</span><br><span class=\"line\">           // Empty handler</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       public void sessionDestroyed(IoSession session) throws Exception &#123;</span><br><span class=\"line\">           // Empty handler</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>有了观察者,现在就是考虑如何再事件发生时通知观察者了.</p>\n<p>还是在<code>AbstractPollingIoProcessor</code>中的<code>Processor</code>内部类的run方法中,(mina2.0.17)<br>会调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Manage newly created session first</span><br><span class=\"line\">               if(handleNewSessions() == 0) &#123;</span><br></pre></td></tr></table></figure></p>\n<p>当有新的session连接时,新的session会加到newSessions里面,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int handleNewSessions() &#123;</span><br><span class=\"line\">           int addedSessions = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">           for (S session = newSessions.poll(); session != null; session = newSessions.poll()) &#123;</span><br><span class=\"line\">               if (addNow(session)) &#123;</span><br><span class=\"line\">                   // A new session has been created</span><br><span class=\"line\">                   addedSessions++;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           return addedSessions;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面方法调用addNow(S)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private boolean addNow(S session) &#123;</span><br><span class=\"line\">           boolean registered = false;</span><br><span class=\"line\"></span><br><span class=\"line\">           try &#123;</span><br><span class=\"line\">               init(session);</span><br><span class=\"line\">               registered = true;</span><br><span class=\"line\"></span><br><span class=\"line\">               // Build the filter chain of this session.</span><br><span class=\"line\">               IoFilterChainBuilder chainBuilder = session.getService().getFilterChainBuilder();</span><br><span class=\"line\">               chainBuilder.buildFilterChain(session.getFilterChain());</span><br><span class=\"line\"></span><br><span class=\"line\">               // DefaultIoFilterChain.CONNECT_FUTURE is cleared inside here</span><br><span class=\"line\">               // in AbstractIoFilterChain.fireSessionOpened().</span><br><span class=\"line\">               // Propagate the SESSION_CREATED event up to the chain</span><br><span class=\"line\">               IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();</span><br><span class=\"line\">               listeners.fireSessionCreated(session);</span><br><span class=\"line\">           &#125; catch (Exception e) &#123;</span><br><span class=\"line\">               ExceptionMonitor.getInstance().exceptionCaught(e);</span><br><span class=\"line\"></span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   destroy(session);</span><br><span class=\"line\">               &#125; catch (Exception e1) &#123;</span><br><span class=\"line\">                   ExceptionMonitor.getInstance().exceptionCaught(e1);</span><br><span class=\"line\">               &#125; finally &#123;</span><br><span class=\"line\">                   registered = false;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           return registered;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IoServiceListenerSupport listeners = ((AbstractIoService) session.getService()).getListeners();</span><br><span class=\"line\">              listeners.fireSessionCreated(session);</span><br></pre></td></tr></table></figure></p>\n<p>listeners就是在开头代码里赋值的,而listener也在开头代码里注册了进去.<br>在它的<code>fireSessionCreated</code>方法里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void fireSessionCreated(IoSession session) &#123;</span><br><span class=\"line\">        boolean firstSession = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (session.getService() instanceof IoConnector) &#123;</span><br><span class=\"line\">            synchronized (managedSessions) &#123;</span><br><span class=\"line\">                firstSession = managedSessions.isEmpty();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // If already registered, ignore.</span><br><span class=\"line\">        if (managedSessions.putIfAbsent(session.getId(), session) != null) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // If the first connector session, fire a virtual service activation event.</span><br><span class=\"line\">        if (firstSession) &#123;</span><br><span class=\"line\">            fireServiceActivated();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Fire session events.</span><br><span class=\"line\">        IoFilterChain filterChain = session.getFilterChain();</span><br><span class=\"line\">        filterChain.fireSessionCreated();</span><br><span class=\"line\">        filterChain.fireSessionOpened();</span><br><span class=\"line\"></span><br><span class=\"line\">        int managedSessionCount = managedSessions.size();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (managedSessionCount &gt; largestManagedSessionCount) &#123;</span><br><span class=\"line\">            largestManagedSessionCount = managedSessionCount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cumulativeManagedSessionCount.incrementAndGet();</span><br><span class=\"line\"></span><br><span class=\"line\">        // Fire listener events.</span><br><span class=\"line\">        for (IoServiceListener l : listeners) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                l.sessionCreated(session);</span><br><span class=\"line\">            &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                ExceptionMonitor.getInstance().exceptionCaught(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Fire session events.</span><br><span class=\"line\">     IoFilterChain filterChain = session.getFilterChain();</span><br><span class=\"line\">     filterChain.fireSessionCreated();</span><br><span class=\"line\">     filterChain.fireSessionOpened();</span><br></pre></td></tr></table></figure></p>\n<p>sessionCreated、sessionOpened事件就是这么触发的.<br>sessionIdle事件在<code>mina的IoEvent</code>里面写了.<br>剩下的messageReceive合messageSent还是回到<code>AbstractPollingIoProcessor</code>里面,在<code>run</code>方法里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// Now, if we have had some incoming or outgoing events,</span><br><span class=\"line\">// deal with them</span><br><span class=\"line\">if (selected &gt; 0) &#123;</span><br><span class=\"line\">    // LOG.debug(&quot;Processing ...&quot;); // This log hurts one of</span><br><span class=\"line\">    // the MDCFilter test...</span><br><span class=\"line\">    process();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>process()</code>方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void process() throws Exception &#123;</span><br><span class=\"line\">            for (Iterator&lt;S&gt; i = selectedSessions(); i.hasNext();) &#123;</span><br><span class=\"line\">                S session = i.next();</span><br><span class=\"line\">                process(session);</span><br><span class=\"line\">                i.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>继续看<code>process(S session)</code>方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">        * Deal with session ready for the read or write operations, or both.</span><br><span class=\"line\">        */</span><br><span class=\"line\">       private void process(S session) &#123;</span><br><span class=\"line\">           // Process Reads</span><br><span class=\"line\">           if (isReadable(session) &amp;&amp; !session.isReadSuspended()) &#123;</span><br><span class=\"line\">               read(session);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           // Process writes</span><br><span class=\"line\">           if (isWritable(session) &amp;&amp; !session.isWriteSuspended() &amp;&amp; session.setScheduledForFlush(true)) &#123;</span><br><span class=\"line\">               // add the session to the queue, if it&apos;s not already there</span><br><span class=\"line\">               flushingSessions.add(session);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>#####1.messageReceived<br>就是在上面代码的<code>read</code>方法里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void read(S session) &#123;</span><br><span class=\"line\">        IoSessionConfig config = session.getConfig();</span><br><span class=\"line\">        int bufferSize = config.getReadBufferSize();</span><br><span class=\"line\">        IoBuffer buf = IoBuffer.allocate(bufferSize);</span><br><span class=\"line\"></span><br><span class=\"line\">        final boolean hasFragmentation = session.getTransportMetadata().hasFragmentation();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            int readBytes = 0;</span><br><span class=\"line\">            int ret;</span><br><span class=\"line\"></span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (hasFragmentation) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    while ((ret = read(session, buf)) &gt; 0) &#123;</span><br><span class=\"line\">                        readBytes += ret;</span><br><span class=\"line\"></span><br><span class=\"line\">                        if (!buf.hasRemaining()) &#123;</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    ret = read(session, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">                    if (ret &gt; 0) &#123;</span><br><span class=\"line\">                        readBytes = ret;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                buf.flip();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (readBytes &gt; 0) &#123;</span><br><span class=\"line\">                IoFilterChain filterChain = session.getFilterChain();</span><br><span class=\"line\">                filterChain.fireMessageReceived(buf);</span><br><span class=\"line\">                buf = null;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (hasFragmentation) &#123;</span><br><span class=\"line\">                    if (readBytes &lt;&lt; 1 &lt; config.getReadBufferSize()) &#123;</span><br><span class=\"line\">                        session.decreaseReadBufferSize();</span><br><span class=\"line\">                    &#125; else if (readBytes == config.getReadBufferSize()) &#123;</span><br><span class=\"line\">                        session.increaseReadBufferSize();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                // release temporary buffer when read nothing</span><br><span class=\"line\">                buf.free(); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (ret &lt; 0) &#123;</span><br><span class=\"line\">                IoFilterChain filterChain = session.getFilterChain();</span><br><span class=\"line\">                filterChain.fireInputClosed();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            if ((e instanceof IOException) &amp;&amp;</span><br><span class=\"line\">                (!(e instanceof PortUnreachableException)</span><br><span class=\"line\">                        || !AbstractDatagramSessionConfig.class.isAssignableFrom(config.getClass())</span><br><span class=\"line\">                        || ((AbstractDatagramSessionConfig) config).isCloseOnPortUnreachable())) &#123;</span><br><span class=\"line\">                scheduleRemove(session);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            IoFilterChain filterChain = session.getFilterChain();</span><br><span class=\"line\">            filterChain.fireExceptionCaught(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>#####2.messageSent<br>在上面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加到`flushingSessions`里面.</span><br><span class=\"line\">在`run()`方法里面</span><br></pre></td></tr></table></figure></p>\n<p>   // Write the pending requests<br>                    long currentTime = System.currentTimeMillis();<br>                    flush(currentTime);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush</span><br></pre></td></tr></table></figure></p>\n<p>private void flush(long currentTime) {<br>            if (flushingSessions.isEmpty()) {<br>                return;<br>            }</p>\n<pre><code>    do {\n        S session = flushingSessions.poll(); // the same one with\n                                             // firstSession\n\n        if (session == null) {\n            // Just in case ... It should not happen.\n            break;\n        }\n\n        // Reset the Schedule for flush flag for this session,\n        // as we are flushing it now\n        session.unscheduledForFlush();\n\n        SessionState state = getState(session);\n\n        switch (state) {\n        case OPENED:\n            try {\n                boolean flushedAll = flushNow(session, currentTime);\n\n                if (flushedAll &amp;&amp; !session.getWriteRequestQueue().isEmpty(session)\n                        &amp;&amp; !session.isScheduledForFlush()) {\n                    scheduleFlush(session);\n                }\n            } catch (Exception e) {\n                scheduleRemove(session);\n                session.closeNow();\n                IoFilterChain filterChain = session.getFilterChain();\n                filterChain.fireExceptionCaught(e);\n            }\n\n            break;\n\n        case CLOSING:\n            // Skip if the channel is already closed.\n            break;\n\n        case OPENING:\n            // Retry later if session is not yet fully initialized.\n            // (In case that Session.write() is called before addSession()\n            // is processed)\n            scheduleFlush(session);\n            return;\n\n        default:\n            throw new IllegalStateException(String.valueOf(state));\n        }\n\n    } while (!flushingSessions.isEmpty());\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushNow</span><br></pre></td></tr></table></figure>\n<p> private boolean flushNow(S session, long currentTime) {<br>            if (!session.isConnected()) {<br>                scheduleRemove(session);<br>                return false;<br>            }</p>\n<pre><code>    final boolean hasFragmentation = session.getTransportMetadata().hasFragmentation();\n\n    final WriteRequestQueue writeRequestQueue = session.getWriteRequestQueue();\n\n    // Set limitation for the number of written bytes for read-write\n    // fairness. I used maxReadBufferSize * 3 / 2, which yields best\n    // performance in my experience while not breaking fairness much.\n    final int maxWrittenBytes = session.getConfig().getMaxReadBufferSize()\n            + (session.getConfig().getMaxReadBufferSize() &gt;&gt;&gt; 1);\n    int writtenBytes = 0;\n    WriteRequest req = null;\n\n    try {\n        // Clear OP_WRITE\n        setInterestedInWrite(session, false);\n\n        do {\n            // Check for pending writes.\n            req = session.getCurrentWriteRequest();\n\n            if (req == null) {\n                req = writeRequestQueue.poll(session);\n\n                if (req == null) {\n                    break;\n                }\n\n                session.setCurrentWriteRequest(req);\n            }\n\n            int localWrittenBytes;\n            Object message = req.getMessage();\n\n            if (message instanceof IoBuffer) {\n                localWrittenBytes = writeBuffer(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,\n                        currentTime);\n\n                if ((localWrittenBytes &gt; 0) &amp;&amp; ((IoBuffer) message).hasRemaining()) {\n                    // the buffer isn&apos;t empty, we re-interest it in writing\n                    setInterestedInWrite(session, true);\n\n                    return false;\n                }\n            } else if (message instanceof FileRegion) {\n                localWrittenBytes = writeFile(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,\n                        currentTime);\n\n                // Fix for Java bug on Linux\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5103988\n                // If there&apos;s still data to be written in the FileRegion,\n                // return 0 indicating that we need\n                // to pause until writing may resume.\n                if ((localWrittenBytes &gt; 0) &amp;&amp; (((FileRegion) message).getRemainingBytes() &gt; 0)) {\n                    setInterestedInWrite(session, true);\n\n                    return false;\n                }\n            } else {\n                throw new IllegalStateException(&quot;Don&apos;t know how to handle message of type &apos;&quot;\n                        + message.getClass().getName() + &quot;&apos;.  Are you missing a protocol encoder?&quot;);\n            }\n\n            if (localWrittenBytes == 0) {\n\n                // Kernel buffer is full.\n                if (!req.equals(AbstractIoSession.MESSAGE_SENT_REQUEST)) {\n                    setInterestedInWrite(session, true);\n                    return false;\n                }\n            } else {\n                writtenBytes += localWrittenBytes;\n\n                if (writtenBytes &gt;= maxWrittenBytes) {\n                    // Wrote too much\n                    scheduleFlush(session);\n                    return false;\n                }\n            }\n\n            if (message instanceof IoBuffer) {\n                ((IoBuffer) message).free();\n            }\n        } while (writtenBytes &lt; maxWrittenBytes);\n    } catch (Exception e) {\n        if (req != null) {\n            req.getFuture().setException(e);\n        }\n\n        IoFilterChain filterChain = session.getFilterChain();\n        filterChain.fireExceptionCaught(e);\n        return false;\n    }\n\n    return true;\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其中</span><br></pre></td></tr></table></figure>\n<p>else if (message instanceof FileRegion) {<br>                        localWrittenBytes = writeFile(session, req, hasFragmentation, maxWrittenBytes - writtenBytes,<br>                                currentTime);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writeFile</span><br></pre></td></tr></table></figure></p>\n<p>private int writeFile(S session, WriteRequest req, boolean hasFragmentation, int maxLength, long currentTime)<br>                throws Exception {<br>            int localWrittenBytes;<br>            FileRegion region = (FileRegion) req.getMessage();</p>\n<pre><code>    if (region.getRemainingBytes() &gt; 0) {\n        int length;\n\n        if (hasFragmentation) {\n            length = (int) Math.min(region.getRemainingBytes(), maxLength);\n        } else {\n            length = (int) Math.min(Integer.MAX_VALUE, region.getRemainingBytes());\n        }\n\n        localWrittenBytes = transferFile(session, region, length);\n        region.update(localWrittenBytes);\n    } else {\n        localWrittenBytes = 0;\n    }\n\n    session.increaseWrittenBytes(localWrittenBytes, currentTime);\n\n    if ((region.getRemainingBytes() &lt;= 0) || (!hasFragmentation &amp;&amp; (localWrittenBytes != 0))) {\n        fireMessageSent(session, req);\n    }\n\n    return localWrittenBytes;\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">里面</span><br></pre></td></tr></table></figure>\n<p>if ((region.getRemainingBytes() &lt;= 0) || (!hasFragmentation &amp;&amp; (localWrittenBytes != 0))) {<br>                fireMessageSent(session, req);<br>            }<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就会出发messageSent了</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###小结</span><br><span class=\"line\">可以看到,这些事件都是由`AbstractPollingIoProcessor`的内部类`Processor`的`run`方法驱动的.而`run`方法就是在</span><br></pre></td></tr></table></figure></p>\n<p>private void startupProcessor() {<br>        Processor processor = processorRef.get();</p>\n<pre><code>    if (processor == null) {\n        processor = new Processor();\n\n        if (processorRef.compareAndSet(null, processor)) {\n            executor.execute(new NamePreservingRunnable(processor, threadName));\n        }\n    }\n\n    // Just stop the select() and start it again, so that the processor\n    // can be activated immediately.\n    wakeup();\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">的时候开始运行的,有三个方法调用`startupProcessor`:</span><br></pre></td></tr></table></figure>\n<p>1.AbstractPollingIoProcessor.add()<br>2.AbstractPollingIoProcessor.remove()<br>3.AbstractPollingIoProcessor.dispose()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所以,在第一个连接过来的时候,`executor`里面的线程就在跑`run`方法了.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">--------</span><br><span class=\"line\">接一开始的`newSessions`,为什么有新的连接,就会有·session·加进`newSessions`里面呢?</span><br><span class=\"line\"></span><br><span class=\"line\">在mina的服务器代码里面,启动mina时需要调用`acceptor.bind();`</span><br><span class=\"line\">追踪`bind`方法</span><br></pre></td></tr></table></figure></p>\n<p> public final void bind(Iterable&lt;? extends SocketAddress&gt; localAddresses) throws IOException {<br>        if (isDisposing()) {<br>            throw new IllegalStateException(“The Accpetor disposed is being disposed.”);<br>        }</p>\n<pre><code>    if (localAddresses == null) {\n        throw new IllegalArgumentException(&quot;localAddresses&quot;);\n    }\n\n    List&lt;SocketAddress&gt; localAddressesCopy = new ArrayList&lt;SocketAddress&gt;();\n\n    for (SocketAddress a : localAddresses) {\n        checkAddressType(a);\n        localAddressesCopy.add(a);\n    }\n\n    if (localAddressesCopy.isEmpty()) {\n        throw new IllegalArgumentException(&quot;localAddresses is empty.&quot;);\n    }\n\n    boolean activate = false;\n    synchronized (bindLock) {\n        synchronized (boundAddresses) {\n            if (boundAddresses.isEmpty()) {\n                activate = true;\n            }\n        }\n\n        if (getHandler() == null) {\n            throw new IllegalStateException(&quot;handler is not set.&quot;);\n        }\n\n        try {\n            Set&lt;SocketAddress&gt; addresses = bindInternal(localAddressesCopy);\n\n            synchronized (boundAddresses) {\n                boundAddresses.addAll(addresses);\n            }\n        } catch (IOException e) {\n            throw e;\n        } catch (RuntimeException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new RuntimeIoException(&quot;Failed to bind to: &quot; + getLocalAddresses(), e);\n        }\n    }\n\n    if (activate) {\n        getListeners().fireServiceActivated();\n    }\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有一行</span><br><span class=\"line\">``` Set&lt;SocketAddress&gt; addresses = bindInternal(localAddressesCopy);`</span><br></pre></td></tr></table></figure>\n<p>继续追踪<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected final Set&lt;SocketAddress&gt; bindInternal(List&lt;? extends SocketAddress&gt; localAddresses) throws Exception &#123;</span><br><span class=\"line\">       // Create a bind request as a Future operation. When the selector</span><br><span class=\"line\">       // have handled the registration, it will signal this future.</span><br><span class=\"line\">       AcceptorOperationFuture request = new AcceptorOperationFuture(localAddresses);</span><br><span class=\"line\"></span><br><span class=\"line\">       // adds the Registration request to the queue for the Workers</span><br><span class=\"line\">       // to handle</span><br><span class=\"line\">       registerQueue.add(request);</span><br><span class=\"line\"></span><br><span class=\"line\">       // creates the Acceptor instance and has the local</span><br><span class=\"line\">       // executor kick it off.</span><br><span class=\"line\">       startupAcceptor();</span><br><span class=\"line\"></span><br><span class=\"line\">       // As we just started the acceptor, we have to unblock the select()</span><br><span class=\"line\">       // in order to process the bind request we just have added to the</span><br><span class=\"line\">       // registerQueue.</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           lock.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">           // Wait a bit to give a chance to the Acceptor thread to do the select()</span><br><span class=\"line\">           Thread.sleep(10);</span><br><span class=\"line\">           wakeup();</span><br><span class=\"line\">       &#125; finally &#123;</span><br><span class=\"line\">           lock.release();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       // Now, we wait until this request is completed.</span><br><span class=\"line\">       request.awaitUninterruptibly();</span><br><span class=\"line\"></span><br><span class=\"line\">       if (request.getException() != null) &#123;</span><br><span class=\"line\">           throw request.getException();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       // Update the local addresses.</span><br><span class=\"line\">       // setLocalAddresses() shouldn&apos;t be called from the worker thread</span><br><span class=\"line\">       // because of deadlock.</span><br><span class=\"line\">       Set&lt;SocketAddress&gt; newLocalAddresses = new HashSet&lt;SocketAddress&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">       for (H handle : boundHandles.values()) &#123;</span><br><span class=\"line\">           newLocalAddresses.add(localAddress(handle));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       return newLocalAddresses;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>里面调用了<code>startupAcceptor();</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void startupAcceptor() throws InterruptedException &#123;</span><br><span class=\"line\">        // If the acceptor is not ready, clear the queues</span><br><span class=\"line\">        // TODO : they should already be clean : do we have to do that ?</span><br><span class=\"line\">        if (!selectable) &#123;</span><br><span class=\"line\">            registerQueue.clear();</span><br><span class=\"line\">            cancelQueue.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // start the acceptor if not already started</span><br><span class=\"line\">        Acceptor acceptor = acceptorRef.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (acceptor == null) &#123;</span><br><span class=\"line\">            lock.acquire();</span><br><span class=\"line\">            acceptor = new Acceptor();</span><br><span class=\"line\"></span><br><span class=\"line\">            if (acceptorRef.compareAndSet(null, acceptor)) &#123;</span><br><span class=\"line\">                executeWorker(acceptor);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                lock.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>开启了一个线程执行<code>Acceptor</code>的<code>run()</code>方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void startupAcceptor() throws InterruptedException &#123;</span><br><span class=\"line\">        // If the acceptor is not ready, clear the queues</span><br><span class=\"line\">        // TODO : they should already be clean : do we have to do that ?</span><br><span class=\"line\">        if (!selectable) &#123;</span><br><span class=\"line\">            registerQueue.clear();</span><br><span class=\"line\">            cancelQueue.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // start the acceptor if not already started</span><br><span class=\"line\">        Acceptor acceptor = acceptorRef.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (acceptor == null) &#123;</span><br><span class=\"line\">            lock.acquire();</span><br><span class=\"line\">            acceptor = new Acceptor();</span><br><span class=\"line\"></span><br><span class=\"line\">            if (acceptorRef.compareAndSet(null, acceptor)) &#123;</span><br><span class=\"line\">                executeWorker(acceptor);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                lock.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (selected &gt; 0) &#123;</span><br><span class=\"line\">                        // We have some connection request, let&apos;s process</span><br><span class=\"line\">                        // them here.</span><br><span class=\"line\">                        processHandles(selectedHandles());</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>processHandles</code>方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void processHandles(Iterator&lt;H&gt; handles) throws Exception &#123;</span><br><span class=\"line\">            while (handles.hasNext()) &#123;</span><br><span class=\"line\">                H handle = handles.next();</span><br><span class=\"line\">                handles.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                // Associates a new created connection to a processor,</span><br><span class=\"line\">                // and get back a session</span><br><span class=\"line\">                S session = accept(processor, handle);</span><br><span class=\"line\"></span><br><span class=\"line\">                if (session == null) &#123;</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                initSession(session, null, null);</span><br><span class=\"line\"></span><br><span class=\"line\">                // add the session to the SocketIoProcessor</span><br><span class=\"line\">                session.getProcessor().add(session);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个方法里面调用了三个方法:</p>\n<p>#####1.    S session = accept(processor, handle);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected NioSession accept(IoProcessor&lt;NioSession&gt; processor, ServerSocketChannel handle) throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        SelectionKey key = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (handle != null) &#123;</span><br><span class=\"line\">            key = handle.keyFor(selector);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if ((key == null) || (!key.isValid()) || (!key.isAcceptable())) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // accept the connection from the client</span><br><span class=\"line\">        SocketChannel ch = handle.accept();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (ch == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return new NioSocketSession(this, processor, ch);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>new了一个session并且注册了SocketChannel</p>\n<p>#####2. initSession(session, null, null);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected final void initSession(IoSession session, IoFuture future, IoSessionInitializer sessionInitializer) &#123;</span><br><span class=\"line\">    // Update lastIoTime if needed.</span><br><span class=\"line\">    if (stats.getLastReadTime() == 0) &#123;</span><br><span class=\"line\">        stats.setLastReadTime(getActivationTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (stats.getLastWriteTime() == 0) &#123;</span><br><span class=\"line\">        stats.setLastWriteTime(getActivationTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Every property but attributeMap should be set now.</span><br><span class=\"line\">    // Now initialize the attributeMap.  The reason why we initialize</span><br><span class=\"line\">    // the attributeMap at last is to make sure all session properties</span><br><span class=\"line\">    // such as remoteAddress are provided to IoSessionDataStructureFactory.</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        ((AbstractIoSession) session).setAttributeMap(session.getService().getSessionDataStructureFactory()</span><br><span class=\"line\">                .getAttributeMap(session));</span><br><span class=\"line\">    &#125; catch (IoSessionInitializationException e) &#123;</span><br><span class=\"line\">        throw e;</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        throw new IoSessionInitializationException(&quot;Failed to initialize an attributeMap.&quot;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        ((AbstractIoSession) session).setWriteRequestQueue(session.getService().getSessionDataStructureFactory()</span><br><span class=\"line\">                .getWriteRequestQueue(session));</span><br><span class=\"line\">    &#125; catch (IoSessionInitializationException e) &#123;</span><br><span class=\"line\">        throw e;</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        throw new IoSessionInitializationException(&quot;Failed to initialize a writeRequestQueue.&quot;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((future != null) &amp;&amp; (future instanceof ConnectFuture)) &#123;</span><br><span class=\"line\">        // DefaultIoFilterChain will notify the future. (We support ConnectFuture only for now).</span><br><span class=\"line\">        session.setAttribute(DefaultIoFilterChain.SESSION_CREATED_FUTURE, future);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (sessionInitializer != null) &#123;</span><br><span class=\"line\">        sessionInitializer.initializeSession(session, future);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    finishSessionInitialization0(session, future);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对<code>session</code>各种初始化</p>\n<p>#####3. session.getProcessor().add(session);<br>这里的<code>Processor</code>就是<code>AbstractPollingIoProcessor</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void add(S session) &#123;</span><br><span class=\"line\">        if (disposed || disposing) &#123;</span><br><span class=\"line\">            throw new IllegalStateException(&quot;Already disposed.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Adds the session to the newSession queue and starts the worker</span><br><span class=\"line\">        newSessions.add(session);</span><br><span class=\"line\">        startupProcessor();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里就解决了上面没有提到的<br>1.将<code>session</code>加到<code>newSessions</code>里面;<br>2.<code>startupProcessor();</code>运行了那个关键的<code>Processor</code>的<code>Run()</code>方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void startupProcessor() &#123;</span><br><span class=\"line\">       Processor processor = processorRef.get();</span><br><span class=\"line\"></span><br><span class=\"line\">       if (processor == null) &#123;</span><br><span class=\"line\">           processor = new Processor();</span><br><span class=\"line\"></span><br><span class=\"line\">           if (processorRef.compareAndSet(null, processor)) &#123;</span><br><span class=\"line\">               executor.execute(new NamePreservingRunnable(processor, threadName));</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       // Just stop the select() and start it again, so that the processor</span><br><span class=\"line\">       // can be activated immediately.</span><br><span class=\"line\">       wakeup();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[{"_id":"source/_posts/JVM/JVM.png","slug":"JVM.png","post":"cjvx7vbrb001um74z88at5o24","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjvx7vbif0000m74zzrbc0stb","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbjd0007m74z0p0kvbv7"},{"post_id":"cjvx7vbip0001m74zb2kebuzi","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbjd0009m74z05xdkm6r"},{"post_id":"cjvx7vbq4000am74z0p91rnlo","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbqi000im74zyq7w8bc9"},{"post_id":"cjvx7vbq8000cm74zwrxrlrti","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbqk000km74zly2s0oti"},{"post_id":"cjvx7vbqd000fm74zehlap71m","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbqn000om74zlrkd7235"},{"post_id":"cjvx7vbqg000hm74zydbdhu12","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbqp000rm74zbei6tne1"},{"post_id":"cjvx7vbqj000jm74zd3jixdka","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbqr000vm74zl8doc2pa"},{"post_id":"cjvx7vbqm000nm74zap0z7wm0","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbqt000ym74zhposkuva"},{"post_id":"cjvx7vbqo000qm74zwo86vb0f","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbqu0011m74z0whzvfpf"},{"post_id":"cjvx7vbqq000um74zceh7nwyy","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbqw0014m74z5h15qvjl"},{"post_id":"cjvx7vbqs000xm74z1njzrjzq","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbqy0017m74zgobrcx1d"},{"post_id":"cjvx7vbqt0010m74zbb988bop","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbr0001am74zsafsvnn8"},{"post_id":"cjvx7vbqv0013m74zeovkr448","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbr2001dm74zwcvtdohn"},{"post_id":"cjvx7vbqx0016m74zugkzjonx","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbr4001gm74z7tqhw2ic"},{"post_id":"cjvx7vbqz0019m74zaohs8js5","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbr6001jm74znqrrdav0"},{"post_id":"cjvx7vbr1001cm74zir5v1r4b","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbr7001mm74zs1a43ktw"},{"post_id":"cjvx7vbr3001fm74z2w6gribt","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbr9001pm74z2xx7ahk4"},{"post_id":"cjvx7vbr5001im74z23pd7b82","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbra001sm74z5tnfum4d"},{"post_id":"cjvx7vbr6001lm74z01q4kd9p","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbrc001vm74zbnqnd725"},{"post_id":"cjvx7vbr8001om74z0of5r4yy","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbre001ym74znb52ocw1"},{"post_id":"cjvx7vbra001rm74za2gjxkjl","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbrf0021m74zddwqa0ao"},{"post_id":"cjvx7vbrb001um74z88at5o24","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbri0025m74z073zq7e3"},{"post_id":"cjvx7vbrd001xm74zkyarlwq4","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbrk0028m74zpvq5fes1"},{"post_id":"cjvx7vbrf0020m74zzevdbt3l","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbrl002cm74zv8dl8l6v"},{"post_id":"cjvx7vbrg0024m74zyger1dc5","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbrn002fm74zxjmr5inv"},{"post_id":"cjvx7vbrj0027m74zcks95b1f","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbrp002im74ztxu954zs"},{"post_id":"cjvx7vbrk002am74zytbwrdmh","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbrs002mm74z9lha7bto"},{"post_id":"cjvx7vbrm002em74zwlr67670","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbru002pm74zlalfosih"},{"post_id":"cjvx7vbro002hm74zfczcgl6s","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbs0002tm74zcfmagceq"},{"post_id":"cjvx7vbrq002lm74zj6datnum","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbs1002wm74zzou6z7n1"},{"post_id":"cjvx7vbrt002om74zd8xoxkp9","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbs30030m74z3wf6ssa6"},{"post_id":"cjvx7vbrv002sm74zh3mis9gy","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbs50033m74zc16272tn"},{"post_id":"cjvx7vbs0002vm74zf0zo4jpu","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbs70037m74zme22loc8"},{"post_id":"cjvx7vbs2002zm74zn3xscg63","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbs9003am74zfuhdmzhs"},{"post_id":"cjvx7vbs40032m74zewuvf3ev","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbsc003em74zjuph1l55"},{"post_id":"cjvx7vbs50035m74zcb139pop","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbsd003hm74z8stngd5g"},{"post_id":"cjvx7vbs80039m74z8qhs6dwz","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbsf003lm74ze5678vzl"},{"post_id":"cjvx7vbsa003cm74zc5hdd9eo","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbsh003om74zpq3b80ky"},{"post_id":"cjvx7vbsc003gm74zjzqa3mga","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbsj003rm74zs4hhjcki"},{"post_id":"cjvx7vbse003jm74zmq98qlqc","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbsn003vm74zo0quomgj"},{"post_id":"cjvx7vbsi003qm74zlotnjxp1","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbsq0041m74z7e2zfo6p"},{"post_id":"cjvx7vbsk003um74zy540v5rh","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbst0044m74zdw0i7be2"},{"post_id":"cjvx7vbsp0040m74zfwld1cgm","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbsz004am74z434dhnae"},{"post_id":"cjvx7vbsr0043m74z01q58uc7","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbt1004em74zb113ahvt"},{"post_id":"cjvx7vbsu0047m74zy9vqm9di","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbt2004hm74zr6d6u1k4"},{"post_id":"cjvx7vbt0004dm74z8taqunl9","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbt7004nm74zvts5qrn0"},{"post_id":"cjvx7vbt1004gm74z7gragmku","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbt9004rm74z5q7ovynl"},{"post_id":"cjvx7vbt5004mm74zfz3705q5","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbte004wm74z7k6tquvx"},{"post_id":"cjvx7vbt8004qm74zrl6xst26","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbth0050m74zspee9lzs"},{"post_id":"cjvx7vbta004tm74zat2j9zh5","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbtl0053m74zyqqrn0vw"},{"post_id":"cjvx7vbtd004vm74zz8ovnwml","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbtn0057m74zpv7wc1a2"},{"post_id":"cjvx7vbtg004zm74z9l2cuwla","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbtp005am74zawmyk1uo"},{"post_id":"cjvx7vbtj0052m74z1vs3mu4j","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbts005em74zo9knwupa"},{"post_id":"cjvx7vbtn0056m74zty047kqm","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbtt005gm74z8otyzvyw"},{"post_id":"cjvx7vbto0059m74zau994mbb","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbtu005jm74zjwjr1xsu"},{"post_id":"cjvx7vbtq005dm74z2og2ktte","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbtv005lm74zh5umgpry"},{"post_id":"cjvx7vbvc0073m74zlwt0nq9j","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbvm0079m74zs51hkopw"},{"post_id":"cjvx7vbvg0074m74zr6tb3ed6","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbvn007bm74zeo687h80"},{"post_id":"cjvx7vbvj0076m74zuht6hstv","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbvo007dm74z3ngqwvih"},{"post_id":"cjvx7vbvl0078m74ze6cl2ltz","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbvp007fm74z605ja0nz"},{"post_id":"cjvx7vbyl007jm74zg2idhqkm","category_id":"cjvx7vbis0002m74z900a6e3h","_id":"cjvx7vbyo007mm74zhg07skuc"}],"PostTag":[{"post_id":"cjvx7vbif0000m74zzrbc0stb","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbjc0006m74zjbuc2uem"},{"post_id":"cjvx7vbip0001m74zb2kebuzi","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbjd0008m74zvy8gv1m8"},{"post_id":"cjvx7vbqg000hm74zydbdhu12","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbql000mm74zf7whbjm7"},{"post_id":"cjvx7vbqg000hm74zydbdhu12","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbqn000pm74zaluoykps"},{"post_id":"cjvx7vbq4000am74z0p91rnlo","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbqq000tm74z1xk1slru"},{"post_id":"cjvx7vbq4000am74z0p91rnlo","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbqs000wm74z02hfnc6d"},{"post_id":"cjvx7vbqj000jm74zd3jixdka","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbqt000zm74zeq5wkw3b"},{"post_id":"cjvx7vbqj000jm74zd3jixdka","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbqv0012m74zrkjuy941"},{"post_id":"cjvx7vbqm000nm74zap0z7wm0","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbqx0015m74zx330kqor"},{"post_id":"cjvx7vbqm000nm74zap0z7wm0","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbqz0018m74ztipori1p"},{"post_id":"cjvx7vbq8000cm74zwrxrlrti","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbr1001bm74zu11qenq5"},{"post_id":"cjvx7vbq8000cm74zwrxrlrti","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbr3001em74zbnourjit"},{"post_id":"cjvx7vbqo000qm74zwo86vb0f","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbr5001hm74zh0wyivfr"},{"post_id":"cjvx7vbqo000qm74zwo86vb0f","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbr6001km74z2othri2z"},{"post_id":"cjvx7vbqq000um74zceh7nwyy","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbr8001nm74zxfhog9uf"},{"post_id":"cjvx7vbqq000um74zceh7nwyy","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbra001qm74zi5qu4r4j"},{"post_id":"cjvx7vbqd000fm74zehlap71m","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbrb001tm74z662n64r4"},{"post_id":"cjvx7vbqd000fm74zehlap71m","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbrc001wm74zhk3za7sf"},{"post_id":"cjvx7vbqs000xm74z1njzrjzq","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbre001zm74z9z982fxl"},{"post_id":"cjvx7vbqs000xm74z1njzrjzq","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbrg0023m74z13zet8c2"},{"post_id":"cjvx7vbqt0010m74zbb988bop","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbri0026m74zssuyeelh"},{"post_id":"cjvx7vbqt0010m74zbb988bop","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbrk0029m74z8fb1k8d1"},{"post_id":"cjvx7vbqv0013m74zeovkr448","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbrm002dm74zrk4wjxk0"},{"post_id":"cjvx7vbqv0013m74zeovkr448","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbrn002gm74zj3kc9a1i"},{"post_id":"cjvx7vbqx0016m74zugkzjonx","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbrq002km74zjntfpcmn"},{"post_id":"cjvx7vbqx0016m74zugkzjonx","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbrt002nm74zru3ubono"},{"post_id":"cjvx7vbqz0019m74zaohs8js5","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbrv002rm74zegtvfv28"},{"post_id":"cjvx7vbqz0019m74zaohs8js5","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbs0002um74zkq0cptr8"},{"post_id":"cjvx7vbr1001cm74zir5v1r4b","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbs2002ym74zttw0u8uq"},{"post_id":"cjvx7vbr1001cm74zir5v1r4b","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbs40031m74zqhjjylw1"},{"post_id":"cjvx7vbr3001fm74z2w6gribt","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbs50034m74znuvpt37s"},{"post_id":"cjvx7vbr3001fm74z2w6gribt","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbs80038m74zit80a920"},{"post_id":"cjvx7vbr5001im74z23pd7b82","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbsa003bm74zx6co44xe"},{"post_id":"cjvx7vbr5001im74z23pd7b82","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbsc003fm74zq2dxb1zj"},{"post_id":"cjvx7vbr6001lm74z01q4kd9p","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbse003im74zl88i31pa"},{"post_id":"cjvx7vbr6001lm74z01q4kd9p","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbsg003mm74zkaayo4dm"},{"post_id":"cjvx7vbr8001om74z0of5r4yy","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbsi003pm74zbhjte8f9"},{"post_id":"cjvx7vbr8001om74z0of5r4yy","tag_id":"cjvx7vbqc000em74zhftzcel6","_id":"cjvx7vbsk003tm74z0klyed8v"},{"post_id":"cjvx7vbra001rm74za2gjxkjl","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbsn003wm74z8wwvvijb"},{"post_id":"cjvx7vbrb001um74z88at5o24","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbsp003zm74zk0p9t912"},{"post_id":"cjvx7vbrd001xm74zkyarlwq4","tag_id":"cjvx7vbrg0022m74zva24ac27","_id":"cjvx7vbsr0042m74z3hpddews"},{"post_id":"cjvx7vbrd001xm74zkyarlwq4","tag_id":"cjvx7vbrl002bm74z01wtarqq","_id":"cjvx7vbsu0046m74zzzm7voeg"},{"post_id":"cjvx7vbrf0020m74zzevdbt3l","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbsw0048m74z7u9p0sux"},{"post_id":"cjvx7vbrf0020m74zzevdbt3l","tag_id":"cjvx7vbrp002jm74zv1rn7aak","_id":"cjvx7vbt0004cm74zwfrdi85b"},{"post_id":"cjvx7vbrg0024m74zyger1dc5","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbt1004fm74zfyojawyr"},{"post_id":"cjvx7vbrg0024m74zyger1dc5","tag_id":"cjvx7vbru002qm74zfpzpdm6o","_id":"cjvx7vbt3004jm74z84fjeqla"},{"post_id":"cjvx7vbs40032m74zewuvf3ev","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbt5004lm74zog1mywd3"},{"post_id":"cjvx7vbrj0027m74zcks95b1f","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbt8004pm74zlko61kyf"},{"post_id":"cjvx7vbrj0027m74zcks95b1f","tag_id":"cjvx7vbs2002xm74zcymu80lb","_id":"cjvx7vbta004sm74z1sqbargr"},{"post_id":"cjvx7vbs50035m74zcb139pop","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbtd004um74zlua12otc"},{"post_id":"cjvx7vbrk002am74zytbwrdmh","tag_id":"cjvx7vbs2002xm74zcymu80lb","_id":"cjvx7vbtf004ym74z2ylecqy1"},{"post_id":"cjvx7vbrm002em74zwlr67670","tag_id":"cjvx7vbs2002xm74zcymu80lb","_id":"cjvx7vbti0051m74zrmr8fvxu"},{"post_id":"cjvx7vbro002hm74zfczcgl6s","tag_id":"cjvx7vbsf003km74znnrwi9sz","_id":"cjvx7vbtm0055m74zbh8bgunv"},{"post_id":"cjvx7vbrq002lm74zj6datnum","tag_id":"cjvx7vbs2002xm74zcymu80lb","_id":"cjvx7vbto0058m74z8mpr37tn"},{"post_id":"cjvx7vbsp0040m74zfwld1cgm","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbtq005cm74zalyhrwv3"},{"post_id":"cjvx7vbsp0040m74zfwld1cgm","tag_id":"cjvx7vbrp002jm74zv1rn7aak","_id":"cjvx7vbtt005fm74zkc07vnmf"},{"post_id":"cjvx7vbrt002om74zd8xoxkp9","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbtu005im74zqvupnx1m"},{"post_id":"cjvx7vbrt002om74zd8xoxkp9","tag_id":"cjvx7vbs2002xm74zcymu80lb","_id":"cjvx7vbtv005km74zn1txrvid"},{"post_id":"cjvx7vbrv002sm74zh3mis9gy","tag_id":"cjvx7vbst0045m74zvctd9dus","_id":"cjvx7vbtv005nm74zj0b4zbv2"},{"post_id":"cjvx7vbs0002vm74zf0zo4jpu","tag_id":"cjvx7vbsf003km74znnrwi9sz","_id":"cjvx7vbtw005om74zabe8mxa0"},{"post_id":"cjvx7vbt1004gm74z7gragmku","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbtw005qm74z3vg607lk"},{"post_id":"cjvx7vbt5004mm74zfz3705q5","tag_id":"cjvx7vbst0045m74zvctd9dus","_id":"cjvx7vbtw005rm74z15qnf8yx"},{"post_id":"cjvx7vbs2002zm74zn3xscg63","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbtx005sm74zuyk5fgvp"},{"post_id":"cjvx7vbs2002zm74zn3xscg63","tag_id":"cjvx7vbt8004om74za02qdc1r","_id":"cjvx7vbtx005um74zp1yzxe9b"},{"post_id":"cjvx7vbs80039m74z8qhs6dwz","tag_id":"cjvx7vbte004xm74zw88wpn7o","_id":"cjvx7vbtx005vm74zlw6wtmws"},{"post_id":"cjvx7vbs80039m74z8qhs6dwz","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbty005xm74zrzik3gqs"},{"post_id":"cjvx7vbsa003cm74zc5hdd9eo","tag_id":"cjvx7vbtq005bm74zaubkeqb3","_id":"cjvx7vbty005ym74zidpsmxhn"},{"post_id":"cjvx7vbsc003gm74zjzqa3mga","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbtz0060m74zoj3k2boo"},{"post_id":"cjvx7vbse003jm74zmq98qlqc","tag_id":"cjvx7vbtv005mm74zgsc42q7x","_id":"cjvx7vbtz0061m74zomtk5ukj"},{"post_id":"cjvx7vbsi003qm74zlotnjxp1","tag_id":"cjvx7vbtw005pm74zephr8km7","_id":"cjvx7vbu00063m74zp742jsir"},{"post_id":"cjvx7vbsi003qm74zlotnjxp1","tag_id":"cjvx7vbtx005tm74zjsn2eum4","_id":"cjvx7vbu00064m74ziw643lic"},{"post_id":"cjvx7vbsk003um74zy540v5rh","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbu00066m74z4bsgnjyy"},{"post_id":"cjvx7vbsk003um74zy540v5rh","tag_id":"cjvx7vbtx005wm74zuyuk3j31","_id":"cjvx7vbu10067m74z3mx5gxyw"},{"post_id":"cjvx7vbsr0043m74z01q58uc7","tag_id":"cjvx7vbst0045m74zvctd9dus","_id":"cjvx7vbu20069m74zqeneolxr"},{"post_id":"cjvx7vbsr0043m74z01q58uc7","tag_id":"cjvx7vbtz0062m74zfus9b93f","_id":"cjvx7vbu3006am74zigg2l8ue"},{"post_id":"cjvx7vbsu0047m74zy9vqm9di","tag_id":"cjvx7vbst0045m74zvctd9dus","_id":"cjvx7vbu3006cm74zppzzhahv"},{"post_id":"cjvx7vbsu0047m74zy9vqm9di","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbu3006dm74zcg1ctq8v"},{"post_id":"cjvx7vbt0004dm74z8taqunl9","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbu4006em74z2md410pj"},{"post_id":"cjvx7vbt3004km74zkjv0kzck","tag_id":"cjvx7vbu3006bm74z1m1y1bog","_id":"cjvx7vbu4006gm74zqb3c4dst"},{"post_id":"cjvx7vbt8004qm74zrl6xst26","tag_id":"cjvx7vbu4006fm74zfcprh6j8","_id":"cjvx7vbu5006im74zv4bvj47r"},{"post_id":"cjvx7vbt8004qm74zrl6xst26","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbu6006jm74z6wdqcdgi"},{"post_id":"cjvx7vbta004tm74zat2j9zh5","tag_id":"cjvx7vbu4006fm74zfcprh6j8","_id":"cjvx7vbu8006lm74zjjzf51v6"},{"post_id":"cjvx7vbta004tm74zat2j9zh5","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbu8006mm74zl7xmutsi"},{"post_id":"cjvx7vbtd004vm74zz8ovnwml","tag_id":"cjvx7vbu6006km74z2oy46ai4","_id":"cjvx7vbu9006om74zz9rvs8cb"},{"post_id":"cjvx7vbtg004zm74z9l2cuwla","tag_id":"cjvx7vbu4006fm74zfcprh6j8","_id":"cjvx7vbua006qm74zvpk04255"},{"post_id":"cjvx7vbtg004zm74z9l2cuwla","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbub006rm74zhtxvoqex"},{"post_id":"cjvx7vbtj0052m74z1vs3mu4j","tag_id":"cjvx7vbu4006fm74zfcprh6j8","_id":"cjvx7vbuc006tm74ztxxpv63e"},{"post_id":"cjvx7vbtj0052m74z1vs3mu4j","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbuc006um74z26jxb3y7"},{"post_id":"cjvx7vbtn0056m74zty047kqm","tag_id":"cjvx7vbub006sm74zbv7kjzfb","_id":"cjvx7vbud006wm74zqjendnvn"},{"post_id":"cjvx7vbtn0056m74zty047kqm","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbue006xm74zx3v0fwyt"},{"post_id":"cjvx7vbto0059m74zau994mbb","tag_id":"cjvx7vbu4006fm74zfcprh6j8","_id":"cjvx7vbuf006zm74zqhto61g6"},{"post_id":"cjvx7vbto0059m74zau994mbb","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbug0070m74zbovr0xgp"},{"post_id":"cjvx7vbtq005dm74z2og2ktte","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbuh0071m74zhxychwdm"},{"post_id":"cjvx7vbtq005dm74z2og2ktte","tag_id":"cjvx7vbub006sm74zbv7kjzfb","_id":"cjvx7vbuh0072m74zb6cdizqc"},{"post_id":"cjvx7vbvc0073m74zlwt0nq9j","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbvj0075m74zaopvmtzp"},{"post_id":"cjvx7vbvc0073m74zlwt0nq9j","tag_id":"cjvx7vbtw005pm74zephr8km7","_id":"cjvx7vbvl0077m74zdv1m4s92"},{"post_id":"cjvx7vbvg0074m74zr6tb3ed6","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbvn007am74z9weivarw"},{"post_id":"cjvx7vbvg0074m74zr6tb3ed6","tag_id":"cjvx7vbrp002jm74zv1rn7aak","_id":"cjvx7vbvo007cm74zv0t6ryqa"},{"post_id":"cjvx7vbvj0076m74zuht6hstv","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbvp007em74zkhuyn8jn"},{"post_id":"cjvx7vbvj0076m74zuht6hstv","tag_id":"cjvx7vbru002qm74zfpzpdm6o","_id":"cjvx7vbvp007gm74z0oeid7jj"},{"post_id":"cjvx7vbvl0078m74ze6cl2ltz","tag_id":"cjvx7vbu4006fm74zfcprh6j8","_id":"cjvx7vbvp007hm74zud81o3y9"},{"post_id":"cjvx7vbvl0078m74ze6cl2ltz","tag_id":"cjvx7vbt2004im74z1mvwq2bg","_id":"cjvx7vbvp007im74z82g1cc7j"},{"post_id":"cjvx7vbyl007jm74zg2idhqkm","tag_id":"cjvx7vbiu0003m74ztlwbxg9t","_id":"cjvx7vbyn007km74zgbdkejzt"},{"post_id":"cjvx7vbyl007jm74zg2idhqkm","tag_id":"cjvx7vbrp002jm74zv1rn7aak","_id":"cjvx7vbyo007lm74zqcm6jl4r"}],"Tag":[{"name":"Java","_id":"cjvx7vbiu0003m74ztlwbxg9t"},{"name":"Effective Java","_id":"cjvx7vbqc000em74zhftzcel6"},{"name":"kcp","_id":"cjvx7vbrg0022m74zva24ac27"},{"name":"网络","_id":"cjvx7vbrl002bm74z01wtarqq"},{"name":"mina","_id":"cjvx7vbrp002jm74zv1rn7aak"},{"name":"Mock","_id":"cjvx7vbru002qm74zfpzpdm6o"},{"name":"MongoDB","_id":"cjvx7vbs2002xm74zcymu80lb"},{"name":"Mongo","_id":"cjvx7vbsf003km74znnrwi9sz"},{"name":"PHP","_id":"cjvx7vbst0045m74zvctd9dus"},{"name":"linux","_id":"cjvx7vbt2004im74z1mvwq2bg"},{"name":"redis","_id":"cjvx7vbt8004om74za02qdc1r"},{"name":"awk","_id":"cjvx7vbte004xm74zw88wpn7o"},{"name":"svn","_id":"cjvx7vbtq005bm74zaubkeqb3"},{"name":"git","_id":"cjvx7vbtv005mm74zgsc42q7x"},{"name":"python","_id":"cjvx7vbtw005pm74zephr8km7"},{"name":"jinja","_id":"cjvx7vbtx005tm74zjsn2eum4"},{"name":"idea","_id":"cjvx7vbtx005wm74zuyuk3j31"},{"name":"Mysql","_id":"cjvx7vbtz0062m74zfus9b93f"},{"name":"hexo hello","_id":"cjvx7vbu3006bm74z1m1y1bog"},{"name":"梯子","_id":"cjvx7vbu4006fm74zfcprh6j8"},{"name":"tricks","_id":"cjvx7vbu6006km74z2oy46ai4"},{"name":"ThreadPool","_id":"cjvx7vbub006sm74zbv7kjzfb"}]}}